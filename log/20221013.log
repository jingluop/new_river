[2022-10-13 09:05:21,112][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:21,113][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:21,502][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:21,503][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:22,205][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:22,206][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:22,236][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:22,237][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:22,258][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:22,259][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:22,263][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 09:05:22,665][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[100285, 100286, 100287, 100288, 100289, 100290, 100291, 100292, 100293, 100294, 100295, 100296, 100297, 100298, 100299, 100300, 100301, 100302, 100304, 100305, 100306, 100307, 100308, 100309, 100310, 100311, 100312, 100313, 100314, 100315, 100316, 100317, 100318, 100319, 100320, 100321, 100322, 100324, 100325, 100327, 100328, 100329, 100330, 100331, 100332, 100333, 100334, 100336, 100337, 100338], start_index为：277
[2022-10-13 09:05:22,791][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:22,793][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:22,794][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:22,794][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:22,794][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100285
}
[2022-10-13 09:05:22,794][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100285}
[2022-10-13 09:05:22,795][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100285
}
[2022-10-13 09:05:23,403][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:23,403][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100285
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:23,707][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:23,708][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:23,714][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:23,715][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:23,716][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:23,716][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:23,716][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100286
}
[2022-10-13 09:05:23,716][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100286}
[2022-10-13 09:05:23,717][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100286
}
[2022-10-13 09:05:24,168][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:24,168][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100286
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:24,518][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:24,518][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:24,525][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:24,526][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:24,526][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:24,527][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:24,527][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100287
}
[2022-10-13 09:05:24,527][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100287}
[2022-10-13 09:05:24,527][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100287
}
[2022-10-13 09:05:25,008][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:25,009][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100287
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:25,309][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:25,309][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:25,316][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:25,317][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:25,318][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:25,318][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:25,318][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100288
}
[2022-10-13 09:05:25,318][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100288}
[2022-10-13 09:05:25,319][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100288
}
[2022-10-13 09:05:25,802][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:25,803][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100288
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:26,165][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:26,166][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:26,172][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:26,173][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:26,174][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:26,174][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:26,174][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100289
}
[2022-10-13 09:05:26,174][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100289}
[2022-10-13 09:05:26,175][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100289
}
[2022-10-13 09:05:26,690][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:26,690][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100289
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:27,018][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:27,018][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:27,023][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:27,024][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:27,024][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:27,024][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:27,024][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100290
}
[2022-10-13 09:05:27,025][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100290}
[2022-10-13 09:05:27,025][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100290
}
[2022-10-13 09:05:27,496][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:27,496][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100290
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:27,815][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:27,815][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:27,820][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:27,821][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:27,822][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:27,822][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:27,822][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100291
}
[2022-10-13 09:05:27,823][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100291}
[2022-10-13 09:05:27,823][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100291
}
[2022-10-13 09:05:28,509][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:28,509][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100291
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:28,904][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:28,905][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:28,911][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:28,912][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:28,912][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:28,913][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:28,913][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100292
}
[2022-10-13 09:05:28,913][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100292}
[2022-10-13 09:05:28,913][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100292
}
[2022-10-13 09:05:29,876][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:29,876][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100292
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:30,269][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:30,270][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:30,275][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:30,276][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:30,276][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:30,276][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:30,277][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100293
}
[2022-10-13 09:05:30,277][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100293}
[2022-10-13 09:05:30,277][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100293
}
[2022-10-13 09:05:31,105][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:31,105][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100293
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:31,523][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:31,524][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:31,530][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:31,531][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:31,532][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:31,532][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:31,532][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100294
}
[2022-10-13 09:05:31,532][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100294}
[2022-10-13 09:05:31,533][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100294
}
[2022-10-13 09:05:32,371][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:32,371][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100294
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:32,716][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:32,716][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:32,722][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:32,723][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:32,723][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:32,723][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:32,723][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100295
}
[2022-10-13 09:05:32,724][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100295}
[2022-10-13 09:05:32,724][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100295
}
[2022-10-13 09:05:33,209][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100295', 'collectionName': 'The Winkybots', 'collectionCode': 'thewinkybots', 'contractAddress': '0xeed560b1b0172baa6e137c27aa0a643326f360d1', 'collectionImage': 'https://lh3.googleusercontent.com/REOlkSWV9V1RaiR1bY8oaB_23Ji17rlXSj5fZCwa_KeFCDVQiZwj28MPOEL2km9KSSRVTMtjnwxmnUQSN4GGH1HXDhO0dhf4IAcIQk4=s120', 'tokenId': '7881', 'tokenName': 'The Winkybots #7881', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.059, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100295', 'collectionName': 'The Winkybots', 'collectionCode': 'thewinkybots', 'contractAddress': '0xeed560b1b0172baa6e137c27aa0a643326f360d1', 'collectionImage': 'https://lh3.googleusercontent.com/REOlkSWV9V1RaiR1bY8oaB_23Ji17rlXSj5fZCwa_KeFCDVQiZwj28MPOEL2km9KSSRVTMtjnwxmnUQSN4GGH1HXDhO0dhf4IAcIQk4=s120', 'tokenId': '8539', 'tokenName': 'The Winkybots #8539', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.059, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100295', 'collectionName': 'The Winkybots', 'collectionCode': 'thewinkybots', 'contractAddress': '0xeed560b1b0172baa6e137c27aa0a643326f360d1', 'collectionImage': 'https://lh3.googleusercontent.com/REOlkSWV9V1RaiR1bY8oaB_23Ji17rlXSj5fZCwa_KeFCDVQiZwj28MPOEL2km9KSSRVTMtjnwxmnUQSN4GGH1HXDhO0dhf4IAcIQk4=s120', 'tokenId': '6952', 'tokenName': 'The Winkybots #6952', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0644, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100295', 'collectionName': 'The Winkybots', 'collectionCode': 'thewinkybots', 'contractAddress': '0xeed560b1b0172baa6e137c27aa0a643326f360d1', 'collectionImage': 'https://lh3.googleusercontent.com/REOlkSWV9V1RaiR1bY8oaB_23Ji17rlXSj5fZCwa_KeFCDVQiZwj28MPOEL2km9KSSRVTMtjnwxmnUQSN4GGH1HXDhO0dhf4IAcIQk4=s120', 'tokenId': '8294', 'tokenName': 'The Winkybots #8294', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.05, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:05:33,209][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100295
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:33,546][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['The Winkybots #7881', 'The Winkybots #8539', 'The Winkybots #6952', 'The Winkybots #8294'],[0.059, 0.059, 0.0644, 0.05]
[2022-10-13 09:05:33,546][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['The Winkybots #7881', 'The Winkybots #8539', 'The Winkybots #6952', 'The Winkybots #8294'],[0.059, 0.059, 0.0644, 0.05]
[2022-10-13 09:05:33,560][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:33,561][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:33,562][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:33,562][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:33,563][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100296
}
[2022-10-13 09:05:33,563][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100296}
[2022-10-13 09:05:33,563][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100296
}
[2022-10-13 09:05:34,070][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:34,070][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100296
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:34,370][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:34,370][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:34,378][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:34,379][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:34,379][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:34,379][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:34,380][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100297
}
[2022-10-13 09:05:34,380][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100297}
[2022-10-13 09:05:34,380][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100297
}
[2022-10-13 09:05:34,829][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:34,829][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100297
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:35,133][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:35,134][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:35,155][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:35,158][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:35,159][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:35,159][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:35,160][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100298
}
[2022-10-13 09:05:35,160][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100298}
[2022-10-13 09:05:35,161][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100298
}
[2022-10-13 09:05:35,629][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:35,630][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100298
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:35,944][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:35,945][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:35,965][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:35,967][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:35,967][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:35,967][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:35,968][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100299
}
[2022-10-13 09:05:35,968][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100299}
[2022-10-13 09:05:35,968][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100299
}
[2022-10-13 09:05:36,443][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100299', 'collectionName': 'Tom Sachs: Rocket Factory - Mars Rocks', 'collectionCode': 'tom-sachs-mars-rocks', 'contractAddress': '0xedc227ad7fef4a2c6dbc2303a5732087314a4ce9', 'collectionImage': 'https://lh3.googleusercontent.com/ghfJZByjWPd3uLNObWtTFh5I1CReiQARoRjj0rzLnYA-HUAAjFFXQ580tnib1bub_PuHhx3O6asNQCZ4lzEPeedr-zrTWTqb1ysyZg=s120', 'tokenId': '5', 'tokenName': 'Tom Sachs: Rocket Factory - Mars Rocks', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0666, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:05:36,444][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100299
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:36,745][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Tom Sachs: Rocket Factory - Mars Rocks'],[0.0666]
[2022-10-13 09:05:36,746][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Tom Sachs: Rocket Factory - Mars Rocks'],[0.0666]
[2022-10-13 09:05:36,762][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:36,765][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:36,766][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:36,767][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:36,767][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100300
}
[2022-10-13 09:05:36,767][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100300}
[2022-10-13 09:05:36,768][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100300
}
[2022-10-13 09:05:37,253][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:37,253][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100300
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:37,553][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:37,553][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:37,568][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:37,570][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:37,572][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:37,573][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:37,574][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100301
}
[2022-10-13 09:05:37,575][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100301}
[2022-10-13 09:05:37,575][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100301
}
[2022-10-13 09:05:38,229][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '4626', 'tokenName': 'The Possessed #4626', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.122, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '7771', 'tokenName': 'The Possessed #7771', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.122, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '3349', 'tokenName': 'The Possessed #3349', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.063, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '2425', 'tokenName': 'The Possessed #2425', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.1, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '6323', 'tokenName': 'The Possessed #6323', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.069, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '1775', 'tokenName': 'The Possessed #1775', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.065, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '801', 'tokenName': 'The Possessed #801', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0689, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '8581', 'tokenName': 'The Possessed #8581', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0737, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '7731', 'tokenName': 'The Possessed #7731', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0646075, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '5803', 'tokenName': 'The Possessed #5803', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.099, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:05:38,229][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100301
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:38,532][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['The Possessed #4626', 'The Possessed #7771', 'The Possessed #3349', 'The Possessed #2425', 'The Possessed #6323', 'The Possessed #1775', 'The Possessed #801', 'The Possessed #8581', 'The Possessed #7731', 'The Possessed #5803'],[0.122, 0.122, 0.063, 0.1, 0.069, 0.065, 0.0689, 0.0737, 0.0646075, 0.099]
[2022-10-13 09:05:38,533][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['The Possessed #4626', 'The Possessed #7771', 'The Possessed #3349', 'The Possessed #2425', 'The Possessed #6323', 'The Possessed #1775', 'The Possessed #801', 'The Possessed #8581', 'The Possessed #7731', 'The Possessed #5803', 'The Possessed #4996', 'The Possessed #1014', 'The Possessed #9531', 'The Possessed #1293', 'The Possessed #8231', 'The Possessed #8737', 'The Possessed #9816', 'The Possessed #5253', 'The Possessed #3506', 'The Possessed #6412', 'The Possessed #6363', 'The Possessed #9406', 'The Possessed #9648', 'The Possessed #1359', 'The Possessed #7229', 'The Possessed #8342', 'The Possessed #1291', 'The Possessed #7379', 'The Possessed #907', 'The Possessed #8370'],[0.122, 0.122, 0.063, 0.1, 0.069, 0.065, 0.0689, 0.0737, 0.0646075, 0.099, 0.089, 0.07, 0.069, 0.064715, 0.16, 0.0621, 0.0645, 0.064715, 0.07, 0.0668, 0.086, 0.077, 0.18, 0.089, 0.062, 0.064715, 0.073, 0.1, 0.0675, 0.0707]
[2022-10-13 09:05:38,743][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:38,743][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:38,744][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:38,744][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:38,744][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100302
}
[2022-10-13 09:05:38,744][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100302}
[2022-10-13 09:05:38,746][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100302
}
[2022-10-13 09:05:39,225][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100302', 'collectionName': 'STAPLEVERSE - FEED CLAN', 'collectionCode': 'stapleverse-feed-clan', 'contractAddress': '0x8ee9a60cb5c0e7db414031856cb9e0f1f05988d1', 'collectionImage': 'https://lh3.googleusercontent.com/Ff2APegV52A29JmjHfAOPQibBlsIzCyUiHuUbR9-H1asq_TcyT2XcPpkbozTJDGCGWe_py20T23TLdImZO7w3BbAQvAt9q1R_VLFZA=s120', 'tokenId': '4084', 'tokenName': 'STAPLEVERSE - FEED CLAN #4084', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.036675, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100302', 'collectionName': 'STAPLEVERSE - FEED CLAN', 'collectionCode': 'stapleverse-feed-clan', 'contractAddress': '0x8ee9a60cb5c0e7db414031856cb9e0f1f05988d1', 'collectionImage': 'https://lh3.googleusercontent.com/Ff2APegV52A29JmjHfAOPQibBlsIzCyUiHuUbR9-H1asq_TcyT2XcPpkbozTJDGCGWe_py20T23TLdImZO7w3BbAQvAt9q1R_VLFZA=s120', 'tokenId': '1986', 'tokenName': 'STAPLEVERSE - FEED CLAN #1986', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.03670875, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100302', 'collectionName': 'STAPLEVERSE - FEED CLAN', 'collectionCode': 'stapleverse-feed-clan', 'contractAddress': '0x8ee9a60cb5c0e7db414031856cb9e0f1f05988d1', 'collectionImage': 'https://lh3.googleusercontent.com/Ff2APegV52A29JmjHfAOPQibBlsIzCyUiHuUbR9-H1asq_TcyT2XcPpkbozTJDGCGWe_py20T23TLdImZO7w3BbAQvAt9q1R_VLFZA=s120', 'tokenId': '8993', 'tokenName': 'STAPLEVERSE - FEED CLAN #8993', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.05, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100302', 'collectionName': 'STAPLEVERSE - FEED CLAN', 'collectionCode': 'stapleverse-feed-clan', 'contractAddress': '0x8ee9a60cb5c0e7db414031856cb9e0f1f05988d1', 'collectionImage': 'https://lh3.googleusercontent.com/Ff2APegV52A29JmjHfAOPQibBlsIzCyUiHuUbR9-H1asq_TcyT2XcPpkbozTJDGCGWe_py20T23TLdImZO7w3BbAQvAt9q1R_VLFZA=s120', 'tokenId': '8120', 'tokenName': 'STAPLEVERSE - FEED CLAN #8120', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0549, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100302', 'collectionName': 'STAPLEVERSE - FEED CLAN', 'collectionCode': 'stapleverse-feed-clan', 'contractAddress': '0x8ee9a60cb5c0e7db414031856cb9e0f1f05988d1', 'collectionImage': 'https://lh3.googleusercontent.com/Ff2APegV52A29JmjHfAOPQibBlsIzCyUiHuUbR9-H1asq_TcyT2XcPpkbozTJDGCGWe_py20T23TLdImZO7w3BbAQvAt9q1R_VLFZA=s120', 'tokenId': '5339', 'tokenName': 'STAPLEVERSE - FEED CLAN #5339', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.053, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100302', 'collectionName': 'STAPLEVERSE - FEED CLAN', 'collectionCode': 'stapleverse-feed-clan', 'contractAddress': '0x8ee9a60cb5c0e7db414031856cb9e0f1f05988d1', 'collectionImage': 'https://lh3.googleusercontent.com/Ff2APegV52A29JmjHfAOPQibBlsIzCyUiHuUbR9-H1asq_TcyT2XcPpkbozTJDGCGWe_py20T23TLdImZO7w3BbAQvAt9q1R_VLFZA=s120', 'tokenId': '3580', 'tokenName': 'STAPLEVERSE - FEED CLAN #3580', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.03634875, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100302', 'collectionName': 'STAPLEVERSE - FEED CLAN', 'collectionCode': 'stapleverse-feed-clan', 'contractAddress': '0x8ee9a60cb5c0e7db414031856cb9e0f1f05988d1', 'collectionImage': 'https://lh3.googleusercontent.com/Ff2APegV52A29JmjHfAOPQibBlsIzCyUiHuUbR9-H1asq_TcyT2XcPpkbozTJDGCGWe_py20T23TLdImZO7w3BbAQvAt9q1R_VLFZA=s120', 'tokenId': '7111', 'tokenName': 'STAPLEVERSE - FEED CLAN #7111', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0351, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100302', 'collectionName': 'STAPLEVERSE - FEED CLAN', 'collectionCode': 'stapleverse-feed-clan', 'contractAddress': '0x8ee9a60cb5c0e7db414031856cb9e0f1f05988d1', 'collectionImage': 'https://lh3.googleusercontent.com/Ff2APegV52A29JmjHfAOPQibBlsIzCyUiHuUbR9-H1asq_TcyT2XcPpkbozTJDGCGWe_py20T23TLdImZO7w3BbAQvAt9q1R_VLFZA=s120', 'tokenId': '4052', 'tokenName': 'STAPLEVERSE - FEED CLAN #4052', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.12, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100302', 'collectionName': 'STAPLEVERSE - FEED CLAN', 'collectionCode': 'stapleverse-feed-clan', 'contractAddress': '0x8ee9a60cb5c0e7db414031856cb9e0f1f05988d1', 'collectionImage': 'https://lh3.googleusercontent.com/Ff2APegV52A29JmjHfAOPQibBlsIzCyUiHuUbR9-H1asq_TcyT2XcPpkbozTJDGCGWe_py20T23TLdImZO7w3BbAQvAt9q1R_VLFZA=s120', 'tokenId': '9033', 'tokenName': 'STAPLEVERSE - FEED CLAN #9033', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.055, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100302', 'collectionName': 'STAPLEVERSE - FEED CLAN', 'collectionCode': 'stapleverse-feed-clan', 'contractAddress': '0x8ee9a60cb5c0e7db414031856cb9e0f1f05988d1', 'collectionImage': 'https://lh3.googleusercontent.com/Ff2APegV52A29JmjHfAOPQibBlsIzCyUiHuUbR9-H1asq_TcyT2XcPpkbozTJDGCGWe_py20T23TLdImZO7w3BbAQvAt9q1R_VLFZA=s120', 'tokenId': '1882', 'tokenName': 'STAPLEVERSE - FEED CLAN #1882', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.055, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:05:39,225][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100302
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:39,538][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['STAPLEVERSE - FEED CLAN #4084', 'STAPLEVERSE - FEED CLAN #1986', 'STAPLEVERSE - FEED CLAN #8993', 'STAPLEVERSE - FEED CLAN #8120', 'STAPLEVERSE - FEED CLAN #5339', 'STAPLEVERSE - FEED CLAN #3580', 'STAPLEVERSE - FEED CLAN #7111', 'STAPLEVERSE - FEED CLAN #4052', 'STAPLEVERSE - FEED CLAN #9033', 'STAPLEVERSE - FEED CLAN #1882'],[0.036675, 0.03670875, 0.05, 0.0549, 0.053, 0.03634875, 0.0351, 0.12, 0.055, 0.055]
[2022-10-13 09:05:39,538][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['STAPLEVERSE - FEED CLAN #4084', 'STAPLEVERSE - FEED CLAN #1986', 'STAPLEVERSE - FEED CLAN #8993', 'STAPLEVERSE - FEED CLAN #8120', 'STAPLEVERSE - FEED CLAN #5339', 'STAPLEVERSE - FEED CLAN #3580', 'STAPLEVERSE - FEED CLAN #7111', 'STAPLEVERSE - FEED CLAN #4052', 'STAPLEVERSE - FEED CLAN #9033', 'STAPLEVERSE - FEED CLAN #1882', 'STAPLEVERSE - FEED CLAN #7904', 'STAPLEVERSE - FEED CLAN #7002', 'STAPLEVERSE - FEED CLAN #4036', 'STAPLEVERSE - FEED CLAN #7683', 'STAPLEVERSE - FEED CLAN #2271', 'STAPLEVERSE - FEED CLAN #1479', 'STAPLEVERSE - FEED CLAN #1212', 'STAPLEVERSE - FEED CLAN #247', 'STAPLEVERSE - FEED CLAN #7886', 'STAPLEVERSE - FEED CLAN #8205', 'STAPLEVERSE - FEED CLAN #5715'],[0.036675, 0.03670875, 0.05, 0.0549, 0.053, 0.03634875, 0.0351, 0.12, 0.055, 0.055, 0.05, 0.05, 0.069, 0.06, 0.12, 0.05, 0.05, 0.0489, 0.0499, 0.098, 0.049]
[2022-10-13 09:05:39,571][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:39,572][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:39,572][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:39,572][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:39,572][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100304
}
[2022-10-13 09:05:39,573][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100304}
[2022-10-13 09:05:39,573][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100304
}
[2022-10-13 09:05:40,021][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100304', 'collectionName': 'The Weirdo Ghost Gang', 'collectionCode': 'the-weirdo-ghost-gang', 'contractAddress': '0x9401518f4ebba857baa879d9f76e1cc8b31ed197', 'collectionImage': 'https://lh3.googleusercontent.com/LpZeqz7YqWALr_i4bbMyP4RzXXoprZdO2e-U8W8uqPvk7V11NMeaMvzTjNoEKZL1lagcLjPSpEm7xnm0SXKyPmBEVdwJi6ZxNQBMIA=s168', 'tokenId': '2548', 'tokenName': 'The Weirdo Ghost Gang #2548', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.478, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100304', 'collectionName': 'The Weirdo Ghost Gang', 'collectionCode': 'the-weirdo-ghost-gang', 'contractAddress': '0x9401518f4ebba857baa879d9f76e1cc8b31ed197', 'collectionImage': 'https://lh3.googleusercontent.com/LpZeqz7YqWALr_i4bbMyP4RzXXoprZdO2e-U8W8uqPvk7V11NMeaMvzTjNoEKZL1lagcLjPSpEm7xnm0SXKyPmBEVdwJi6ZxNQBMIA=s168', 'tokenId': '1722', 'tokenName': 'The Weirdo Ghost Gang #1722', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.151575, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100304', 'collectionName': 'The Weirdo Ghost Gang', 'collectionCode': 'the-weirdo-ghost-gang', 'contractAddress': '0x9401518f4ebba857baa879d9f76e1cc8b31ed197', 'collectionImage': 'https://lh3.googleusercontent.com/LpZeqz7YqWALr_i4bbMyP4RzXXoprZdO2e-U8W8uqPvk7V11NMeaMvzTjNoEKZL1lagcLjPSpEm7xnm0SXKyPmBEVdwJi6ZxNQBMIA=s168', 'tokenId': '1245', 'tokenName': 'The Weirdo Ghost Gang #1245', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.1799, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100304', 'collectionName': 'The Weirdo Ghost Gang', 'collectionCode': 'the-weirdo-ghost-gang', 'contractAddress': '0x9401518f4ebba857baa879d9f76e1cc8b31ed197', 'collectionImage': 'https://lh3.googleusercontent.com/LpZeqz7YqWALr_i4bbMyP4RzXXoprZdO2e-U8W8uqPvk7V11NMeaMvzTjNoEKZL1lagcLjPSpEm7xnm0SXKyPmBEVdwJi6ZxNQBMIA=s168', 'tokenId': '4206', 'tokenName': 'The Weirdo Ghost Gang #4206', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.1799, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100304', 'collectionName': 'The Weirdo Ghost Gang', 'collectionCode': 'the-weirdo-ghost-gang', 'contractAddress': '0x9401518f4ebba857baa879d9f76e1cc8b31ed197', 'collectionImage': 'https://lh3.googleusercontent.com/LpZeqz7YqWALr_i4bbMyP4RzXXoprZdO2e-U8W8uqPvk7V11NMeaMvzTjNoEKZL1lagcLjPSpEm7xnm0SXKyPmBEVdwJi6ZxNQBMIA=s168', 'tokenId': '3339', 'tokenName': 'The Weirdo Ghost Gang #3339', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.008, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100304', 'collectionName': 'The Weirdo Ghost Gang', 'collectionCode': 'the-weirdo-ghost-gang', 'contractAddress': '0x9401518f4ebba857baa879d9f76e1cc8b31ed197', 'collectionImage': 'https://lh3.googleusercontent.com/LpZeqz7YqWALr_i4bbMyP4RzXXoprZdO2e-U8W8uqPvk7V11NMeaMvzTjNoEKZL1lagcLjPSpEm7xnm0SXKyPmBEVdwJi6ZxNQBMIA=s168', 'tokenId': '5260', 'tokenName': 'The Weirdo Ghost Gang #5260', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.36, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:05:40,022][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100304
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:40,324][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['The Weirdo Ghost Gang #2548', 'The Weirdo Ghost Gang #1722', 'The Weirdo Ghost Gang #1245', 'The Weirdo Ghost Gang #4206', 'The Weirdo Ghost Gang #3339', 'The Weirdo Ghost Gang #5260'],[0.478, 0.151575, 0.1799, 0.1799, 0.008, 0.36]
[2022-10-13 09:05:40,324][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['The Weirdo Ghost Gang #2548', 'The Weirdo Ghost Gang #1722', 'The Weirdo Ghost Gang #1245', 'The Weirdo Ghost Gang #4206', 'The Weirdo Ghost Gang #3339', 'The Weirdo Ghost Gang #5260'],[0.478, 0.151575, 0.1799, 0.1799, 0.008, 0.36]
[2022-10-13 09:05:40,339][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:40,340][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:40,341][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:40,341][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:40,341][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100305
}
[2022-10-13 09:05:40,341][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100305}
[2022-10-13 09:05:40,341][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100305
}
[2022-10-13 09:05:40,812][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100305', 'collectionName': 'Sipherian Flash', 'collectionCode': 'sipherianflash', 'contractAddress': '0x09e0df4ae51111ca27d6b85708cfb3f1f7cae982', 'collectionImage': 'https://lh3.googleusercontent.com/05CzjTR4KwoX_qTY_U68CegfrCVTAYMmY3txcaauGpjJNZBac2-6hFMQtfcnMIx7g1B3BhBqWmta_mzNyunLLtDygyrW0U6n4nhc=s120', 'tokenId': '3310', 'tokenName': 'Sipherian Flash #3310', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.05246, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:05:40,813][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100305
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:41,114][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Sipherian Flash #3310'],[0.05246]
[2022-10-13 09:05:41,114][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Sipherian Flash #3310'],[0.05246]
[2022-10-13 09:05:41,133][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:41,136][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:41,137][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:41,138][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:41,138][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100306
}
[2022-10-13 09:05:41,139][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100306}
[2022-10-13 09:05:41,139][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100306
}
[2022-10-13 09:05:41,578][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:41,579][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100306
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:41,881][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:41,882][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:41,899][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:41,901][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:41,902][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:41,902][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:41,903][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100307
}
[2022-10-13 09:05:41,904][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100307}
[2022-10-13 09:05:41,904][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100307
}
[2022-10-13 09:05:42,380][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:42,380][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100307
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:42,681][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:42,681][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:42,688][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:42,690][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:42,690][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:42,691][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:42,691][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100308
}
[2022-10-13 09:05:42,691][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100308}
[2022-10-13 09:05:42,691][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100308
}
[2022-10-13 09:05:43,176][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:43,176][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100308
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:43,473][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:43,474][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:43,493][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:43,496][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:43,497][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:43,498][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:43,498][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100309
}
[2022-10-13 09:05:43,499][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100309}
[2022-10-13 09:05:43,499][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100309
}
[2022-10-13 09:05:43,971][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:43,973][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100309
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:44,280][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:44,281][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:44,299][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:44,303][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:44,303][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:44,304][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:44,304][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100310
}
[2022-10-13 09:05:44,305][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100310}
[2022-10-13 09:05:44,305][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100310
}
[2022-10-13 09:05:44,820][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100310', 'collectionName': 'Women Tribe Collection', 'collectionCode': 'official-women-tribe', 'contractAddress': '0x916fb29aa1a560c4540401b30c8199611d3a1809', 'collectionImage': 'https://lh3.googleusercontent.com/2LhfMy_lvayjRds1DtRGNbJUNSUFderN5QwuKs7AQ5YkyUpbxPrBHXg6b_YxBw3sExI9aD9s5F1KRB_ZrubmOcLamAMiXohzz67CQw=s120', 'tokenId': '7698', 'tokenName': 'Women Tribe Collection #7698', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0245, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100310', 'collectionName': 'Women Tribe Collection', 'collectionCode': 'official-women-tribe', 'contractAddress': '0x916fb29aa1a560c4540401b30c8199611d3a1809', 'collectionImage': 'https://lh3.googleusercontent.com/2LhfMy_lvayjRds1DtRGNbJUNSUFderN5QwuKs7AQ5YkyUpbxPrBHXg6b_YxBw3sExI9aD9s5F1KRB_ZrubmOcLamAMiXohzz67CQw=s120', 'tokenId': '9097', 'tokenName': 'Women Tribe Collection #9097', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.019, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100310', 'collectionName': 'Women Tribe Collection', 'collectionCode': 'official-women-tribe', 'contractAddress': '0x916fb29aa1a560c4540401b30c8199611d3a1809', 'collectionImage': 'https://lh3.googleusercontent.com/2LhfMy_lvayjRds1DtRGNbJUNSUFderN5QwuKs7AQ5YkyUpbxPrBHXg6b_YxBw3sExI9aD9s5F1KRB_ZrubmOcLamAMiXohzz67CQw=s120', 'tokenId': '573', 'tokenName': 'Women Tribe Collection #573', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0244, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100310', 'collectionName': 'Women Tribe Collection', 'collectionCode': 'official-women-tribe', 'contractAddress': '0x916fb29aa1a560c4540401b30c8199611d3a1809', 'collectionImage': 'https://lh3.googleusercontent.com/2LhfMy_lvayjRds1DtRGNbJUNSUFderN5QwuKs7AQ5YkyUpbxPrBHXg6b_YxBw3sExI9aD9s5F1KRB_ZrubmOcLamAMiXohzz67CQw=s120', 'tokenId': '7560', 'tokenName': 'Women Tribe Collection #7560', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.024, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100310', 'collectionName': 'Women Tribe Collection', 'collectionCode': 'official-women-tribe', 'contractAddress': '0x916fb29aa1a560c4540401b30c8199611d3a1809', 'collectionImage': 'https://lh3.googleusercontent.com/2LhfMy_lvayjRds1DtRGNbJUNSUFderN5QwuKs7AQ5YkyUpbxPrBHXg6b_YxBw3sExI9aD9s5F1KRB_ZrubmOcLamAMiXohzz67CQw=s120', 'tokenId': '9550', 'tokenName': 'Women Tribe Collection #9550', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0129375, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100310', 'collectionName': 'Women Tribe Collection', 'collectionCode': 'official-women-tribe', 'contractAddress': '0x916fb29aa1a560c4540401b30c8199611d3a1809', 'collectionImage': 'https://lh3.googleusercontent.com/2LhfMy_lvayjRds1DtRGNbJUNSUFderN5QwuKs7AQ5YkyUpbxPrBHXg6b_YxBw3sExI9aD9s5F1KRB_ZrubmOcLamAMiXohzz67CQw=s120', 'tokenId': '1428', 'tokenName': 'Women Tribe Collection #1428', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.025, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100310', 'collectionName': 'Women Tribe Collection', 'collectionCode': 'official-women-tribe', 'contractAddress': '0x916fb29aa1a560c4540401b30c8199611d3a1809', 'collectionImage': 'https://lh3.googleusercontent.com/2LhfMy_lvayjRds1DtRGNbJUNSUFderN5QwuKs7AQ5YkyUpbxPrBHXg6b_YxBw3sExI9aD9s5F1KRB_ZrubmOcLamAMiXohzz67CQw=s120', 'tokenId': '1642', 'tokenName': 'Women Tribe Collection #1642', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.019, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100310', 'collectionName': 'Women Tribe Collection', 'collectionCode': 'official-women-tribe', 'contractAddress': '0x916fb29aa1a560c4540401b30c8199611d3a1809', 'collectionImage': 'https://lh3.googleusercontent.com/2LhfMy_lvayjRds1DtRGNbJUNSUFderN5QwuKs7AQ5YkyUpbxPrBHXg6b_YxBw3sExI9aD9s5F1KRB_ZrubmOcLamAMiXohzz67CQw=s120', 'tokenId': '3251', 'tokenName': 'Women Tribe Collection #3251', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.02, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100310', 'collectionName': 'Women Tribe Collection', 'collectionCode': 'official-women-tribe', 'contractAddress': '0x916fb29aa1a560c4540401b30c8199611d3a1809', 'collectionImage': 'https://lh3.googleusercontent.com/2LhfMy_lvayjRds1DtRGNbJUNSUFderN5QwuKs7AQ5YkyUpbxPrBHXg6b_YxBw3sExI9aD9s5F1KRB_ZrubmOcLamAMiXohzz67CQw=s120', 'tokenId': '4972', 'tokenName': 'Women Tribe Collection #4972', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.02, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100310', 'collectionName': 'Women Tribe Collection', 'collectionCode': 'official-women-tribe', 'contractAddress': '0x916fb29aa1a560c4540401b30c8199611d3a1809', 'collectionImage': 'https://lh3.googleusercontent.com/2LhfMy_lvayjRds1DtRGNbJUNSUFderN5QwuKs7AQ5YkyUpbxPrBHXg6b_YxBw3sExI9aD9s5F1KRB_ZrubmOcLamAMiXohzz67CQw=s120', 'tokenId': '6141', 'tokenName': 'Women Tribe Collection #6141', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.02, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:05:44,821][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100310
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:45,120][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Women Tribe Collection #7698', 'Women Tribe Collection #9097', 'Women Tribe Collection #573', 'Women Tribe Collection #7560', 'Women Tribe Collection #9550', 'Women Tribe Collection #1428', 'Women Tribe Collection #1642', 'Women Tribe Collection #3251', 'Women Tribe Collection #4972', 'Women Tribe Collection #6141'],[0.0245, 0.019, 0.0244, 0.024, 0.0129375, 0.025, 0.019, 0.02, 0.02, 0.02]
[2022-10-13 09:05:45,121][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Women Tribe Collection #7698', 'Women Tribe Collection #9097', 'Women Tribe Collection #573', 'Women Tribe Collection #7560', 'Women Tribe Collection #9550', 'Women Tribe Collection #1428', 'Women Tribe Collection #1642', 'Women Tribe Collection #3251', 'Women Tribe Collection #4972', 'Women Tribe Collection #6141'],[0.0245, 0.019, 0.0244, 0.024, 0.0129375, 0.025, 0.019, 0.02, 0.02, 0.02]
[2022-10-13 09:05:45,147][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:45,150][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:45,151][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:45,151][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:45,152][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100311
}
[2022-10-13 09:05:45,152][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100311}
[2022-10-13 09:05:45,152][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100311
}
[2022-10-13 09:05:45,653][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:45,654][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100311
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:45,978][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:45,980][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:45,997][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:46,001][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:46,002][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:46,003][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:46,003][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100312
}
[2022-10-13 09:05:46,004][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100312}
[2022-10-13 09:05:46,005][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100312
}
[2022-10-13 09:05:46,497][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:46,498][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100312
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:46,812][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:46,812][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:46,819][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:46,820][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:46,821][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:46,821][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:46,821][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100313
}
[2022-10-13 09:05:46,822][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100313}
[2022-10-13 09:05:46,822][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100313
}
[2022-10-13 09:05:47,314][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:47,315][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100313
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:47,673][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:47,674][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:47,692][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:47,695][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:47,696][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:47,697][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:47,698][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100314
}
[2022-10-13 09:05:47,698][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100314}
[2022-10-13 09:05:47,699][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100314
}
[2022-10-13 09:05:48,267][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:48,267][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100314
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:48,604][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:48,605][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:48,619][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:48,622][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:48,623][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:48,623][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:48,623][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100315
}
[2022-10-13 09:05:48,624][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100315}
[2022-10-13 09:05:48,624][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100315
}
[2022-10-13 09:05:49,128][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:49,128][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100315
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:49,455][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:49,456][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:49,475][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:49,478][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:49,479][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:49,480][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:49,480][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100316
}
[2022-10-13 09:05:49,481][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100316}
[2022-10-13 09:05:49,481][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100316
}
[2022-10-13 09:05:53,316][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': '781080358769655810', 'collectionUuid': '100316', 'collectionName': 'Enigma Economy NFT', 'collectionCode': 'theenigma', 'contractAddress': '0x5298c6d5ac0f2964bbb27f496a8193ce78e8a8e6', 'collectionImage': 'https://lh3.googleusercontent.com/zlyn6yPS8bynck84GuZfaDPLwU3H5kDa34nFIx7o2FsIZd1YxS1_8i-gH3EamvC2hE-mRRjrZ78NXvXKH2pRSRumzWTMPuw8HbTl7g=s120', 'tokenId': '5995', 'tokenName': 'Enigma Economy NFT #5995', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.4, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': '781148724670758913', 'collectionUuid': '100316', 'collectionName': 'Enigma Economy NFT', 'collectionCode': 'theenigma', 'contractAddress': '0x5298c6d5ac0f2964bbb27f496a8193ce78e8a8e6', 'collectionImage': 'https://lh3.googleusercontent.com/zlyn6yPS8bynck84GuZfaDPLwU3H5kDa34nFIx7o2FsIZd1YxS1_8i-gH3EamvC2hE-mRRjrZ78NXvXKH2pRSRumzWTMPuw8HbTl7g=s120', 'tokenId': '1023', 'tokenName': 'Enigma Economy NFT #1023', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.168, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': '781141228354797568', 'collectionUuid': '100316', 'collectionName': 'Enigma Economy NFT', 'collectionCode': 'theenigma', 'contractAddress': '0x5298c6d5ac0f2964bbb27f496a8193ce78e8a8e6', 'collectionImage': 'https://lh3.googleusercontent.com/zlyn6yPS8bynck84GuZfaDPLwU3H5kDa34nFIx7o2FsIZd1YxS1_8i-gH3EamvC2hE-mRRjrZ78NXvXKH2pRSRumzWTMPuw8HbTl7g=s120', 'tokenId': '110', 'tokenName': 'Enigma Economy NFT #110', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.169, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': '781081132232867841', 'collectionUuid': '100316', 'collectionName': 'Enigma Economy NFT', 'collectionCode': 'theenigma', 'contractAddress': '0x5298c6d5ac0f2964bbb27f496a8193ce78e8a8e6', 'collectionImage': 'https://lh3.googleusercontent.com/zlyn6yPS8bynck84GuZfaDPLwU3H5kDa34nFIx7o2FsIZd1YxS1_8i-gH3EamvC2hE-mRRjrZ78NXvXKH2pRSRumzWTMPuw8HbTl7g=s120', 'tokenId': '7591', 'tokenName': 'Enigma Economy NFT #7591', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 1, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': '781080287978192896', 'collectionUuid': '100316', 'collectionName': 'Enigma Economy NFT', 'collectionCode': 'theenigma', 'contractAddress': '0x5298c6d5ac0f2964bbb27f496a8193ce78e8a8e6', 'collectionImage': 'https://lh3.googleusercontent.com/zlyn6yPS8bynck84GuZfaDPLwU3H5kDa34nFIx7o2FsIZd1YxS1_8i-gH3EamvC2hE-mRRjrZ78NXvXKH2pRSRumzWTMPuw8HbTl7g=s120', 'tokenId': '4148', 'tokenName': 'Enigma Economy NFT #4148', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.36, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': '781141470462607361', 'collectionUuid': '100316', 'collectionName': 'Enigma Economy NFT', 'collectionCode': 'theenigma', 'contractAddress': '0x5298c6d5ac0f2964bbb27f496a8193ce78e8a8e6', 'collectionImage': 'https://lh3.googleusercontent.com/zlyn6yPS8bynck84GuZfaDPLwU3H5kDa34nFIx7o2FsIZd1YxS1_8i-gH3EamvC2hE-mRRjrZ78NXvXKH2pRSRumzWTMPuw8HbTl7g=s120', 'tokenId': '509', 'tokenName': 'Enigma Economy NFT #509', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.165, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': '781080207774711809', 'collectionUuid': '100316', 'collectionName': 'Enigma Economy NFT', 'collectionCode': 'theenigma', 'contractAddress': '0x5298c6d5ac0f2964bbb27f496a8193ce78e8a8e6', 'collectionImage': 'https://lh3.googleusercontent.com/zlyn6yPS8bynck84GuZfaDPLwU3H5kDa34nFIx7o2FsIZd1YxS1_8i-gH3EamvC2hE-mRRjrZ78NXvXKH2pRSRumzWTMPuw8HbTl7g=s120', 'tokenId': '7495', 'tokenName': 'Enigma Economy NFT #7495', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.155, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': '781080476264693761', 'collectionUuid': '100316', 'collectionName': 'Enigma Economy NFT', 'collectionCode': 'theenigma', 'contractAddress': '0x5298c6d5ac0f2964bbb27f496a8193ce78e8a8e6', 'collectionImage': 'https://lh3.googleusercontent.com/zlyn6yPS8bynck84GuZfaDPLwU3H5kDa34nFIx7o2FsIZd1YxS1_8i-gH3EamvC2hE-mRRjrZ78NXvXKH2pRSRumzWTMPuw8HbTl7g=s120', 'tokenId': '6071', 'tokenName': 'Enigma Economy NFT #6071', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.37, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': '781142321994399745', 'collectionUuid': '100316', 'collectionName': 'Enigma Economy NFT', 'collectionCode': 'theenigma', 'contractAddress': '0x5298c6d5ac0f2964bbb27f496a8193ce78e8a8e6', 'collectionImage': 'https://lh3.googleusercontent.com/zlyn6yPS8bynck84GuZfaDPLwU3H5kDa34nFIx7o2FsIZd1YxS1_8i-gH3EamvC2hE-mRRjrZ78NXvXKH2pRSRumzWTMPuw8HbTl7g=s120', 'tokenId': '7922', 'tokenName': 'Enigma Economy NFT #7922', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.22, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': '781081016717541377', 'collectionUuid': '100316', 'collectionName': 'Enigma Economy NFT', 'collectionCode': 'theenigma', 'contractAddress': '0x5298c6d5ac0f2964bbb27f496a8193ce78e8a8e6', 'collectionImage': 'https://lh3.googleusercontent.com/zlyn6yPS8bynck84GuZfaDPLwU3H5kDa34nFIx7o2FsIZd1YxS1_8i-gH3EamvC2hE-mRRjrZ78NXvXKH2pRSRumzWTMPuw8HbTl7g=s120', 'tokenId': '7206', 'tokenName': 'Enigma Economy NFT #7206', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.45, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:05:53,317][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100316
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:53,706][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Enigma Economy NFT #5995', 'Enigma Economy NFT #1023', 'Enigma Economy NFT #110', 'Enigma Economy NFT #7591', 'Enigma Economy NFT #4148', 'Enigma Economy NFT #509', 'Enigma Economy NFT #7495', 'Enigma Economy NFT #6071', 'Enigma Economy NFT #7922', 'Enigma Economy NFT #7206'],[0.4, 0.168, 0.169, 1.0, 0.36, 0.165, 0.155, 0.37, 0.22, 0.45]
[2022-10-13 09:05:53,707][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Enigma Economy NFT #5995', 'Enigma Economy NFT #1023', 'Enigma Economy NFT #110', 'Enigma Economy NFT #7591', 'Enigma Economy NFT #4148', 'Enigma Economy NFT #509', 'Enigma Economy NFT #7495', 'Enigma Economy NFT #6071', 'Enigma Economy NFT #7922', 'Enigma Economy NFT #7206', 'Enigma Economy NFT #5620', 'Enigma Economy NFT #1809', 'Enigma Economy NFT #7673', 'Enigma Economy NFT #4420', 'Enigma Economy NFT #7909', 'Enigma Economy NFT #7570', 'Enigma Economy NFT #2437', 'Enigma Economy NFT #3852', 'Enigma Economy NFT #6327', 'Enigma Economy NFT #4824', 'Enigma Economy NFT #4071', 'Enigma Economy NFT #1945', 'Enigma Economy NFT #3896', 'Enigma Economy NFT #602', 'Enigma Economy NFT #1149', 'Enigma Economy NFT #7285', 'Enigma Economy NFT #6357', 'Enigma Economy NFT #6885', 'Enigma Economy NFT #99', 'Enigma Economy NFT #254'],[0.4, 0.168, 0.169, 1.0, 0.36, 0.165, 0.155, 0.37, 0.22, 0.45, 0.499, 0.499, 0.45, 0.32, 0.45, 0.46, 0.369, 0.168, 0.164, 0.16, 0.31, 0.295, 0.1639, 0.161, 0.29, 0.265, 0.19, 0.26, 0.37, 0.16]
[2022-10-13 09:05:53,746][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:53,747][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:53,747][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:53,747][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:53,748][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100317
}
[2022-10-13 09:05:53,748][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100317}
[2022-10-13 09:05:53,748][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100317
}
[2022-10-13 09:05:54,229][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100317', 'collectionName': 'OG:Crystals', 'collectionCode': 'og-crystals', 'contractAddress': '0x368ad4a7a7f49b8fa8f34476be0fc4d04ce622f5', 'collectionImage': 'https://static.nftgo.io/asset/1635752317689.jpeg', 'tokenId': '2326', 'tokenName': 'OG:Crystals #2326', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.1875, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100317', 'collectionName': 'OG:Crystals', 'collectionCode': 'og-crystals', 'contractAddress': '0x368ad4a7a7f49b8fa8f34476be0fc4d04ce622f5', 'collectionImage': 'https://static.nftgo.io/asset/1635752317689.jpeg', 'tokenId': '1687', 'tokenName': 'OG:Crystals #1687', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.068, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100317', 'collectionName': 'OG:Crystals', 'collectionCode': 'og-crystals', 'contractAddress': '0x368ad4a7a7f49b8fa8f34476be0fc4d04ce622f5', 'collectionImage': 'https://static.nftgo.io/asset/1635752317689.jpeg', 'tokenId': '633', 'tokenName': 'OG:Crystals #633', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.05112, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100317', 'collectionName': 'OG:Crystals', 'collectionCode': 'og-crystals', 'contractAddress': '0x368ad4a7a7f49b8fa8f34476be0fc4d04ce622f5', 'collectionImage': 'https://static.nftgo.io/asset/1635752317689.jpeg', 'tokenId': '4477', 'tokenName': 'OG:Crystals #4477', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.059852999999999996, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100317', 'collectionName': 'OG:Crystals', 'collectionCode': 'og-crystals', 'contractAddress': '0x368ad4a7a7f49b8fa8f34476be0fc4d04ce622f5', 'collectionImage': 'https://static.nftgo.io/asset/1635752317689.jpeg', 'tokenId': '4478', 'tokenName': 'OG:Crystals #4478', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.06006600000000001, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100317', 'collectionName': 'OG:Crystals', 'collectionCode': 'og-crystals', 'contractAddress': '0x368ad4a7a7f49b8fa8f34476be0fc4d04ce622f5', 'collectionImage': 'https://static.nftgo.io/asset/1635752317689.jpeg', 'tokenId': '4480', 'tokenName': 'OG:Crystals #4480', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0599595, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100317', 'collectionName': 'OG:Crystals', 'collectionCode': 'og-crystals', 'contractAddress': '0x368ad4a7a7f49b8fa8f34476be0fc4d04ce622f5', 'collectionImage': 'https://static.nftgo.io/asset/1635752317689.jpeg', 'tokenId': '8280', 'tokenName': 'OG:Crystals #8280', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0879, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:05:54,230][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100317
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:54,548][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['OG:Crystals #2326', 'OG:Crystals #1687', 'OG:Crystals #633', 'OG:Crystals #4477', 'OG:Crystals #4478', 'OG:Crystals #4480', 'OG:Crystals #8280'],[0.1875, 0.068, 0.05112, 0.059852999999999996, 0.06006600000000001, 0.0599595, 0.0879]
[2022-10-13 09:05:54,548][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['OG:Crystals #2326', 'OG:Crystals #1687', 'OG:Crystals #633', 'OG:Crystals #4477', 'OG:Crystals #4478', 'OG:Crystals #4480', 'OG:Crystals #8280'],[0.1875, 0.068, 0.05112, 0.059853, 0.06006600000000001, 0.0599595, 0.0879]
[2022-10-13 09:05:54,572][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:54,573][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:54,573][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:54,573][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:54,573][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100318
}
[2022-10-13 09:05:54,574][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100318}
[2022-10-13 09:05:54,574][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100318
}
[2022-10-13 09:05:55,040][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:55,040][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100318
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:55,382][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:55,383][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:55,399][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:55,402][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:55,403][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:55,403][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:55,404][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100319
}
[2022-10-13 09:05:55,404][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100319}
[2022-10-13 09:05:55,405][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100319
}
[2022-10-13 09:05:55,861][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:55,862][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100319
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:56,155][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:56,156][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:56,166][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:56,168][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:56,169][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:56,169][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:56,169][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100320
}
[2022-10-13 09:05:56,170][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100320}
[2022-10-13 09:05:56,170][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100320
}
[2022-10-13 09:05:56,623][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:56,624][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100320
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:56,919][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:56,919][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:56,939][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:56,941][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:56,942][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:56,943][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:56,943][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100321
}
[2022-10-13 09:05:56,944][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100321}
[2022-10-13 09:05:56,945][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100321
}
[2022-10-13 09:05:57,463][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100321', 'collectionName': 'The Long Lost', 'collectionCode': 'the-long-lost', 'contractAddress': '0x1347a97789cd3aa0b11433e8117f55ab640a0451', 'collectionImage': 'https://lh3.googleusercontent.com/10FvWeiHnUJi3OeAkHsyQIk_Eb__3MXRHrXlv9T5_pgnlxzA-wP10OrQNXsWTmbtIEL83yKJDf1g4u0VD1JR2H31RejbS-dzPRcYhWw=s120', 'tokenId': '4058', 'tokenName': 'The Long Lost #4058', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.05, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100321', 'collectionName': 'The Long Lost', 'collectionCode': 'the-long-lost', 'contractAddress': '0x1347a97789cd3aa0b11433e8117f55ab640a0451', 'collectionImage': 'https://lh3.googleusercontent.com/10FvWeiHnUJi3OeAkHsyQIk_Eb__3MXRHrXlv9T5_pgnlxzA-wP10OrQNXsWTmbtIEL83yKJDf1g4u0VD1JR2H31RejbS-dzPRcYhWw=s120', 'tokenId': '1548', 'tokenName': 'The Long Lost #1548', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0219, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100321', 'collectionName': 'The Long Lost', 'collectionCode': 'the-long-lost', 'contractAddress': '0x1347a97789cd3aa0b11433e8117f55ab640a0451', 'collectionImage': 'https://lh3.googleusercontent.com/10FvWeiHnUJi3OeAkHsyQIk_Eb__3MXRHrXlv9T5_pgnlxzA-wP10OrQNXsWTmbtIEL83yKJDf1g4u0VD1JR2H31RejbS-dzPRcYhWw=s120', 'tokenId': '7590', 'tokenName': 'The Long Lost #7590', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.03, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100321', 'collectionName': 'The Long Lost', 'collectionCode': 'the-long-lost', 'contractAddress': '0x1347a97789cd3aa0b11433e8117f55ab640a0451', 'collectionImage': 'https://lh3.googleusercontent.com/10FvWeiHnUJi3OeAkHsyQIk_Eb__3MXRHrXlv9T5_pgnlxzA-wP10OrQNXsWTmbtIEL83yKJDf1g4u0VD1JR2H31RejbS-dzPRcYhWw=s120', 'tokenId': '527', 'tokenName': 'The Long Lost #527', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0257, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100321', 'collectionName': 'The Long Lost', 'collectionCode': 'the-long-lost', 'contractAddress': '0x1347a97789cd3aa0b11433e8117f55ab640a0451', 'collectionImage': 'https://lh3.googleusercontent.com/10FvWeiHnUJi3OeAkHsyQIk_Eb__3MXRHrXlv9T5_pgnlxzA-wP10OrQNXsWTmbtIEL83yKJDf1g4u0VD1JR2H31RejbS-dzPRcYhWw=s120', 'tokenId': '3150', 'tokenName': 'The Long Lost #3150', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.1, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100321', 'collectionName': 'The Long Lost', 'collectionCode': 'the-long-lost', 'contractAddress': '0x1347a97789cd3aa0b11433e8117f55ab640a0451', 'collectionImage': 'https://lh3.googleusercontent.com/10FvWeiHnUJi3OeAkHsyQIk_Eb__3MXRHrXlv9T5_pgnlxzA-wP10OrQNXsWTmbtIEL83yKJDf1g4u0VD1JR2H31RejbS-dzPRcYhWw=s120', 'tokenId': '6908', 'tokenName': 'The Long Lost #6908', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.03, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100321', 'collectionName': 'The Long Lost', 'collectionCode': 'the-long-lost', 'contractAddress': '0x1347a97789cd3aa0b11433e8117f55ab640a0451', 'collectionImage': 'https://lh3.googleusercontent.com/10FvWeiHnUJi3OeAkHsyQIk_Eb__3MXRHrXlv9T5_pgnlxzA-wP10OrQNXsWTmbtIEL83yKJDf1g4u0VD1JR2H31RejbS-dzPRcYhWw=s120', 'tokenId': '8303', 'tokenName': 'The Long Lost #8303', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.024, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100321', 'collectionName': 'The Long Lost', 'collectionCode': 'the-long-lost', 'contractAddress': '0x1347a97789cd3aa0b11433e8117f55ab640a0451', 'collectionImage': 'https://lh3.googleusercontent.com/10FvWeiHnUJi3OeAkHsyQIk_Eb__3MXRHrXlv9T5_pgnlxzA-wP10OrQNXsWTmbtIEL83yKJDf1g4u0VD1JR2H31RejbS-dzPRcYhWw=s120', 'tokenId': '4196', 'tokenName': 'The Long Lost #4196', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.07, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100321', 'collectionName': 'The Long Lost', 'collectionCode': 'the-long-lost', 'contractAddress': '0x1347a97789cd3aa0b11433e8117f55ab640a0451', 'collectionImage': 'https://lh3.googleusercontent.com/10FvWeiHnUJi3OeAkHsyQIk_Eb__3MXRHrXlv9T5_pgnlxzA-wP10OrQNXsWTmbtIEL83yKJDf1g4u0VD1JR2H31RejbS-dzPRcYhWw=s120', 'tokenId': '7125', 'tokenName': 'The Long Lost #7125', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.3, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100321', 'collectionName': 'The Long Lost', 'collectionCode': 'the-long-lost', 'contractAddress': '0x1347a97789cd3aa0b11433e8117f55ab640a0451', 'collectionImage': 'https://lh3.googleusercontent.com/10FvWeiHnUJi3OeAkHsyQIk_Eb__3MXRHrXlv9T5_pgnlxzA-wP10OrQNXsWTmbtIEL83yKJDf1g4u0VD1JR2H31RejbS-dzPRcYhWw=s120', 'tokenId': '5236', 'tokenName': 'The Long Lost #5236', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0746, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:05:57,464][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100321
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:57,778][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['The Long Lost #4058', 'The Long Lost #1548', 'The Long Lost #7590', 'The Long Lost #527', 'The Long Lost #3150', 'The Long Lost #6908', 'The Long Lost #8303', 'The Long Lost #4196', 'The Long Lost #7125', 'The Long Lost #5236'],[0.05, 0.0219, 0.03, 0.0257, 0.1, 0.03, 0.024, 0.07, 0.3, 0.0746]
[2022-10-13 09:05:57,778][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['The Long Lost #4058', 'The Long Lost #1548', 'The Long Lost #7590', 'The Long Lost #527', 'The Long Lost #3150', 'The Long Lost #6908', 'The Long Lost #8303', 'The Long Lost #4196', 'The Long Lost #7125', 'The Long Lost #5236', 'The Long Lost #5703', 'The Long Lost #3915', 'The Long Lost #906', 'The Long Lost #4617', 'The Long Lost #4506', 'The Long Lost #9847', 'The Long Lost #5462', 'The Long Lost #1123', 'The Long Lost #2510', 'The Long Lost #9225', 'The Long Lost #3386', 'The Long Lost #8017'],[0.05, 0.0219, 0.03, 0.0257, 0.1, 0.03, 0.024, 0.07, 0.3, 0.0746, 0.03, 0.252, 0.252, 0.252, 0.252, 0.017301, 0.0245, 0.0249, 0.039, 0.0389, 0.038, 0.03]
[2022-10-13 09:05:57,831][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:57,832][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:57,833][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:57,833][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:57,833][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100322
}
[2022-10-13 09:05:57,834][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100322}
[2022-10-13 09:05:57,834][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100322
}
[2022-10-13 09:05:58,274][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:05:58,511][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100322
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:58,816][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:05:58,817][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:05:58,836][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:05:58,838][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:05:58,839][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:05:58,840][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:05:58,840][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100324
}
[2022-10-13 09:05:58,841][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100324}
[2022-10-13 09:05:58,842][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100324
}
[2022-10-13 09:05:59,307][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100324', 'collectionName': 'Squishy Squad NFT', 'collectionCode': 'squishy-squad', 'contractAddress': '0x792496a3f678187e59e1d1d5e075799cd1e124c2', 'collectionImage': 'https://lh3.googleusercontent.com/QpNMoHSR7sSxv27_B1v3Y7VvOl8-_JigGgy84CL2xLFKqJCVf7-giOcyl4mkheXdDi1FO2V2RDAx99DaQDHmiWSLZTxCpS3g2ASLwZg=s120', 'tokenId': '3615', 'tokenName': 'Squishy Squad NFT #3615', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.088, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100324', 'collectionName': 'Squishy Squad NFT', 'collectionCode': 'squishy-squad', 'contractAddress': '0x792496a3f678187e59e1d1d5e075799cd1e124c2', 'collectionImage': 'https://lh3.googleusercontent.com/QpNMoHSR7sSxv27_B1v3Y7VvOl8-_JigGgy84CL2xLFKqJCVf7-giOcyl4mkheXdDi1FO2V2RDAx99DaQDHmiWSLZTxCpS3g2ASLwZg=s120', 'tokenId': '8720', 'tokenName': 'Squishy Squad NFT #8720', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.085, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100324', 'collectionName': 'Squishy Squad NFT', 'collectionCode': 'squishy-squad', 'contractAddress': '0x792496a3f678187e59e1d1d5e075799cd1e124c2', 'collectionImage': 'https://lh3.googleusercontent.com/QpNMoHSR7sSxv27_B1v3Y7VvOl8-_JigGgy84CL2xLFKqJCVf7-giOcyl4mkheXdDi1FO2V2RDAx99DaQDHmiWSLZTxCpS3g2ASLwZg=s120', 'tokenId': '6838', 'tokenName': 'Squishy Squad NFT #6838', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0398, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100324', 'collectionName': 'Squishy Squad NFT', 'collectionCode': 'squishy-squad', 'contractAddress': '0x792496a3f678187e59e1d1d5e075799cd1e124c2', 'collectionImage': 'https://lh3.googleusercontent.com/QpNMoHSR7sSxv27_B1v3Y7VvOl8-_JigGgy84CL2xLFKqJCVf7-giOcyl4mkheXdDi1FO2V2RDAx99DaQDHmiWSLZTxCpS3g2ASLwZg=s120', 'tokenId': '7709', 'tokenName': 'Squishy Squad NFT #7709', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.03888, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:05:59,308][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100324
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:05:59,627][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Squishy Squad NFT #3615', 'Squishy Squad NFT #8720', 'Squishy Squad NFT #6838', 'Squishy Squad NFT #7709'],[0.088, 0.085, 0.0398, 0.03888]
[2022-10-13 09:06:00,031][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Squishy Squad NFT #3615', 'Squishy Squad NFT #8720', 'Squishy Squad NFT #6838', 'Squishy Squad NFT #7709'],[0.088, 0.085, 0.0398, 0.03888]
[2022-10-13 09:06:00,058][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:06:00,059][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:06:00,060][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:06:00,060][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:06:00,061][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100325
}
[2022-10-13 09:06:00,061][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100325}
[2022-10-13 09:06:00,061][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100325
}
[2022-10-13 09:06:00,530][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:06:00,530][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100325
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:06:00,841][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:06:00,842][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:06:00,857][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:06:00,859][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:06:00,860][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:06:00,861][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:06:00,861][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100327
}
[2022-10-13 09:06:00,862][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100327}
[2022-10-13 09:06:00,862][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100327
}
[2022-10-13 09:06:01,343][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100327', 'collectionName': 'Apes-R-Us', 'collectionCode': 'katun-apes-r-us', 'contractAddress': '0xd44078705456c4f4517a659953f5296e5328f8b8', 'collectionImage': 'https://lh3.googleusercontent.com/Mb8vf9jYc1W4Se9uUIJJsWz0jQhBGYQiv5IKUcI2pAinzwFYkja_2iCLuOX7ZKt9sbP-POEunT4BsXBtncxzWL0catvlw6GOzoYmpg=s120', 'tokenId': '340282366920938463463374607431768217209', 'tokenName': 'Apes-R-Us', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0299, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:06:01,344][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100327
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:06:01,666][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Apes-R-Us'],[0.0299]
[2022-10-13 09:06:01,666][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Apes-R-Us'],[0.0299]
[2022-10-13 09:06:01,683][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:06:01,686][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:06:01,687][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:06:01,687][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:06:01,689][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100328
}
[2022-10-13 09:06:01,690][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100328}
[2022-10-13 09:06:01,691][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100328
}
[2022-10-13 09:06:02,172][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100328', 'collectionName': 'Wonky Stonks', 'collectionCode': 'wonky-stonks', 'contractAddress': '0x518ba36f1ca6dfe3bb1b098b8dd0444030e79d9f', 'collectionImage': 'https://lh3.googleusercontent.com/c_WHt7QOiLxXfx6ILsTXzkPmMc3CjcFXNKNFODIM4jXYsIPE_Vc4B_BNiYBqQNrWrVJTV3Fm82ppS_eGNrIH8zG0pKpGVEjDBtlE=s130', 'tokenId': '5490', 'tokenName': 'Wonky Stonks #5490', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.246, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100328', 'collectionName': 'Wonky Stonks', 'collectionCode': 'wonky-stonks', 'contractAddress': '0x518ba36f1ca6dfe3bb1b098b8dd0444030e79d9f', 'collectionImage': 'https://lh3.googleusercontent.com/c_WHt7QOiLxXfx6ILsTXzkPmMc3CjcFXNKNFODIM4jXYsIPE_Vc4B_BNiYBqQNrWrVJTV3Fm82ppS_eGNrIH8zG0pKpGVEjDBtlE=s130', 'tokenId': '731', 'tokenName': 'Wonky Stonks #731', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.298, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100328', 'collectionName': 'Wonky Stonks', 'collectionCode': 'wonky-stonks', 'contractAddress': '0x518ba36f1ca6dfe3bb1b098b8dd0444030e79d9f', 'collectionImage': 'https://lh3.googleusercontent.com/c_WHt7QOiLxXfx6ILsTXzkPmMc3CjcFXNKNFODIM4jXYsIPE_Vc4B_BNiYBqQNrWrVJTV3Fm82ppS_eGNrIH8zG0pKpGVEjDBtlE=s130', 'tokenId': '520', 'tokenName': 'Wonky Stonks #520', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.046655, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:06:02,173][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100328
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:06:02,512][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Wonky Stonks #5490', 'Wonky Stonks #731', 'Wonky Stonks #520'],[0.246, 0.298, 0.046655]
[2022-10-13 09:06:02,513][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Wonky Stonks #5490', 'Wonky Stonks #731', 'Wonky Stonks #520'],[0.246, 0.298, 0.046655]
[2022-10-13 09:06:02,538][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:06:02,540][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:06:02,541][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:06:02,542][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:06:02,542][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100329
}
[2022-10-13 09:06:02,543][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100329}
[2022-10-13 09:06:02,543][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100329
}
[2022-10-13 09:06:02,985][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:06:02,985][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100329
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:06:03,293][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:06:03,294][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:06:03,311][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:06:03,314][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:06:03,316][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:06:03,316][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:06:03,317][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100330
}
[2022-10-13 09:06:03,317][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100330}
[2022-10-13 09:06:03,318][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100330
}
[2022-10-13 09:06:03,754][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100330', 'collectionName': 'Mad Meerkat Burrow', 'collectionCode': 'mad-meerkat-burrow', 'contractAddress': '0xce17f8ef13cf67da6eab86e31360102eea8609ff', 'collectionImage': 'https://lh3.googleusercontent.com/MD4kvKomZSB0XHqfAbvpuhxijFd_ZQ_7M-ALSdBf9bPP5ETRColARlG2C9MNyV0K5G9ym5OlKVuD6uOA_NFa5k_vL70WKX_55Ns6mQ=s120', 'tokenId': '510', 'tokenName': 'Mad Meerkat Burrow #510', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 2.6, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:06:03,755][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100330
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:06:04,059][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Mad Meerkat Burrow #510'],[2.6]
[2022-10-13 09:06:04,060][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Mad Meerkat Burrow #510'],[2.6]
[2022-10-13 09:06:04,077][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:06:04,080][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:06:04,081][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:06:04,081][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:06:04,082][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100331
}
[2022-10-13 09:06:04,082][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100331}
[2022-10-13 09:06:04,083][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100331
}
[2022-10-13 09:06:04,543][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:06:04,544][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100331
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:06:04,850][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:06:04,851][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:06:04,869][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:06:04,872][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:06:04,873][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:06:04,873][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:06:04,874][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100332
}
[2022-10-13 09:06:04,874][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100332}
[2022-10-13 09:06:04,874][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100332
}
[2022-10-13 09:06:05,379][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:06:05,379][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100332
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:06:05,707][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:06:05,708][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:06:05,724][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:06:05,727][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:06:05,728][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:06:05,728][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:06:05,729][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100333
}
[2022-10-13 09:06:05,729][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100333}
[2022-10-13 09:06:05,730][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100333
}
[2022-10-13 09:06:06,241][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100333', 'collectionName': '- TronWars -', 'collectionCode': 'thetronwars', 'contractAddress': '0x537b2279d8f625a1b74cf3c1f0e2122fb047a6b0', 'collectionImage': 'https://lh3.googleusercontent.com/dok2G-cYiHNVPeaoKzJSBCbNy124UqUwHRcOa4fWIfZfodcOqD3hY9frGRA0o9wdd99WuXmPSmzMBggIhB7knxrU0mFU_u0K2XEUhg=s120', 'tokenId': '1120', 'tokenName': '- TronWars - #1120', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.033, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100333', 'collectionName': '- TronWars -', 'collectionCode': 'thetronwars', 'contractAddress': '0x537b2279d8f625a1b74cf3c1f0e2122fb047a6b0', 'collectionImage': 'https://lh3.googleusercontent.com/dok2G-cYiHNVPeaoKzJSBCbNy124UqUwHRcOa4fWIfZfodcOqD3hY9frGRA0o9wdd99WuXmPSmzMBggIhB7knxrU0mFU_u0K2XEUhg=s120', 'tokenId': '1486', 'tokenName': '- TronWars - #1486', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.09768, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100333', 'collectionName': '- TronWars -', 'collectionCode': 'thetronwars', 'contractAddress': '0x537b2279d8f625a1b74cf3c1f0e2122fb047a6b0', 'collectionImage': 'https://lh3.googleusercontent.com/dok2G-cYiHNVPeaoKzJSBCbNy124UqUwHRcOa4fWIfZfodcOqD3hY9frGRA0o9wdd99WuXmPSmzMBggIhB7knxrU0mFU_u0K2XEUhg=s120', 'tokenId': '3888', 'tokenName': '- TronWars - #3888', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.06, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100333', 'collectionName': '- TronWars -', 'collectionCode': 'thetronwars', 'contractAddress': '0x537b2279d8f625a1b74cf3c1f0e2122fb047a6b0', 'collectionImage': 'https://lh3.googleusercontent.com/dok2G-cYiHNVPeaoKzJSBCbNy124UqUwHRcOa4fWIfZfodcOqD3hY9frGRA0o9wdd99WuXmPSmzMBggIhB7knxrU0mFU_u0K2XEUhg=s120', 'tokenId': '1766', 'tokenName': '- TronWars - #1766', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.068, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100333', 'collectionName': '- TronWars -', 'collectionCode': 'thetronwars', 'contractAddress': '0x537b2279d8f625a1b74cf3c1f0e2122fb047a6b0', 'collectionImage': 'https://lh3.googleusercontent.com/dok2G-cYiHNVPeaoKzJSBCbNy124UqUwHRcOa4fWIfZfodcOqD3hY9frGRA0o9wdd99WuXmPSmzMBggIhB7knxrU0mFU_u0K2XEUhg=s120', 'tokenId': '5192', 'tokenName': '- TronWars - #5192', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.06, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100333', 'collectionName': '- TronWars -', 'collectionCode': 'thetronwars', 'contractAddress': '0x537b2279d8f625a1b74cf3c1f0e2122fb047a6b0', 'collectionImage': 'https://lh3.googleusercontent.com/dok2G-cYiHNVPeaoKzJSBCbNy124UqUwHRcOa4fWIfZfodcOqD3hY9frGRA0o9wdd99WuXmPSmzMBggIhB7knxrU0mFU_u0K2XEUhg=s120', 'tokenId': '5509', 'tokenName': '- TronWars - #5509', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.029, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100333', 'collectionName': '- TronWars -', 'collectionCode': 'thetronwars', 'contractAddress': '0x537b2279d8f625a1b74cf3c1f0e2122fb047a6b0', 'collectionImage': 'https://lh3.googleusercontent.com/dok2G-cYiHNVPeaoKzJSBCbNy124UqUwHRcOa4fWIfZfodcOqD3hY9frGRA0o9wdd99WuXmPSmzMBggIhB7knxrU0mFU_u0K2XEUhg=s120', 'tokenId': '5149', 'tokenName': '- TronWars - #5149', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.029, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:06:06,241][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100333
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:06:06,541][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['- TronWars - #1120', '- TronWars - #1486', '- TronWars - #3888', '- TronWars - #1766', '- TronWars - #5192', '- TronWars - #5509', '- TronWars - #5149'],[0.033, 0.09768, 0.06, 0.068, 0.06, 0.029, 0.029]
[2022-10-13 09:06:06,541][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['- TronWars - #1120', '- TronWars - #1486', '- TronWars - #3888', '- TronWars - #1766', '- TronWars - #5192', '- TronWars - #5509', '- TronWars - #5149'],[0.033, 0.09768, 0.06, 0.068, 0.06, 0.029, 0.029]
[2022-10-13 09:06:06,553][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:06:06,554][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:06:06,555][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:06:06,555][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:06:06,555][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100334
}
[2022-10-13 09:06:06,555][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100334}
[2022-10-13 09:06:06,556][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100334
}
[2022-10-13 09:06:07,023][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:06:07,024][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100334
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:06:07,313][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:06:07,313][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:06:07,330][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:06:07,332][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:06:07,333][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:06:07,334][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:06:07,334][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100336
}
[2022-10-13 09:06:07,335][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100336}
[2022-10-13 09:06:07,335][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100336
}
[2022-10-13 09:06:07,836][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100336', 'collectionName': 'Big Cats Official Collection', 'collectionCode': 'big-cats-official-collection', 'contractAddress': '0xc6f2efee7c6bb7a315e9f3c9afa455b4aa548023', 'collectionImage': 'https://lh3.googleusercontent.com/DBhjid9hPXzT_AS-Q6avDfqE61q9bqPSxxlApYCqWbQaxfXlsWC2tHCcDxqGcO9YoJCPqXRmJSu8SfTYasVlzHui2obiRZLAaAPJQw=s120', 'tokenId': '3343', 'tokenName': 'Big Cats Official Collection #3343', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0296, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100336', 'collectionName': 'Big Cats Official Collection', 'collectionCode': 'big-cats-official-collection', 'contractAddress': '0xc6f2efee7c6bb7a315e9f3c9afa455b4aa548023', 'collectionImage': 'https://lh3.googleusercontent.com/DBhjid9hPXzT_AS-Q6avDfqE61q9bqPSxxlApYCqWbQaxfXlsWC2tHCcDxqGcO9YoJCPqXRmJSu8SfTYasVlzHui2obiRZLAaAPJQw=s120', 'tokenId': '4958', 'tokenName': 'Big Cats Official Collection #4958', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.2, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100336', 'collectionName': 'Big Cats Official Collection', 'collectionCode': 'big-cats-official-collection', 'contractAddress': '0xc6f2efee7c6bb7a315e9f3c9afa455b4aa548023', 'collectionImage': 'https://lh3.googleusercontent.com/DBhjid9hPXzT_AS-Q6avDfqE61q9bqPSxxlApYCqWbQaxfXlsWC2tHCcDxqGcO9YoJCPqXRmJSu8SfTYasVlzHui2obiRZLAaAPJQw=s120', 'tokenId': '842', 'tokenName': 'Big Cats Official Collection #842', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.026, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100336', 'collectionName': 'Big Cats Official Collection', 'collectionCode': 'big-cats-official-collection', 'contractAddress': '0xc6f2efee7c6bb7a315e9f3c9afa455b4aa548023', 'collectionImage': 'https://lh3.googleusercontent.com/DBhjid9hPXzT_AS-Q6avDfqE61q9bqPSxxlApYCqWbQaxfXlsWC2tHCcDxqGcO9YoJCPqXRmJSu8SfTYasVlzHui2obiRZLAaAPJQw=s120', 'tokenId': '955', 'tokenName': 'Big Cats Official Collection #955', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.07, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100336', 'collectionName': 'Big Cats Official Collection', 'collectionCode': 'big-cats-official-collection', 'contractAddress': '0xc6f2efee7c6bb7a315e9f3c9afa455b4aa548023', 'collectionImage': 'https://lh3.googleusercontent.com/DBhjid9hPXzT_AS-Q6avDfqE61q9bqPSxxlApYCqWbQaxfXlsWC2tHCcDxqGcO9YoJCPqXRmJSu8SfTYasVlzHui2obiRZLAaAPJQw=s120', 'tokenId': '1602', 'tokenName': 'Big Cats Official Collection #1602', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.085, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:06:07,874][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100336
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:06:08,192][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Big Cats Official Collection #3343', 'Big Cats Official Collection #4958', 'Big Cats Official Collection #842', 'Big Cats Official Collection #955', 'Big Cats Official Collection #1602'],[0.0296, 0.2, 0.026, 0.07, 0.085]
[2022-10-13 09:06:08,193][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Big Cats Official Collection #3343', 'Big Cats Official Collection #4958', 'Big Cats Official Collection #842', 'Big Cats Official Collection #955', 'Big Cats Official Collection #1602'],[0.0296, 0.2, 0.026, 0.07, 0.085]
[2022-10-13 09:06:08,216][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:06:08,218][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:06:08,219][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:06:08,219][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:06:08,220][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100337
}
[2022-10-13 09:06:08,220][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100337}
[2022-10-13 09:06:08,220][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100337
}
[2022-10-13 09:06:08,725][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:06:08,725][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100337
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:06:09,058][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:06:09,058][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:06:09,072][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:06:09,077][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:06:09,078][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:06:09,079][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:06:09,080][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100338
}
[2022-10-13 09:06:09,080][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100338}
[2022-10-13 09:06:09,081][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100338
}
[2022-10-13 09:06:09,609][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100338', 'collectionName': "Nina's Super Cool World", 'collectionCode': 'super-cool-world', 'contractAddress': '0x670d4dd2e6badfbbd372d0d37e06cd2852754a04', 'collectionImage': 'https://openseauserdata.com/files/8d9f9dc8ed913e52052301f0d59515e8.png', 'tokenId': '707', 'tokenName': "Nina's Super Cool World #707", 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.418175, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100338', 'collectionName': "Nina's Super Cool World", 'collectionCode': 'super-cool-world', 'contractAddress': '0x670d4dd2e6badfbbd372d0d37e06cd2852754a04', 'collectionImage': 'https://openseauserdata.com/files/8d9f9dc8ed913e52052301f0d59515e8.png', 'tokenId': '4744', 'tokenName': "Nina's Super Cool World #4744", 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.37625, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:06:09,609][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100338
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:06:09,932][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：["Nina's Super Cool World #707", "Nina's Super Cool World #4744"],[0.418175, 0.37625]
[2022-10-13 09:06:09,932][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：["Nina's Super Cool World #707", "Nina's Super Cool World #4744"],[0.418175, 0.37625]
[2022-10-13 09:10:14,340][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:10:14,342][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:10:14,670][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:10:14,671][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:10:15,086][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:10:15,087][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:10:15,089][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:10:15,090][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:10:15,091][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:10:15,092][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:10:15,093][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 09:10:15,445][test_data_calculate.py 27][INFO]: 选取到的集合的uuid为：100301, start_index为：428
[2022-10-13 09:10:32,090][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:10:32,092][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:10:32,486][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:10:32,489][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:10:33,007][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:10:33,007][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:10:33,009][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:10:33,010][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:10:33,011][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:10:33,012][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:10:33,013][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 09:10:33,447][test_data_calculate.py 27][INFO]: 选取到的集合的uuid为：[100301], start_index为：2552
[2022-10-13 09:10:33,468][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:10:33,470][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:10:33,470][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions
[2022-10-13 09:10:33,471][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:10:33,471][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100301
}
[2022-10-13 09:10:33,471][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100301}
[2022-10-13 09:10:33,471][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100301
}
[2022-10-13 09:10:34,163][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '4626', 'tokenName': 'The Possessed #4626', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.122, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '7771', 'tokenName': 'The Possessed #7771', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.122, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '3349', 'tokenName': 'The Possessed #3349', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.063, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '2425', 'tokenName': 'The Possessed #2425', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.1, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '6323', 'tokenName': 'The Possessed #6323', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.069, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '1775', 'tokenName': 'The Possessed #1775', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.065, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '801', 'tokenName': 'The Possessed #801', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0689, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '8581', 'tokenName': 'The Possessed #8581', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0737, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '7731', 'tokenName': 'The Possessed #7731', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0646075, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '5803', 'tokenName': 'The Possessed #5803', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.099, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:10:34,164][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100301
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:10:34,480][test_data_calculate.py 129][INFO]: 最近交易列表测试数据接口返回：['The Possessed #4626', 'The Possessed #7771', 'The Possessed #3349', 'The Possessed #2425', 'The Possessed #6323', 'The Possessed #1775', 'The Possessed #801', 'The Possessed #8581', 'The Possessed #7731', 'The Possessed #5803'],[0.122, 0.122, 0.063, 0.1, 0.069, 0.065, 0.0689, 0.0737, 0.0646075, 0.099]
[2022-10-13 09:10:34,481][test_data_calculate.py 130][INFO]: 最近交易列表测试数据sql查询：['The Possessed #4626', 'The Possessed #7771', 'The Possessed #3349', 'The Possessed #2425', 'The Possessed #6323', 'The Possessed #1775', 'The Possessed #801', 'The Possessed #8581', 'The Possessed #7731', 'The Possessed #5803', 'The Possessed #4996', 'The Possessed #1014', 'The Possessed #9531', 'The Possessed #1293', 'The Possessed #8231', 'The Possessed #8737', 'The Possessed #9816', 'The Possessed #5253', 'The Possessed #3506', 'The Possessed #6412', 'The Possessed #6363', 'The Possessed #9406', 'The Possessed #9648', 'The Possessed #1359', 'The Possessed #7229', 'The Possessed #8342', 'The Possessed #1291', 'The Possessed #7379', 'The Possessed #907', 'The Possessed #8370'],[0.122, 0.122, 0.063, 0.1, 0.069, 0.065, 0.0689, 0.0737, 0.0646075, 0.099, 0.089, 0.07, 0.069, 0.064715, 0.16, 0.0621, 0.0645, 0.064715, 0.07, 0.0668, 0.086, 0.077, 0.18, 0.089, 0.062, 0.064715, 0.073, 0.1, 0.0675, 0.0707]
[2022-10-13 09:17:12,561][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:12,564][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:12,910][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:12,912][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:13,440][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:13,440][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:13,445][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:13,446][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:13,448][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:13,450][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:13,452][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 09:17:13,806][test_data_calculate.py 27][INFO]: 选取到的集合的uuid为：[100301], start_index为：61
[2022-10-13 09:17:13,825][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:13,829][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:13,829][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:13,829][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:13,830][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100301
}
[2022-10-13 09:17:13,830][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100301}
[2022-10-13 09:17:13,830][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100301
}
[2022-10-13 09:17:14,432][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '4626', 'tokenName': 'The Possessed #4626', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.122, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '7771', 'tokenName': 'The Possessed #7771', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.122, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '3349', 'tokenName': 'The Possessed #3349', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.063, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '2425', 'tokenName': 'The Possessed #2425', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.1, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '6323', 'tokenName': 'The Possessed #6323', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.069, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '1775', 'tokenName': 'The Possessed #1775', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.065, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '801', 'tokenName': 'The Possessed #801', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0689, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '8581', 'tokenName': 'The Possessed #8581', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0737, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '7731', 'tokenName': 'The Possessed #7731', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0646075, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '5803', 'tokenName': 'The Possessed #5803', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.099, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '4996', 'tokenName': 'The Possessed #4996', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.089, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '1014', 'tokenName': 'The Possessed #1014', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.07, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '9531', 'tokenName': 'The Possessed #9531', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.069, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '1293', 'tokenName': 'The Possessed #1293', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.064715, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '8231', 'tokenName': 'The Possessed #8231', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.16, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '8737', 'tokenName': 'The Possessed #8737', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0621, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '9816', 'tokenName': 'The Possessed #9816', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0645, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '5253', 'tokenName': 'The Possessed #5253', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.064715, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '3506', 'tokenName': 'The Possessed #3506', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.07, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '6412', 'tokenName': 'The Possessed #6412', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0668, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '6363', 'tokenName': 'The Possessed #6363', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.086, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '9406', 'tokenName': 'The Possessed #9406', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.077, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '9648', 'tokenName': 'The Possessed #9648', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.18, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '1359', 'tokenName': 'The Possessed #1359', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.089, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '7229', 'tokenName': 'The Possessed #7229', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.062, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '8342', 'tokenName': 'The Possessed #8342', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.064715, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '1291', 'tokenName': 'The Possessed #1291', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.073, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '7379', 'tokenName': 'The Possessed #7379', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.1, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '907', 'tokenName': 'The Possessed #907', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0675, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100301', 'collectionName': 'The Possessed', 'collectionCode': 'thepossessed', 'contractAddress': '0x3a2096754df385553c4252e5a82dc862e64169bb', 'collectionImage': 'https://openseauserdata.com/files/aabc89aee6e21ea107f77c783c96e011.gif', 'tokenId': '8370', 'tokenName': 'The Possessed #8370', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0707, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:17:14,433][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100301
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:14,687][test_data_calculate.py 129][INFO]: 最近交易列表测试数据接口返回：['The Possessed #4626', 'The Possessed #7771', 'The Possessed #3349', 'The Possessed #2425', 'The Possessed #6323', 'The Possessed #1775', 'The Possessed #801', 'The Possessed #8581', 'The Possessed #7731', 'The Possessed #5803', 'The Possessed #4996', 'The Possessed #1014', 'The Possessed #9531', 'The Possessed #1293', 'The Possessed #8231', 'The Possessed #8737', 'The Possessed #9816', 'The Possessed #5253', 'The Possessed #3506', 'The Possessed #6412', 'The Possessed #6363', 'The Possessed #9406', 'The Possessed #9648', 'The Possessed #1359', 'The Possessed #7229', 'The Possessed #8342', 'The Possessed #1291', 'The Possessed #7379', 'The Possessed #907', 'The Possessed #8370'],[0.122, 0.122, 0.063, 0.1, 0.069, 0.065, 0.0689, 0.0737, 0.0646075, 0.099, 0.089, 0.07, 0.069, 0.064715, 0.16, 0.0621, 0.0645, 0.064715, 0.07, 0.0668, 0.086, 0.077, 0.18, 0.089, 0.062, 0.064715, 0.073, 0.1, 0.0675, 0.0707]
[2022-10-13 09:17:14,687][test_data_calculate.py 130][INFO]: 最近交易列表测试数据sql查询：['The Possessed #4626', 'The Possessed #7771', 'The Possessed #3349', 'The Possessed #2425', 'The Possessed #6323', 'The Possessed #1775', 'The Possessed #801', 'The Possessed #8581', 'The Possessed #7731', 'The Possessed #5803', 'The Possessed #4996', 'The Possessed #1014', 'The Possessed #9531', 'The Possessed #1293', 'The Possessed #8231', 'The Possessed #8737', 'The Possessed #9816', 'The Possessed #5253', 'The Possessed #3506', 'The Possessed #6412', 'The Possessed #6363', 'The Possessed #9406', 'The Possessed #9648', 'The Possessed #1359', 'The Possessed #7229', 'The Possessed #8342', 'The Possessed #1291', 'The Possessed #7379', 'The Possessed #907', 'The Possessed #8370'],[0.122, 0.122, 0.063, 0.1, 0.069, 0.065, 0.0689, 0.0737, 0.0646075, 0.099, 0.089, 0.07, 0.069, 0.064715, 0.16, 0.0621, 0.0645, 0.064715, 0.07, 0.0668, 0.086, 0.077, 0.18, 0.089, 0.062, 0.064715, 0.073, 0.1, 0.0675, 0.0707]
[2022-10-13 09:17:32,554][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:32,556][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:32,881][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:32,882][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:33,353][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:33,353][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:33,356][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:33,357][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:33,359][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:33,360][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:33,362][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 09:17:33,704][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[100764, 100765, 100766, 100767, 100768, 100769, 100770, 100771, 100772, 100773, 100774, 100775, 100776, 100777, 100778, 100779, 100780, 100781, 100782, 100783, 100784, 100785, 100786, 100787, 100788, 100789, 100790, 100791, 100792, 100793, 100794, 100795, 100796, 100797, 100798, 100799, 100800, 100801, 100802, 100803, 100804, 100805, 100806, 100807, 100808, 100809, 100810, 100811, 100812, 100813], start_index为：731
[2022-10-13 09:17:33,760][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:33,761][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:33,762][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:33,762][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:33,762][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100764
}
[2022-10-13 09:17:33,762][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100764}
[2022-10-13 09:17:33,763][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100764
}
[2022-10-13 09:17:34,215][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:34,215][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100764
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:34,478][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:34,478][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:34,483][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:34,484][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:34,484][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:34,485][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:34,485][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100765
}
[2022-10-13 09:17:34,485][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100765}
[2022-10-13 09:17:34,485][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100765
}
[2022-10-13 09:17:34,937][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:34,937][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100765
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:35,226][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:35,226][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:35,230][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:35,231][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:35,232][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:35,232][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:35,232][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100766
}
[2022-10-13 09:17:35,232][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100766}
[2022-10-13 09:17:35,232][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100766
}
[2022-10-13 09:17:35,676][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:35,676][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100766
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:35,951][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:35,952][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:35,957][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:35,958][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:35,959][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:35,959][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:35,959][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100767
}
[2022-10-13 09:17:35,959][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100767}
[2022-10-13 09:17:35,959][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100767
}
[2022-10-13 09:17:36,426][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:36,426][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100767
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:36,696][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:36,696][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:36,701][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:36,703][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:36,703][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:36,704][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:36,704][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100768
}
[2022-10-13 09:17:36,704][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100768}
[2022-10-13 09:17:36,705][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100768
}
[2022-10-13 09:17:37,192][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:37,193][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100768
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:37,459][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:37,459][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:37,463][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:37,464][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:37,465][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:37,465][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:37,465][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100769
}
[2022-10-13 09:17:37,465][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100769}
[2022-10-13 09:17:37,466][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100769
}
[2022-10-13 09:17:39,096][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:39,096][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100769
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:39,392][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:39,392][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:39,397][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:39,398][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:39,398][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:39,399][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:39,399][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100770
}
[2022-10-13 09:17:39,399][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100770}
[2022-10-13 09:17:39,399][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100770
}
[2022-10-13 09:17:39,833][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:39,834][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100770
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:40,100][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:40,100][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:40,106][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:40,107][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:40,108][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:40,108][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:40,108][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100771
}
[2022-10-13 09:17:40,108][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100771}
[2022-10-13 09:17:40,108][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100771
}
[2022-10-13 09:17:40,543][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:40,543][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100771
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:40,809][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:40,809][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:40,815][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:40,817][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:40,817][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:40,817][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:40,817][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100772
}
[2022-10-13 09:17:40,818][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100772}
[2022-10-13 09:17:40,818][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100772
}
[2022-10-13 09:17:41,323][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:41,324][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100772
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:41,625][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:41,625][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:41,631][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:41,633][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:41,634][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:41,634][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:41,634][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100773
}
[2022-10-13 09:17:41,634][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100773}
[2022-10-13 09:17:41,634][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100773
}
[2022-10-13 09:17:42,071][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:42,072][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100773
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:42,351][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:42,351][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:42,356][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:42,357][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:42,357][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:42,357][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:42,357][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100774
}
[2022-10-13 09:17:42,358][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100774}
[2022-10-13 09:17:42,358][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100774
}
[2022-10-13 09:17:42,802][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:42,803][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100774
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:43,081][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:43,082][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:43,088][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:43,088][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:43,089][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:43,089][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:43,089][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100775
}
[2022-10-13 09:17:43,089][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100775}
[2022-10-13 09:17:43,090][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100775
}
[2022-10-13 09:17:43,525][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:43,526][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100775
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:43,791][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:43,791][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:43,799][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:43,800][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:43,800][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:43,800][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:43,801][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100776
}
[2022-10-13 09:17:43,801][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100776}
[2022-10-13 09:17:43,801][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100776
}
[2022-10-13 09:17:44,249][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:44,249][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100776
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:44,514][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:44,514][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:44,520][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:44,521][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:44,522][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:44,522][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:44,522][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100777
}
[2022-10-13 09:17:44,522][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100777}
[2022-10-13 09:17:44,522][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100777
}
[2022-10-13 09:17:44,986][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:44,986][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100777
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:45,254][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:45,254][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:45,259][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:45,260][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:45,260][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:45,261][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:45,261][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100778
}
[2022-10-13 09:17:45,261][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100778}
[2022-10-13 09:17:45,261][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100778
}
[2022-10-13 09:17:45,713][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100778', 'collectionName': 'DystoMice V2', 'collectionCode': 'dystomice-v2', 'contractAddress': '0xe440654a00b757446b4914c56ad56a804a6bc6af', 'collectionImage': 'https://lh3.googleusercontent.com/j0vYfMvGRrLrsQ46YYBfO43eaW9GiCuHV83dlpC5efgP5frYQw3eq0kAnhyAT8gT14rA_U8HcRi7wE6rvBcCPK7loRI_sgN8CM4erDw=s120', 'tokenId': '3146', 'tokenName': 'DystoMice V2 #3146', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0809, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:17:45,714][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100778
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:45,979][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['DystoMice V2 #3146'],[0.0809]
[2022-10-13 09:17:45,979][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['DystoMice V2 #3146'],[0.0809]
[2022-10-13 09:17:45,984][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:45,985][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:45,985][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:45,986][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:45,986][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100779
}
[2022-10-13 09:17:45,986][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100779}
[2022-10-13 09:17:45,987][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100779
}
[2022-10-13 09:17:46,426][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:46,426][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100779
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:46,688][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:46,688][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:46,695][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:46,696][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:46,697][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:46,697][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:46,697][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100780
}
[2022-10-13 09:17:46,698][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100780}
[2022-10-13 09:17:46,698][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100780
}
[2022-10-13 09:17:47,147][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:47,148][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100780
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:47,417][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:47,417][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:47,421][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:47,422][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:47,423][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:47,423][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:47,423][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100781
}
[2022-10-13 09:17:47,424][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100781}
[2022-10-13 09:17:47,424][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100781
}
[2022-10-13 09:17:47,857][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:47,857][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100781
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:48,142][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:48,142][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:48,149][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:48,150][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:48,151][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:48,151][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:48,151][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100782
}
[2022-10-13 09:17:48,151][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100782}
[2022-10-13 09:17:48,151][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100782
}
[2022-10-13 09:17:48,614][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:48,614][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100782
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:48,904][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:48,905][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:48,912][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:48,912][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:48,913][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:48,913][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:48,913][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100783
}
[2022-10-13 09:17:48,913][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100783}
[2022-10-13 09:17:48,913][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100783
}
[2022-10-13 09:17:49,368][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:49,368][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100783
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:49,644][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:49,644][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:49,648][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:49,648][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:49,649][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:49,649][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:49,649][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100784
}
[2022-10-13 09:17:49,649][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100784}
[2022-10-13 09:17:49,649][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100784
}
[2022-10-13 09:17:50,088][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:50,088][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100784
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:50,360][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:50,361][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:50,365][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:50,365][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:50,366][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:50,366][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:50,366][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100785
}
[2022-10-13 09:17:50,366][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100785}
[2022-10-13 09:17:50,367][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100785
}
[2022-10-13 09:17:50,812][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:50,812][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100785
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:51,073][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:51,073][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:51,078][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:51,079][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:51,080][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:51,080][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:51,080][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100786
}
[2022-10-13 09:17:51,080][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100786}
[2022-10-13 09:17:51,080][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100786
}
[2022-10-13 09:17:51,548][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:51,549][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100786
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:51,818][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:51,819][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:51,825][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:51,827][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:51,827][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:51,827][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:51,827][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100787
}
[2022-10-13 09:17:51,828][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100787}
[2022-10-13 09:17:51,828][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100787
}
[2022-10-13 09:17:52,269][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:52,269][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100787
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:52,530][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:52,530][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:52,536][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:52,537][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:52,538][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:52,538][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:52,538][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100788
}
[2022-10-13 09:17:52,538][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100788}
[2022-10-13 09:17:52,538][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100788
}
[2022-10-13 09:17:52,976][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:52,977][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100788
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:53,247][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:53,247][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:53,253][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:53,254][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:53,254][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:53,254][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:53,254][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100789
}
[2022-10-13 09:17:53,255][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100789}
[2022-10-13 09:17:53,255][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100789
}
[2022-10-13 09:17:53,707][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:53,708][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100789
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:53,976][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:53,976][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:53,981][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:53,982][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:53,983][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:53,983][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:53,983][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100790
}
[2022-10-13 09:17:53,983][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100790}
[2022-10-13 09:17:53,983][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100790
}
[2022-10-13 09:17:54,455][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100790', 'collectionName': 'Gummies Gang - Official', 'collectionCode': 'gummiesgang-official', 'contractAddress': '0x7a3661eda8f70783213f7d0534c2ed26c11b253b', 'collectionImage': 'https://lh3.googleusercontent.com/ZIZhw_lI-_2-yA6asJxByx6nmIlNppxCmdE0h1HYzk0wIX17tSwtHnBySM65NOLtqcMhJfcd2JTJERJOd-IwFL4apaBL9OmOLKXEWQ=s120', 'tokenId': '5908', 'tokenName': 'Gummies Gang - Official #5908', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0043, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100790', 'collectionName': 'Gummies Gang - Official', 'collectionCode': 'gummiesgang-official', 'contractAddress': '0x7a3661eda8f70783213f7d0534c2ed26c11b253b', 'collectionImage': 'https://lh3.googleusercontent.com/ZIZhw_lI-_2-yA6asJxByx6nmIlNppxCmdE0h1HYzk0wIX17tSwtHnBySM65NOLtqcMhJfcd2JTJERJOd-IwFL4apaBL9OmOLKXEWQ=s120', 'tokenId': '6412', 'tokenName': 'Gummies Gang - Official #6412', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0177, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100790', 'collectionName': 'Gummies Gang - Official', 'collectionCode': 'gummiesgang-official', 'contractAddress': '0x7a3661eda8f70783213f7d0534c2ed26c11b253b', 'collectionImage': 'https://lh3.googleusercontent.com/ZIZhw_lI-_2-yA6asJxByx6nmIlNppxCmdE0h1HYzk0wIX17tSwtHnBySM65NOLtqcMhJfcd2JTJERJOd-IwFL4apaBL9OmOLKXEWQ=s120', 'tokenId': '4377', 'tokenName': 'Gummies Gang - Official #4377', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0177, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100790', 'collectionName': 'Gummies Gang - Official', 'collectionCode': 'gummiesgang-official', 'contractAddress': '0x7a3661eda8f70783213f7d0534c2ed26c11b253b', 'collectionImage': 'https://lh3.googleusercontent.com/ZIZhw_lI-_2-yA6asJxByx6nmIlNppxCmdE0h1HYzk0wIX17tSwtHnBySM65NOLtqcMhJfcd2JTJERJOd-IwFL4apaBL9OmOLKXEWQ=s120', 'tokenId': '4435', 'tokenName': 'Gummies Gang - Official #4435', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0177, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100790', 'collectionName': 'Gummies Gang - Official', 'collectionCode': 'gummiesgang-official', 'contractAddress': '0x7a3661eda8f70783213f7d0534c2ed26c11b253b', 'collectionImage': 'https://lh3.googleusercontent.com/ZIZhw_lI-_2-yA6asJxByx6nmIlNppxCmdE0h1HYzk0wIX17tSwtHnBySM65NOLtqcMhJfcd2JTJERJOd-IwFL4apaBL9OmOLKXEWQ=s120', 'tokenId': '6543', 'tokenName': 'Gummies Gang - Official #6543', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0177, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100790', 'collectionName': 'Gummies Gang - Official', 'collectionCode': 'gummiesgang-official', 'contractAddress': '0x7a3661eda8f70783213f7d0534c2ed26c11b253b', 'collectionImage': 'https://lh3.googleusercontent.com/ZIZhw_lI-_2-yA6asJxByx6nmIlNppxCmdE0h1HYzk0wIX17tSwtHnBySM65NOLtqcMhJfcd2JTJERJOd-IwFL4apaBL9OmOLKXEWQ=s120', 'tokenId': '3734', 'tokenName': 'Gummies Gang - Official #3734', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0048, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:17:54,456][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100790
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:54,722][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Gummies Gang - Official #5908', 'Gummies Gang - Official #6412', 'Gummies Gang - Official #4377', 'Gummies Gang - Official #4435', 'Gummies Gang - Official #6543', 'Gummies Gang - Official #3734'],[0.0043, 0.0177, 0.0177, 0.0177, 0.0177, 0.0048]
[2022-10-13 09:17:54,723][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Gummies Gang - Official #5908', 'Gummies Gang - Official #4377', 'Gummies Gang - Official #4435', 'Gummies Gang - Official #6412', 'Gummies Gang - Official #6543', 'Gummies Gang - Official #3734'],[0.0043, 0.0177, 0.0177, 0.0177, 0.0177, 0.0048]
[2022-10-13 09:17:54,924][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:54,926][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:54,926][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:54,926][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:54,926][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100791
}
[2022-10-13 09:17:54,927][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100791}
[2022-10-13 09:17:54,927][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100791
}
[2022-10-13 09:17:55,338][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:55,338][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100791
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:55,611][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:55,611][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:55,619][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:55,620][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:55,620][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:55,621][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:55,621][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100792
}
[2022-10-13 09:17:55,621][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100792}
[2022-10-13 09:17:55,621][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100792
}
[2022-10-13 09:17:56,078][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:56,078][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100792
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:56,344][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:56,344][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:56,352][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:56,353][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:56,353][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:56,354][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:56,354][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100793
}
[2022-10-13 09:17:56,354][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100793}
[2022-10-13 09:17:56,354][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100793
}
[2022-10-13 09:17:56,797][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:56,797][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100793
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:57,058][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:57,058][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:57,063][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:57,064][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:57,064][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:57,065][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:57,065][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100794
}
[2022-10-13 09:17:57,065][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100794}
[2022-10-13 09:17:57,065][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100794
}
[2022-10-13 09:17:57,519][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:57,519][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100794
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:57,783][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:57,783][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:57,788][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:57,789][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:57,789][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:57,790][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:57,790][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100795
}
[2022-10-13 09:17:57,790][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100795}
[2022-10-13 09:17:57,790][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100795
}
[2022-10-13 09:17:58,212][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:58,212][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100795
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:58,471][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:58,472][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:58,476][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:58,478][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:58,479][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:58,479][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:58,479][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100796
}
[2022-10-13 09:17:58,479][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100796}
[2022-10-13 09:17:58,479][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100796
}
[2022-10-13 09:17:58,912][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:58,913][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100796
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:59,242][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:59,242][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:59,250][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:59,252][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:59,253][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:59,253][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:59,253][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100797
}
[2022-10-13 09:17:59,253][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100797}
[2022-10-13 09:17:59,254][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100797
}
[2022-10-13 09:17:59,676][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:17:59,676][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100797
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:17:59,953][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:17:59,953][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:17:59,957][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:17:59,958][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:17:59,959][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:17:59,959][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:17:59,959][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100798
}
[2022-10-13 09:17:59,960][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100798}
[2022-10-13 09:17:59,960][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100798
}
[2022-10-13 09:18:00,401][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100798', 'collectionName': 'Cosmos Kidz', 'collectionCode': 'cosmoskidznft', 'contractAddress': '0x44e8c05bdaf35ad0ccb06a035359276edd87bebc', 'collectionImage': 'https://lh3.googleusercontent.com/S0xtEzo2q8rnZLxULnpkcKF1R4iLIWlCf2hy4CWI3miFPqN8841-jZzao2msZ1oFAp-HMus5tq4mzk1VDG_SUXHFP8NyTMikyGMt=s120', 'tokenId': '2131', 'tokenName': 'Cosmos Kidz #2131', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.011, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100798', 'collectionName': 'Cosmos Kidz', 'collectionCode': 'cosmoskidznft', 'contractAddress': '0x44e8c05bdaf35ad0ccb06a035359276edd87bebc', 'collectionImage': 'https://lh3.googleusercontent.com/S0xtEzo2q8rnZLxULnpkcKF1R4iLIWlCf2hy4CWI3miFPqN8841-jZzao2msZ1oFAp-HMus5tq4mzk1VDG_SUXHFP8NyTMikyGMt=s120', 'tokenId': '1121', 'tokenName': 'Cosmos Kidz #1121', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.01, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:18:00,401][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100798
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:18:00,670][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Cosmos Kidz #2131', 'Cosmos Kidz #1121'],[0.011, 0.01]
[2022-10-13 09:18:00,670][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Cosmos Kidz #2131', 'Cosmos Kidz #1121'],[0.011, 0.01]
[2022-10-13 09:18:00,681][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:18:00,682][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:18:00,682][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:18:00,682][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:18:00,682][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100799
}
[2022-10-13 09:18:00,683][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100799}
[2022-10-13 09:18:00,683][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100799
}
[2022-10-13 09:18:01,136][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:18:01,136][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100799
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:18:01,428][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:18:01,429][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:18:01,435][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:18:01,436][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:18:01,437][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:18:01,437][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:18:01,438][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100800
}
[2022-10-13 09:18:01,438][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100800}
[2022-10-13 09:18:01,438][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100800
}
[2022-10-13 09:18:01,887][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:18:01,888][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100800
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:18:02,148][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:18:02,148][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:18:02,152][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:18:02,153][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:18:02,153][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:18:02,154][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:18:02,154][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100801
}
[2022-10-13 09:18:02,154][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100801}
[2022-10-13 09:18:02,155][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100801
}
[2022-10-13 09:18:02,620][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:18:02,621][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100801
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:18:02,883][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:18:02,884][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:18:02,888][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:18:02,889][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:18:02,889][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:18:02,890][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:18:02,890][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100802
}
[2022-10-13 09:18:02,890][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100802}
[2022-10-13 09:18:02,891][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100802
}
[2022-10-13 09:18:03,356][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:18:03,356][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100802
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:18:03,629][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:18:03,629][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:18:03,633][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:18:03,634][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:18:03,635][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:18:03,635][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:18:03,635][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100803
}
[2022-10-13 09:18:03,635][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100803}
[2022-10-13 09:18:03,635][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100803
}
[2022-10-13 09:18:04,072][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100803', 'collectionName': 'Dark Horizon', 'collectionCode': 'darkhorizon', 'contractAddress': '0xd46814b736db3c6feed576a59e3ff140075c9e0a', 'collectionImage': 'https://lh3.googleusercontent.com/9iSDL5MJ6Ed_nnsTIj4XLE3r4HraM7mDeDbKfuZreVFu5ge-ntKedsLbt7d05vz6HzV5od9hQg6h90Gt8h7vtcK301MhyvdvqQUbcg=s120', 'tokenId': '4207', 'tokenName': 'Dark Horizon #4207', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.00432, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:18:04,072][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100803
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:18:04,337][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Dark Horizon #4207'],[0.00432]
[2022-10-13 09:18:04,338][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Dark Horizon #4207'],[0.00432]
[2022-10-13 09:18:04,343][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:18:04,344][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:18:04,345][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:18:04,345][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:18:04,345][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100804
}
[2022-10-13 09:18:04,345][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100804}
[2022-10-13 09:18:04,345][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100804
}
[2022-10-13 09:18:04,818][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100804', 'collectionName': 'Crypto Bears - By CBS', 'collectionCode': 'crypto-bears-by-cbs', 'contractAddress': '0x64e45f6735671b07390c34fe2af2054da12876f9', 'collectionImage': 'https://lh3.googleusercontent.com/odRr-s1wNbEISHvd0_xW0-gdCnOZMzB74T_LPN-oi1h0k9zMH6PooUoidYZrd7AarXZkf1DFO4IzwikrRKub_TKGuN0fEnJj5M-NpA=s120', 'tokenId': '1917', 'tokenName': 'Crypto Bears - By CBS #1917', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.09, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100804', 'collectionName': 'Crypto Bears - By CBS', 'collectionCode': 'crypto-bears-by-cbs', 'contractAddress': '0x64e45f6735671b07390c34fe2af2054da12876f9', 'collectionImage': 'https://lh3.googleusercontent.com/odRr-s1wNbEISHvd0_xW0-gdCnOZMzB74T_LPN-oi1h0k9zMH6PooUoidYZrd7AarXZkf1DFO4IzwikrRKub_TKGuN0fEnJj5M-NpA=s120', 'tokenId': '40', 'tokenName': 'Crypto Bears - By CBS #40', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0703125, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100804', 'collectionName': 'Crypto Bears - By CBS', 'collectionCode': 'crypto-bears-by-cbs', 'contractAddress': '0x64e45f6735671b07390c34fe2af2054da12876f9', 'collectionImage': 'https://lh3.googleusercontent.com/odRr-s1wNbEISHvd0_xW0-gdCnOZMzB74T_LPN-oi1h0k9zMH6PooUoidYZrd7AarXZkf1DFO4IzwikrRKub_TKGuN0fEnJj5M-NpA=s120', 'tokenId': '2238', 'tokenName': 'Crypto Bears - By CBS #2238', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.070335, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100804', 'collectionName': 'Crypto Bears - By CBS', 'collectionCode': 'crypto-bears-by-cbs', 'contractAddress': '0x64e45f6735671b07390c34fe2af2054da12876f9', 'collectionImage': 'https://lh3.googleusercontent.com/odRr-s1wNbEISHvd0_xW0-gdCnOZMzB74T_LPN-oi1h0k9zMH6PooUoidYZrd7AarXZkf1DFO4IzwikrRKub_TKGuN0fEnJj5M-NpA=s120', 'tokenId': '7237', 'tokenName': 'Crypto Bears - By CBS #7237', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0698625, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100804', 'collectionName': 'Crypto Bears - By CBS', 'collectionCode': 'crypto-bears-by-cbs', 'contractAddress': '0x64e45f6735671b07390c34fe2af2054da12876f9', 'collectionImage': 'https://lh3.googleusercontent.com/odRr-s1wNbEISHvd0_xW0-gdCnOZMzB74T_LPN-oi1h0k9zMH6PooUoidYZrd7AarXZkf1DFO4IzwikrRKub_TKGuN0fEnJj5M-NpA=s120', 'tokenId': '2458', 'tokenName': 'Crypto Bears - By CBS #2458', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.08, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100804', 'collectionName': 'Crypto Bears - By CBS', 'collectionCode': 'crypto-bears-by-cbs', 'contractAddress': '0x64e45f6735671b07390c34fe2af2054da12876f9', 'collectionImage': 'https://lh3.googleusercontent.com/odRr-s1wNbEISHvd0_xW0-gdCnOZMzB74T_LPN-oi1h0k9zMH6PooUoidYZrd7AarXZkf1DFO4IzwikrRKub_TKGuN0fEnJj5M-NpA=s120', 'tokenId': '4065', 'tokenName': 'Crypto Bears - By CBS #4065', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0695, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100804', 'collectionName': 'Crypto Bears - By CBS', 'collectionCode': 'crypto-bears-by-cbs', 'contractAddress': '0x64e45f6735671b07390c34fe2af2054da12876f9', 'collectionImage': 'https://lh3.googleusercontent.com/odRr-s1wNbEISHvd0_xW0-gdCnOZMzB74T_LPN-oi1h0k9zMH6PooUoidYZrd7AarXZkf1DFO4IzwikrRKub_TKGuN0fEnJj5M-NpA=s120', 'tokenId': '5901', 'tokenName': 'Crypto Bears - By CBS #5901', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.07, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100804', 'collectionName': 'Crypto Bears - By CBS', 'collectionCode': 'crypto-bears-by-cbs', 'contractAddress': '0x64e45f6735671b07390c34fe2af2054da12876f9', 'collectionImage': 'https://lh3.googleusercontent.com/odRr-s1wNbEISHvd0_xW0-gdCnOZMzB74T_LPN-oi1h0k9zMH6PooUoidYZrd7AarXZkf1DFO4IzwikrRKub_TKGuN0fEnJj5M-NpA=s120', 'tokenId': '731', 'tokenName': 'Crypto Bears - By CBS #731', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.077625, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:18:04,819][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100804
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:18:05,094][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Crypto Bears - By CBS #1917', 'Crypto Bears - By CBS #40', 'Crypto Bears - By CBS #2238', 'Crypto Bears - By CBS #7237', 'Crypto Bears - By CBS #2458', 'Crypto Bears - By CBS #4065', 'Crypto Bears - By CBS #5901', 'Crypto Bears - By CBS #731'],[0.09, 0.0703125, 0.070335, 0.0698625, 0.08, 0.0695, 0.07, 0.077625]
[2022-10-13 09:18:05,094][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Crypto Bears - By CBS #1917', 'Crypto Bears - By CBS #40', 'Crypto Bears - By CBS #2238', 'Crypto Bears - By CBS #7237', 'Crypto Bears - By CBS #2458', 'Crypto Bears - By CBS #4065', 'Crypto Bears - By CBS #5901', 'Crypto Bears - By CBS #731'],[0.09, 0.0703125, 0.070335, 0.0698625, 0.08, 0.0695, 0.07, 0.077625]
[2022-10-13 09:18:05,104][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:18:05,105][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:18:05,106][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:18:05,106][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:18:05,106][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100805
}
[2022-10-13 09:18:05,106][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100805}
[2022-10-13 09:18:05,106][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100805
}
[2022-10-13 09:18:05,563][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:18:05,563][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100805
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:18:05,850][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:18:05,850][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:18:05,856][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:18:05,856][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:18:05,857][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:18:05,857][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:18:05,857][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100806
}
[2022-10-13 09:18:05,857][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100806}
[2022-10-13 09:18:05,858][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100806
}
[2022-10-13 09:18:06,320][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100806', 'collectionName': 'Kindergarten BabyApes (KBA)', 'collectionCode': 'kbaofficial', 'contractAddress': '0x45359616610a584cc39aecdcbb2a457976780023', 'collectionImage': 'https://lh3.googleusercontent.com/taWDanyn_KhLCgJv73pXQ8anHcUr2v7oX4OSwfNK0dXR6ttgFziyrSjPR1p8sS5kW4TWL5ekx2T4Ycne_Z0vWfouEFebH76KRMctobE=s130', 'tokenId': '407', 'tokenName': 'Kindergarten BabyApes (KBA) #407', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.08, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100806', 'collectionName': 'Kindergarten BabyApes (KBA)', 'collectionCode': 'kbaofficial', 'contractAddress': '0x45359616610a584cc39aecdcbb2a457976780023', 'collectionImage': 'https://lh3.googleusercontent.com/taWDanyn_KhLCgJv73pXQ8anHcUr2v7oX4OSwfNK0dXR6ttgFziyrSjPR1p8sS5kW4TWL5ekx2T4Ycne_Z0vWfouEFebH76KRMctobE=s130', 'tokenId': '9218', 'tokenName': 'Kindergarten BabyApes (KBA) #9218', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.019, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100806', 'collectionName': 'Kindergarten BabyApes (KBA)', 'collectionCode': 'kbaofficial', 'contractAddress': '0x45359616610a584cc39aecdcbb2a457976780023', 'collectionImage': 'https://lh3.googleusercontent.com/taWDanyn_KhLCgJv73pXQ8anHcUr2v7oX4OSwfNK0dXR6ttgFziyrSjPR1p8sS5kW4TWL5ekx2T4Ycne_Z0vWfouEFebH76KRMctobE=s130', 'tokenId': '4228', 'tokenName': 'Kindergarten BabyApes (KBA) #4228', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.019, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:18:06,320][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100806
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:18:06,600][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Kindergarten BabyApes (KBA) #407', 'Kindergarten BabyApes (KBA) #9218', 'Kindergarten BabyApes (KBA) #4228'],[0.08, 0.019, 0.019]
[2022-10-13 09:18:06,601][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Kindergarten BabyApes (KBA) #407', 'Kindergarten BabyApes (KBA) #4228', 'Kindergarten BabyApes (KBA) #9218'],[0.08, 0.019, 0.019]
[2022-10-13 09:18:06,617][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:18:06,618][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:18:06,619][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:18:06,619][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:18:06,619][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100807
}
[2022-10-13 09:18:06,619][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100807}
[2022-10-13 09:18:06,620][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100807
}
[2022-10-13 09:18:07,064][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:18:07,064][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100807
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:18:07,343][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:18:07,343][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:18:07,347][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:18:07,348][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:18:07,348][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:18:07,348][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:18:07,349][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100808
}
[2022-10-13 09:18:07,349][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100808}
[2022-10-13 09:18:07,349][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100808
}
[2022-10-13 09:18:07,814][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:18:07,814][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100808
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:18:08,074][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:18:08,074][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:18:08,082][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:18:08,083][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:18:08,084][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:18:08,084][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:18:08,085][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100809
}
[2022-10-13 09:18:08,085][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100809}
[2022-10-13 09:18:08,085][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100809
}
[2022-10-13 09:18:08,503][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:18:08,504][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100809
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:18:08,773][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:18:08,773][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:18:08,778][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:18:08,778][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:18:08,779][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:18:08,779][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:18:08,779][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100810
}
[2022-10-13 09:18:08,779][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100810}
[2022-10-13 09:18:08,779][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100810
}
[2022-10-13 09:18:09,224][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:18:09,224][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100810
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:18:09,488][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:18:09,489][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:18:09,493][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:18:09,494][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:18:09,495][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:18:09,495][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:18:09,495][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100811
}
[2022-10-13 09:18:09,496][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100811}
[2022-10-13 09:18:09,496][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100811
}
[2022-10-13 09:18:09,944][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:18:09,945][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100811
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:18:10,220][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:18:10,221][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:18:10,227][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:18:10,228][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:18:10,228][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:18:10,228][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:18:10,229][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100812
}
[2022-10-13 09:18:10,229][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100812}
[2022-10-13 09:18:10,229][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100812
}
[2022-10-13 09:18:10,686][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:18:10,686][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100812
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:18:10,963][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:18:10,963][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:18:10,970][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:18:10,971][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:18:10,971][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:18:10,971][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:18:10,972][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100813
}
[2022-10-13 09:18:10,972][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100813}
[2022-10-13 09:18:10,972][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100813
}
[2022-10-13 09:18:11,431][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:18:11,432][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100813
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC
    limit 30
    
[2022-10-13 09:18:11,696][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:18:11,696][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:34,898][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:34,900][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:35,235][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:35,236][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:35,854][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:35,855][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:35,862][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:35,863][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:35,866][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:35,868][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:35,870][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 09:27:36,314][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[100104, 100105, 100106, 100107, 100108, 100109, 100110, 100111, 100112, 100113, 100114, 100115, 100116, 100117, 100118, 100119, 100120, 100121, 100122, 100123, 100124, 100125, 100126, 100127, 100128, 100129, 100130, 100131, 100132, 100133, 100134, 100135, 100136, 100137, 100138, 100139, 100140, 100141, 100142, 100143, 100144, 100145, 100146, 100147, 100148, 100149, 100150, 100151, 100152, 100153], start_index为：102
[2022-10-13 09:27:36,567][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:36,569][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:36,570][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:36,570][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:36,570][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100104
}
[2022-10-13 09:27:36,571][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100104}
[2022-10-13 09:27:36,571][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100104
}
[2022-10-13 09:27:37,086][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:37,087][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100104
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:37,379][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:37,380][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:37,387][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:37,389][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:37,389][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:37,389][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:37,390][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100105
}
[2022-10-13 09:27:37,390][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100105}
[2022-10-13 09:27:37,390][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100105
}
[2022-10-13 09:27:37,856][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:37,856][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100105
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:38,152][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:38,152][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:38,159][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:38,160][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:38,161][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:38,162][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:38,162][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100106
}
[2022-10-13 09:27:38,162][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100106}
[2022-10-13 09:27:38,163][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100106
}
[2022-10-13 09:27:38,621][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:38,621][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100106
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:38,915][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:38,915][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:38,923][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:38,924][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:38,925][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:38,925][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:38,926][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100107
}
[2022-10-13 09:27:38,926][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100107}
[2022-10-13 09:27:38,926][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100107
}
[2022-10-13 09:27:39,389][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:39,390][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100107
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:39,683][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:39,684][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:39,691][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:39,692][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:39,693][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:39,693][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:39,694][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100108
}
[2022-10-13 09:27:39,694][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100108}
[2022-10-13 09:27:39,694][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100108
}
[2022-10-13 09:27:40,152][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:40,153][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100108
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:40,457][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:40,457][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:40,466][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:40,467][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:40,467][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:40,467][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:40,468][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100109
}
[2022-10-13 09:27:40,468][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100109}
[2022-10-13 09:27:40,468][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100109
}
[2022-10-13 09:27:40,932][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100109', 'collectionName': 'HD Pass', 'collectionCode': 'hd-pass', 'contractAddress': '0x82f8b200758d2a5cd5d584e8ee06e4182526b0ae', 'collectionImage': 'https://openseauserdata.com/files/44cd62b46b8a2a385de76d16681da088.jpg', 'tokenId': '1', 'tokenName': 'HD Pass', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 1.188, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:27:40,933][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100109
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:41,247][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['HD Pass'],[1.188]
[2022-10-13 09:27:41,247][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['HD Pass'],[1.188]
[2022-10-13 09:27:41,256][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:41,257][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:41,258][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:41,258][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:41,259][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100110
}
[2022-10-13 09:27:41,259][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100110}
[2022-10-13 09:27:41,259][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100110
}
[2022-10-13 09:27:41,917][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:41,917][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100110
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:42,216][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:42,217][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:42,223][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:42,224][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:42,225][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:42,226][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:42,226][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100111
}
[2022-10-13 09:27:42,226][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100111}
[2022-10-13 09:27:42,226][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100111
}
[2022-10-13 09:27:42,685][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100111', 'collectionName': 'Dippies Vans', 'collectionCode': 'vansofficial', 'contractAddress': '0xe64a3314d1dc2fee6f446b70aae08cca1cb8e5e8', 'collectionImage': 'https://openseauserdata.com/files/1a7f6a741cb1b38809f64f4ff06f976c.gif', 'tokenId': '7841', 'tokenName': 'Dippies Vans #7841', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.007, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100111', 'collectionName': 'Dippies Vans', 'collectionCode': 'vansofficial', 'contractAddress': '0xe64a3314d1dc2fee6f446b70aae08cca1cb8e5e8', 'collectionImage': 'https://openseauserdata.com/files/1a7f6a741cb1b38809f64f4ff06f976c.gif', 'tokenId': '9483', 'tokenName': 'Dippies Vans #9483', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0076, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100111', 'collectionName': 'Dippies Vans', 'collectionCode': 'vansofficial', 'contractAddress': '0xe64a3314d1dc2fee6f446b70aae08cca1cb8e5e8', 'collectionImage': 'https://openseauserdata.com/files/1a7f6a741cb1b38809f64f4ff06f976c.gif', 'tokenId': '2040', 'tokenName': 'Dippies Vans #2040', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.012, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100111', 'collectionName': 'Dippies Vans', 'collectionCode': 'vansofficial', 'contractAddress': '0xe64a3314d1dc2fee6f446b70aae08cca1cb8e5e8', 'collectionImage': 'https://openseauserdata.com/files/1a7f6a741cb1b38809f64f4ff06f976c.gif', 'tokenId': '7040', 'tokenName': 'Dippies Vans #7040', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.013, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100111', 'collectionName': 'Dippies Vans', 'collectionCode': 'vansofficial', 'contractAddress': '0xe64a3314d1dc2fee6f446b70aae08cca1cb8e5e8', 'collectionImage': 'https://openseauserdata.com/files/1a7f6a741cb1b38809f64f4ff06f976c.gif', 'tokenId': '5199', 'tokenName': 'Dippies Vans #5199', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0145, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100111', 'collectionName': 'Dippies Vans', 'collectionCode': 'vansofficial', 'contractAddress': '0xe64a3314d1dc2fee6f446b70aae08cca1cb8e5e8', 'collectionImage': 'https://openseauserdata.com/files/1a7f6a741cb1b38809f64f4ff06f976c.gif', 'tokenId': '1627', 'tokenName': 'Dippies Vans #1627', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.079, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:27:42,686][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100111
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:42,999][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Dippies Vans #7841', 'Dippies Vans #9483', 'Dippies Vans #2040', 'Dippies Vans #7040', 'Dippies Vans #5199', 'Dippies Vans #1627'],[0.007, 0.0076, 0.012, 0.013, 0.0145, 0.079]
[2022-10-13 09:27:42,999][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Dippies Vans #7841', 'Dippies Vans #9483', 'Dippies Vans #2040', 'Dippies Vans #7040', 'Dippies Vans #5199', 'Dippies Vans #1627'],[0.007, 0.0076, 0.012, 0.013, 0.0145, 0.079]
[2022-10-13 09:27:43,009][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:43,010][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:43,011][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:43,011][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:43,011][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100112
}
[2022-10-13 09:27:43,011][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100112}
[2022-10-13 09:27:43,012][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100112
}
[2022-10-13 09:27:43,420][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:43,420][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100112
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:43,710][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:43,711][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:43,716][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:43,717][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:43,718][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:43,718][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:43,718][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100113
}
[2022-10-13 09:27:43,719][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100113}
[2022-10-13 09:27:43,719][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100113
}
[2022-10-13 09:27:44,138][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:44,138][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100113
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:44,431][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:44,431][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:44,438][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:44,439][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:44,440][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:44,440][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:44,440][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100114
}
[2022-10-13 09:27:44,440][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100114}
[2022-10-13 09:27:44,440][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100114
}
[2022-10-13 09:27:44,893][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:44,893][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100114
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:45,207][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:45,207][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:45,214][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:45,215][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:45,215][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:45,216][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:45,216][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100115
}
[2022-10-13 09:27:45,216][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100115}
[2022-10-13 09:27:45,217][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100115
}
[2022-10-13 09:27:45,684][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:45,685][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100115
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:45,976][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:45,976][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:45,982][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:45,983][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:45,984][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:45,984][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:45,984][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100116
}
[2022-10-13 09:27:45,984][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100116}
[2022-10-13 09:27:45,985][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100116
}
[2022-10-13 09:27:46,423][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:46,423][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100116
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:46,724][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:46,724][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:46,729][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:46,730][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:46,731][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:46,731][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:46,731][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100117
}
[2022-10-13 09:27:46,732][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100117}
[2022-10-13 09:27:46,732][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100117
}
[2022-10-13 09:27:47,194][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:47,195][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100117
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:47,498][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:47,498][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:47,502][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:47,503][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:47,503][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:47,503][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:47,504][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100118
}
[2022-10-13 09:27:47,504][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100118}
[2022-10-13 09:27:47,504][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100118
}
[2022-10-13 09:27:47,944][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:47,944][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100118
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:48,238][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:48,238][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:48,243][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:48,244][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:48,244][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:48,245][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:48,245][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100119
}
[2022-10-13 09:27:48,245][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100119}
[2022-10-13 09:27:48,245][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100119
}
[2022-10-13 09:27:48,689][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:48,690][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100119
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:48,993][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:48,994][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:49,002][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:49,004][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:49,004][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:49,005][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:49,005][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100120
}
[2022-10-13 09:27:49,005][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100120}
[2022-10-13 09:27:49,006][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100120
}
[2022-10-13 09:27:49,451][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:49,451][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100120
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:49,744][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:49,745][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:49,751][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:49,752][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:49,752][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:49,753][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:49,753][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100121
}
[2022-10-13 09:27:49,753][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100121}
[2022-10-13 09:27:49,753][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100121
}
[2022-10-13 09:27:50,172][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:50,172][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100121
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:50,465][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:50,466][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:50,471][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:50,472][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:50,473][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:50,473][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:50,473][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100122
}
[2022-10-13 09:27:50,473][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100122}
[2022-10-13 09:27:50,473][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100122
}
[2022-10-13 09:27:50,950][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100122', 'collectionName': 'Funky Flies Official', 'collectionCode': 'official-funky-flies', 'contractAddress': '0xc5a6afbe82eb9a119ac0d15392ca43b683ae8136', 'collectionImage': 'https://lh3.googleusercontent.com/lM7YSU8CuxUvFPaEWzDMjBPCVt7H_C9zsVZHzR6fj22X5ROO8fv4rfgJUxx1g1dIrgRLLYKxnNpNVgIUNh3UYsFmDJz2lLYAS4CLZy0=s120', 'tokenId': '4569', 'tokenName': 'Funky Flies Official #4569', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.05, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100122', 'collectionName': 'Funky Flies Official', 'collectionCode': 'official-funky-flies', 'contractAddress': '0xc5a6afbe82eb9a119ac0d15392ca43b683ae8136', 'collectionImage': 'https://lh3.googleusercontent.com/lM7YSU8CuxUvFPaEWzDMjBPCVt7H_C9zsVZHzR6fj22X5ROO8fv4rfgJUxx1g1dIrgRLLYKxnNpNVgIUNh3UYsFmDJz2lLYAS4CLZy0=s120', 'tokenId': '4141', 'tokenName': 'Funky Flies Official #4141', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.05, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100122', 'collectionName': 'Funky Flies Official', 'collectionCode': 'official-funky-flies', 'contractAddress': '0xc5a6afbe82eb9a119ac0d15392ca43b683ae8136', 'collectionImage': 'https://lh3.googleusercontent.com/lM7YSU8CuxUvFPaEWzDMjBPCVt7H_C9zsVZHzR6fj22X5ROO8fv4rfgJUxx1g1dIrgRLLYKxnNpNVgIUNh3UYsFmDJz2lLYAS4CLZy0=s120', 'tokenId': '177', 'tokenName': 'Funky Flies Official #177', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.05, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100122', 'collectionName': 'Funky Flies Official', 'collectionCode': 'official-funky-flies', 'contractAddress': '0xc5a6afbe82eb9a119ac0d15392ca43b683ae8136', 'collectionImage': 'https://lh3.googleusercontent.com/lM7YSU8CuxUvFPaEWzDMjBPCVt7H_C9zsVZHzR6fj22X5ROO8fv4rfgJUxx1g1dIrgRLLYKxnNpNVgIUNh3UYsFmDJz2lLYAS4CLZy0=s120', 'tokenId': '7401', 'tokenName': 'Funky Flies Official #7401', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0225, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100122', 'collectionName': 'Funky Flies Official', 'collectionCode': 'official-funky-flies', 'contractAddress': '0xc5a6afbe82eb9a119ac0d15392ca43b683ae8136', 'collectionImage': 'https://lh3.googleusercontent.com/lM7YSU8CuxUvFPaEWzDMjBPCVt7H_C9zsVZHzR6fj22X5ROO8fv4rfgJUxx1g1dIrgRLLYKxnNpNVgIUNh3UYsFmDJz2lLYAS4CLZy0=s120', 'tokenId': '794', 'tokenName': 'Funky Flies Official #794', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.035, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100122', 'collectionName': 'Funky Flies Official', 'collectionCode': 'official-funky-flies', 'contractAddress': '0xc5a6afbe82eb9a119ac0d15392ca43b683ae8136', 'collectionImage': 'https://lh3.googleusercontent.com/lM7YSU8CuxUvFPaEWzDMjBPCVt7H_C9zsVZHzR6fj22X5ROO8fv4rfgJUxx1g1dIrgRLLYKxnNpNVgIUNh3UYsFmDJz2lLYAS4CLZy0=s120', 'tokenId': '2389', 'tokenName': 'Funky Flies Official #2389', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.03, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100122', 'collectionName': 'Funky Flies Official', 'collectionCode': 'official-funky-flies', 'contractAddress': '0xc5a6afbe82eb9a119ac0d15392ca43b683ae8136', 'collectionImage': 'https://lh3.googleusercontent.com/lM7YSU8CuxUvFPaEWzDMjBPCVt7H_C9zsVZHzR6fj22X5ROO8fv4rfgJUxx1g1dIrgRLLYKxnNpNVgIUNh3UYsFmDJz2lLYAS4CLZy0=s120', 'tokenId': '5200', 'tokenName': 'Funky Flies Official #5200', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.019, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100122', 'collectionName': 'Funky Flies Official', 'collectionCode': 'official-funky-flies', 'contractAddress': '0xc5a6afbe82eb9a119ac0d15392ca43b683ae8136', 'collectionImage': 'https://lh3.googleusercontent.com/lM7YSU8CuxUvFPaEWzDMjBPCVt7H_C9zsVZHzR6fj22X5ROO8fv4rfgJUxx1g1dIrgRLLYKxnNpNVgIUNh3UYsFmDJz2lLYAS4CLZy0=s120', 'tokenId': '6701', 'tokenName': 'Funky Flies Official #6701', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.04, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100122', 'collectionName': 'Funky Flies Official', 'collectionCode': 'official-funky-flies', 'contractAddress': '0xc5a6afbe82eb9a119ac0d15392ca43b683ae8136', 'collectionImage': 'https://lh3.googleusercontent.com/lM7YSU8CuxUvFPaEWzDMjBPCVt7H_C9zsVZHzR6fj22X5ROO8fv4rfgJUxx1g1dIrgRLLYKxnNpNVgIUNh3UYsFmDJz2lLYAS4CLZy0=s120', 'tokenId': '5721', 'tokenName': 'Funky Flies Official #5721', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0112785, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100122', 'collectionName': 'Funky Flies Official', 'collectionCode': 'official-funky-flies', 'contractAddress': '0xc5a6afbe82eb9a119ac0d15392ca43b683ae8136', 'collectionImage': 'https://lh3.googleusercontent.com/lM7YSU8CuxUvFPaEWzDMjBPCVt7H_C9zsVZHzR6fj22X5ROO8fv4rfgJUxx1g1dIrgRLLYKxnNpNVgIUNh3UYsFmDJz2lLYAS4CLZy0=s120', 'tokenId': '1278', 'tokenName': 'Funky Flies Official #1278', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.1, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100122', 'collectionName': 'Funky Flies Official', 'collectionCode': 'official-funky-flies', 'contractAddress': '0xc5a6afbe82eb9a119ac0d15392ca43b683ae8136', 'collectionImage': 'https://lh3.googleusercontent.com/lM7YSU8CuxUvFPaEWzDMjBPCVt7H_C9zsVZHzR6fj22X5ROO8fv4rfgJUxx1g1dIrgRLLYKxnNpNVgIUNh3UYsFmDJz2lLYAS4CLZy0=s120', 'tokenId': '3030', 'tokenName': 'Funky Flies Official #3030', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.04, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100122', 'collectionName': 'Funky Flies Official', 'collectionCode': 'official-funky-flies', 'contractAddress': '0xc5a6afbe82eb9a119ac0d15392ca43b683ae8136', 'collectionImage': 'https://lh3.googleusercontent.com/lM7YSU8CuxUvFPaEWzDMjBPCVt7H_C9zsVZHzR6fj22X5ROO8fv4rfgJUxx1g1dIrgRLLYKxnNpNVgIUNh3UYsFmDJz2lLYAS4CLZy0=s120', 'tokenId': '5262', 'tokenName': 'Funky Flies Official #5262', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.03, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100122', 'collectionName': 'Funky Flies Official', 'collectionCode': 'official-funky-flies', 'contractAddress': '0xc5a6afbe82eb9a119ac0d15392ca43b683ae8136', 'collectionImage': 'https://lh3.googleusercontent.com/lM7YSU8CuxUvFPaEWzDMjBPCVt7H_C9zsVZHzR6fj22X5ROO8fv4rfgJUxx1g1dIrgRLLYKxnNpNVgIUNh3UYsFmDJz2lLYAS4CLZy0=s120', 'tokenId': '2589', 'tokenName': 'Funky Flies Official #2589', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.015, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:27:50,950][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100122
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:51,242][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Funky Flies Official #4569', 'Funky Flies Official #4141', 'Funky Flies Official #177', 'Funky Flies Official #7401', 'Funky Flies Official #794', 'Funky Flies Official #2389', 'Funky Flies Official #5200', 'Funky Flies Official #6701', 'Funky Flies Official #5721', 'Funky Flies Official #1278', 'Funky Flies Official #3030', 'Funky Flies Official #5262', 'Funky Flies Official #2589'],[0.05, 0.05, 0.05, 0.0225, 0.035, 0.03, 0.019, 0.04, 0.0112785, 0.1, 0.04, 0.03, 0.015]
[2022-10-13 09:27:51,243][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Funky Flies Official #4569', 'Funky Flies Official #4141', 'Funky Flies Official #177', 'Funky Flies Official #7401', 'Funky Flies Official #794', 'Funky Flies Official #2389', 'Funky Flies Official #5200', 'Funky Flies Official #6701', 'Funky Flies Official #5721', 'Funky Flies Official #1278', 'Funky Flies Official #3030', 'Funky Flies Official #5262', 'Funky Flies Official #2589'],[0.05, 0.05, 0.05, 0.0225, 0.035, 0.03, 0.019, 0.04, 0.0112785, 0.1, 0.04, 0.03, 0.015]
[2022-10-13 09:27:51,257][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:51,258][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:51,258][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:51,258][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:51,258][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100123
}
[2022-10-13 09:27:51,258][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100123}
[2022-10-13 09:27:51,258][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100123
}
[2022-10-13 09:27:51,711][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100123', 'collectionName': 'FlavaTools', 'collectionCode': 'flavatools', 'contractAddress': '0x3a65e10a544379ee6927053b6710a3f6393de76c', 'collectionImage': 'https://lh3.googleusercontent.com/2ZYYLgcPxG5JtxqF_prycd69eDafbqC_5zfK4n4c4otIuz6lhOMtw1QU9AB0zlriSPcHcCdHBlF7yoYZgLwbSGRHXvn1ZUNBmiZn=s120', 'tokenId': '382', 'tokenName': 'FlavaTools #382', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.155, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:27:51,712][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100123
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:52,005][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['FlavaTools #382'],[0.155]
[2022-10-13 09:27:52,006][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['FlavaTools #382'],[0.155]
[2022-10-13 09:27:52,013][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:52,015][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:52,016][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:52,016][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:52,016][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100124
}
[2022-10-13 09:27:52,016][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100124}
[2022-10-13 09:27:52,017][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100124
}
[2022-10-13 09:27:52,460][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:52,461][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100124
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:52,779][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:52,779][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:52,788][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:52,789][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:52,790][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:52,790][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:52,790][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100125
}
[2022-10-13 09:27:52,791][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100125}
[2022-10-13 09:27:52,791][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100125
}
[2022-10-13 09:27:53,211][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:53,211][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100125
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:53,526][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:53,527][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:53,531][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:53,532][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:53,532][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:53,532][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:53,532][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100126
}
[2022-10-13 09:27:53,533][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100126}
[2022-10-13 09:27:53,533][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100126
}
[2022-10-13 09:27:53,971][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:53,972][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100126
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:54,271][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:54,271][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:54,277][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:54,278][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:54,279][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:54,279][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:54,279][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100127
}
[2022-10-13 09:27:54,279][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100127}
[2022-10-13 09:27:54,279][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100127
}
[2022-10-13 09:27:54,688][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:54,689][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100127
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:54,991][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:54,991][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:54,997][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:54,998][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:54,999][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:54,999][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:55,000][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100128
}
[2022-10-13 09:27:55,000][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100128}
[2022-10-13 09:27:55,000][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100128
}
[2022-10-13 09:27:55,455][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:55,455][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100128
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:55,747][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:55,748][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:55,758][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:55,759][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:55,760][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:55,760][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:55,761][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100129
}
[2022-10-13 09:27:55,761][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100129}
[2022-10-13 09:27:55,761][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100129
}
[2022-10-13 09:27:56,216][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:56,216][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100129
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:56,521][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:56,521][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:56,528][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:56,529][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:56,529][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:56,529][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:56,530][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100130
}
[2022-10-13 09:27:56,530][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100130}
[2022-10-13 09:27:56,530][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100130
}
[2022-10-13 09:27:56,963][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:56,963][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100130
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:57,287][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:57,287][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:57,295][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:57,296][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:57,296][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:57,296][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:57,296][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100131
}
[2022-10-13 09:27:57,296][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100131}
[2022-10-13 09:27:57,297][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100131
}
[2022-10-13 09:27:57,737][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:57,738][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100131
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:58,030][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:58,030][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:58,035][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:58,037][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:58,037][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:58,037][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:58,038][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100132
}
[2022-10-13 09:27:58,038][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100132}
[2022-10-13 09:27:58,038][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100132
}
[2022-10-13 09:27:58,486][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:58,486][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100132
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:58,823][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:58,824][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:58,828][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:58,829][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:58,829][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:58,829][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:58,829][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100133
}
[2022-10-13 09:27:58,829][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100133}
[2022-10-13 09:27:58,829][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100133
}
[2022-10-13 09:27:59,280][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:27:59,280][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100133
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:27:59,627][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:27:59,627][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:27:59,632][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:27:59,632][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:27:59,633][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:27:59,633][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:27:59,633][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100134
}
[2022-10-13 09:27:59,633][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100134}
[2022-10-13 09:27:59,633][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100134
}
[2022-10-13 09:28:00,095][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100134', 'collectionName': 'Moonshot by Violetta Zironi', 'collectionCode': 'moonshot-music-nft', 'contractAddress': '0x70be4e3761188d0a8c525e54bb81c4ea97712de4', 'collectionImage': 'https://lh3.googleusercontent.com/gw5-rmQ0588MNHbDp6IvCXzkbfKDEQuSvqDcpTQ_S1GD6Ait_L7fz9w_FPtw3IjfVnLDJpCq-0JIH3QSLiUXXCYxBDZmlGJeFIs6kA=s120', 'tokenId': '768', 'tokenName': 'Moonshot by Violetta Zironi #768', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.25, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:28:00,096][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100134
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:00,403][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Moonshot by Violetta Zironi #768'],[0.25]
[2022-10-13 09:28:00,404][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Moonshot by Violetta Zironi #768'],[0.25]
[2022-10-13 09:28:00,410][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:00,411][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:00,411][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:00,411][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:00,411][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100135
}
[2022-10-13 09:28:00,411][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100135}
[2022-10-13 09:28:00,412][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100135
}
[2022-10-13 09:28:00,846][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:28:00,846][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100135
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:01,151][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:28:01,151][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:28:01,155][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:01,156][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:01,157][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:01,157][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:01,157][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100136
}
[2022-10-13 09:28:01,157][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100136}
[2022-10-13 09:28:01,157][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100136
}
[2022-10-13 09:28:01,598][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:28:01,598][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100136
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:01,894][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:28:01,894][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:28:01,899][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:01,900][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:01,900][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:01,900][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:01,901][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100137
}
[2022-10-13 09:28:01,901][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100137}
[2022-10-13 09:28:01,901][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100137
}
[2022-10-13 09:28:02,359][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:28:02,359][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100137
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:02,656][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:28:02,656][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:28:02,662][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:02,663][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:02,664][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:02,664][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:02,665][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100138
}
[2022-10-13 09:28:02,665][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100138}
[2022-10-13 09:28:02,665][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100138
}
[2022-10-13 09:28:03,115][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:28:03,116][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100138
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:03,411][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:28:03,412][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:28:03,421][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:03,423][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:03,424][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:03,424][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:03,424][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100139
}
[2022-10-13 09:28:03,425][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100139}
[2022-10-13 09:28:03,425][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100139
}
[2022-10-13 09:28:03,876][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:28:03,876][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100139
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:04,169][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:28:04,170][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:28:04,178][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:04,179][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:04,180][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:04,180][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:04,181][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100140
}
[2022-10-13 09:28:04,181][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100140}
[2022-10-13 09:28:04,181][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100140
}
[2022-10-13 09:28:04,634][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:28:04,635][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100140
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:04,951][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:28:04,951][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:28:04,970][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:04,973][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:04,974][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:04,975][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:04,975][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100141
}
[2022-10-13 09:28:04,976][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100141}
[2022-10-13 09:28:04,976][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100141
}
[2022-10-13 09:28:05,418][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:28:05,418][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100141
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:05,729][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:28:05,730][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:28:05,736][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:05,737][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:05,737][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:05,737][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:05,738][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100142
}
[2022-10-13 09:28:05,738][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100142}
[2022-10-13 09:28:05,738][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100142
}
[2022-10-13 09:28:06,186][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:28:06,186][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100142
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:06,507][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:28:06,507][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:28:06,514][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:06,515][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:06,516][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:06,516][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:06,516][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100143
}
[2022-10-13 09:28:06,516][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100143}
[2022-10-13 09:28:06,516][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100143
}
[2022-10-13 09:28:06,960][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100143', 'collectionName': 'The Other Avatars by Saatchi Art', 'collectionCode': 'the-other-avatars-by-saatchi-art', 'contractAddress': '0x83ddafaa7f037c4fa7e1c47f91adac2f0eaf1bb5', 'collectionImage': 'https://lh3.googleusercontent.com/jD8Q33X5-hzf_tqoe1ffyBeRq8sbhDB1PQ9IPw_dE8ng-qvtcU4zEwIRquKwMcdqh23Lso98uMI-xV8P5-tFfki-3mW2HrFbqMkF8w=s120', 'tokenId': '2322', 'tokenName': 'The Other Avatars by Saatchi Art #2322', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.08, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:28:06,960][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100143
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:07,273][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['The Other Avatars by Saatchi Art #2322'],[0.08]
[2022-10-13 09:28:07,273][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['The Other Avatars by Saatchi Art #2322'],[0.08]
[2022-10-13 09:28:07,282][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:07,283][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:07,283][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:07,283][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:07,283][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100144
}
[2022-10-13 09:28:07,284][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100144}
[2022-10-13 09:28:07,284][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100144
}
[2022-10-13 09:28:07,727][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:28:07,727][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100144
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:08,025][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:28:08,025][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:28:08,032][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:08,033][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:08,033][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:08,033][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:08,034][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100145
}
[2022-10-13 09:28:08,034][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100145}
[2022-10-13 09:28:08,034][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100145
}
[2022-10-13 09:28:08,474][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100145', 'collectionName': 'Kenkyo: Genesis', 'collectionCode': 'officialkenkyo', 'contractAddress': '0x58091d4c4f8f37a103789dc0341616717a6f31cf', 'collectionImage': 'https://lh3.googleusercontent.com/2mG_zxtPUsRa4ddf7VNX-WhPSchPgvh2ctdh2FAAc4GVu9MpCV6CyIPSeC_SKXKAA70za7bjkHHALNqIIBmidisFfUOqbnf46XJQ=s120', 'tokenId': '689', 'tokenName': 'Kenkyo: Genesis #689', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.044895, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:28:08,474][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100145
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:08,765][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Kenkyo: Genesis #689'],[0.044895]
[2022-10-13 09:28:08,765][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Kenkyo: Genesis #689'],[0.044895]
[2022-10-13 09:28:08,771][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:08,771][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:08,772][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:08,772][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:08,772][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100146
}
[2022-10-13 09:28:08,772][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100146}
[2022-10-13 09:28:08,773][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100146
}
[2022-10-13 09:28:09,199][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:28:09,199][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100146
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:09,492][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:28:09,492][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:28:09,500][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:09,501][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:09,501][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:09,501][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:09,502][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100147
}
[2022-10-13 09:28:09,502][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100147}
[2022-10-13 09:28:09,502][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100147
}
[2022-10-13 09:28:09,943][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:28:09,943][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100147
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:10,234][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:28:10,234][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:28:10,239][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:10,241][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:10,241][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:10,241][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:10,241][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100148
}
[2022-10-13 09:28:10,241][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100148}
[2022-10-13 09:28:10,242][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100148
}
[2022-10-13 09:28:10,694][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:28:10,718][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100148
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:11,017][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:28:11,017][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:28:11,022][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:11,023][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:11,024][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:11,024][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:11,024][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100149
}
[2022-10-13 09:28:11,024][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100149}
[2022-10-13 09:28:11,024][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100149
}
[2022-10-13 09:28:11,465][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:28:11,466][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100149
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:11,769][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:28:11,769][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:28:11,775][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:11,776][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:11,776][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:11,776][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:11,776][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100150
}
[2022-10-13 09:28:11,777][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100150}
[2022-10-13 09:28:11,777][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100150
}
[2022-10-13 09:28:12,207][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:28:12,207][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100150
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:12,512][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:28:12,512][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:28:12,518][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:12,519][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:12,520][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:12,520][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:12,521][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100151
}
[2022-10-13 09:28:12,521][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100151}
[2022-10-13 09:28:12,521][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100151
}
[2022-10-13 09:28:12,955][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:28:12,955][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100151
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:13,252][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:28:13,253][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:28:13,261][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:13,262][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:13,262][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:13,262][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:13,262][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100152
}
[2022-10-13 09:28:13,263][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100152}
[2022-10-13 09:28:13,263][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100152
}
[2022-10-13 09:28:13,701][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': []}
[2022-10-13 09:28:13,701][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100152
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:13,997][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：[],[]
[2022-10-13 09:28:13,998][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：[],[]
[2022-10-13 09:28:14,003][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 09:28:14,003][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 09:28:14,004][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/recentTransactions/app
[2022-10-13 09:28:14,004][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 09:28:14,005][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100153
}
[2022-10-13 09:28:14,005][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100153}
[2022-10-13 09:28:14,005][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100153
}
[2022-10-13 09:28:14,439][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'id': None, 'tokenUuid': None, 'collectionUuid': '100153', 'collectionName': 'Smart Beast Circle', 'collectionCode': 'smartbeastcircle', 'contractAddress': '0x592ee9695b18c38d4c99567633ffa23823a7eac2', 'collectionImage': 'https://lh3.googleusercontent.com/q7wZ5QudKaZtXD5JJWl2amhqrSsGy8q6mAk_2WwsSiClsHg_4tiygtvQ6Qe1UCutRCzWTECCKKCl8y65WCZxMcMjbI0Ks74Lm-ff6g=s120', 'tokenId': '237', 'tokenName': 'Smart Beast Circle #237', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.06075, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100153', 'collectionName': 'Smart Beast Circle', 'collectionCode': 'smartbeastcircle', 'contractAddress': '0x592ee9695b18c38d4c99567633ffa23823a7eac2', 'collectionImage': 'https://lh3.googleusercontent.com/q7wZ5QudKaZtXD5JJWl2amhqrSsGy8q6mAk_2WwsSiClsHg_4tiygtvQ6Qe1UCutRCzWTECCKKCl8y65WCZxMcMjbI0Ks74Lm-ff6g=s120', 'tokenId': '1378', 'tokenName': 'Smart Beast Circle #1378', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.164, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100153', 'collectionName': 'Smart Beast Circle', 'collectionCode': 'smartbeastcircle', 'contractAddress': '0x592ee9695b18c38d4c99567633ffa23823a7eac2', 'collectionImage': 'https://lh3.googleusercontent.com/q7wZ5QudKaZtXD5JJWl2amhqrSsGy8q6mAk_2WwsSiClsHg_4tiygtvQ6Qe1UCutRCzWTECCKKCl8y65WCZxMcMjbI0Ks74Lm-ff6g=s120', 'tokenId': '968', 'tokenName': 'Smart Beast Circle #968', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.164, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100153', 'collectionName': 'Smart Beast Circle', 'collectionCode': 'smartbeastcircle', 'contractAddress': '0x592ee9695b18c38d4c99567633ffa23823a7eac2', 'collectionImage': 'https://lh3.googleusercontent.com/q7wZ5QudKaZtXD5JJWl2amhqrSsGy8q6mAk_2WwsSiClsHg_4tiygtvQ6Qe1UCutRCzWTECCKKCl8y65WCZxMcMjbI0Ks74Lm-ff6g=s120', 'tokenId': '988', 'tokenName': 'Smart Beast Circle #988', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.0655, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100153', 'collectionName': 'Smart Beast Circle', 'collectionCode': 'smartbeastcircle', 'contractAddress': '0x592ee9695b18c38d4c99567633ffa23823a7eac2', 'collectionImage': 'https://lh3.googleusercontent.com/q7wZ5QudKaZtXD5JJWl2amhqrSsGy8q6mAk_2WwsSiClsHg_4tiygtvQ6Qe1UCutRCzWTECCKKCl8y65WCZxMcMjbI0Ks74Lm-ff6g=s120', 'tokenId': '1179', 'tokenName': 'Smart Beast Circle #1179', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.06, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}, {'id': None, 'tokenUuid': None, 'collectionUuid': '100153', 'collectionName': 'Smart Beast Circle', 'collectionCode': 'smartbeastcircle', 'contractAddress': '0x592ee9695b18c38d4c99567633ffa23823a7eac2', 'collectionImage': 'https://lh3.googleusercontent.com/q7wZ5QudKaZtXD5JJWl2amhqrSsGy8q6mAk_2WwsSiClsHg_4tiygtvQ6Qe1UCutRCzWTECCKKCl8y65WCZxMcMjbI0Ks74Lm-ff6g=s120', 'tokenId': '819', 'tokenName': 'Smart Beast Circle #819', 'tokenSymbol': None, 'tokenImage': None, 'tokenDescribe': None, 'tokenDecimal': None, 'metaData': None, 'listingPrice': None, 'transactionJson': None, 'lastPrice': 0.08499, 'lastButOnePrice': None, 'lastGasPrice': None, 'lastButOneGasPrice': None, 'mintDate': None, 'chainType': 'ETH', 'protocolType': None, 'isSale': None, 'currentOwner': None}]}
[2022-10-13 09:28:14,440][db.py 39][INFO]: 查询的sql为：
    select collection_name, transaction_price
        from(
        SELECT
            case protocol_type
                when 'ERC1155' then collection_name
                when 'ERC721' then CONCAT( collection_name , ' #' , token_id)
            end collection_name,
            time_stamp, collection_uuid, event, transaction_price, id, rank() over(partition by token_id
        order by
            time_stamp desc,
            id desc)rk
        from
            `hk-chaindata-new`.chain_collection_nft_activity
        where
            collection_uuid = 100153
            and event = 'SALE'
        )a
    where a.rk = 1
    order by time_stamp DESC, id desc
    limit 30
    
[2022-10-13 09:28:14,737][test_data_calculate.py 128][INFO]: 最近交易列表测试数据接口返回：['Smart Beast Circle #237', 'Smart Beast Circle #1378', 'Smart Beast Circle #968', 'Smart Beast Circle #988', 'Smart Beast Circle #1179', 'Smart Beast Circle #819'],[0.06075, 0.164, 0.164, 0.0655, 0.06, 0.08499]
[2022-10-13 09:28:14,737][test_data_calculate.py 129][INFO]: 最近交易列表测试数据sql查询：['Smart Beast Circle #237', 'Smart Beast Circle #1378', 'Smart Beast Circle #968', 'Smart Beast Circle #988', 'Smart Beast Circle #1179', 'Smart Beast Circle #819'],[0.06075, 0.164, 0.164, 0.0655, 0.06, 0.08499]
[2022-10-13 10:03:12,053][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:03:12,055][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:03:12,373][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:03:12,374][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:03:12,924][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:03:12,925][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:03:12,936][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:03:12,936][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:03:12,939][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:03:12,940][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:03:12,944][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 10:03:13,309][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[102388, 102389, 102390, 102391, 102392, 102393, 102394, 102395, 102396, 102397, 102399, 102400, 102401, 102402, 102403, 102404, 102405, 102406, 102407, 102408, 102410, 102411, 102412, 102414, 102415, 102416, 102417, 102418, 102419, 102420, 102421, 102422, 102423, 102424, 102425, 102426, 102427, 102428, 102429, 102430, 102431, 102432, 102433, 102434, 102435, 102436, 102437, 102438, 102439, 102440], start_index为：2253
[2022-10-13 10:03:13,360][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 10:03:13,360][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 10:03:13,360][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008
}
[2022-10-13 10:03:13,361][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008}
[2022-10-13 10:03:13,361][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008
}
[2022-10-13 10:03:13,923][base_api.py 21][INFO]: 接口返回数据 ==>> {'timestamp': '2022-10-13T02:03:15.893+00:00', 'status': 400, 'error': 'Bad Request', 'message': '', 'path': '/collection/floorPriceChart/app'}
[2022-10-13 10:06:24,361][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:06:24,361][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:06:24,690][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:06:24,691][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:06:25,156][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:06:25,156][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:06:25,162][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:06:25,163][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:06:25,164][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:06:25,165][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:06:25,168][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 10:06:25,535][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[102713, 102715, 102716, 102717, 102718, 102719, 102720, 102721, 102723, 102724, 102725, 102726, 102727, 102728, 102729, 102731, 102732, 102733, 102735, 102736, 102737, 102738, 102739, 102741, 102743, 102744, 102745, 102746, 102747, 102748, 102749, 102751, 102752, 102754, 102755, 102756, 102757, 102758, 102759, 102761, 102762, 102764, 102765, 102766, 102767, 102768, 102769, 102770, 102771, 102772], start_index为：2557
[2022-10-13 10:06:25,581][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 10:06:25,582][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 10:06:25,582][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 10:06:25,582][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_DAY'}
[2022-10-13 10:06:25,582][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 10:06:26,046][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.3, 'avgPrice': 15.93701079, 'date': '2022-10-12 03:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 04:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 06:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 08:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 10:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 12:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 14:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 16:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93092087, 'date': '2022-10-12 18:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 20:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 22:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93046246, 'date': '2022-10-13 00:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 02:00', 'showTime': True}]}
[2022-10-13 10:23:40,459][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:23:40,459][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:23:40,845][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:23:40,847][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:23:41,342][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:23:41,343][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:23:41,349][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:23:41,349][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:23:41,352][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:23:41,353][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:23:41,354][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 10:23:41,810][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[101883, 101884, 101885, 101886, 101887, 101888, 101889, 101890, 101891, 101892, 101893, 101894, 101895, 101896, 101897, 101899, 101900, 101901, 101903, 101904, 101905, 101906, 101907, 101908, 101909, 101910, 101911, 101912, 101913, 101914, 101915, 101916, 101917, 101918, 101919, 101920, 101921, 101922, 101923, 101924, 101925, 101926, 101927, 101928, 101929, 101930, 101931, 101932, 101934, 101935], start_index为：1785
[2022-10-13 10:23:41,862][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:23:41,864][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:23:41,864][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/heatMap/app
[2022-10-13 10:23:41,864][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 10:23:41,865][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "dataNum": 20,
    "timeRange": "ONE_DAY"
}
[2022-10-13 10:23:41,865][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'dataNum': 20, 'timeRange': 'ONE_DAY'}
[2022-10-13 10:23:41,865][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "dataNum": 20,
    "timeRange": "ONE_DAY"
}
[2022-10-13 10:23:42,366][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': {'riseNum': 10, 'fallNum': 10, 'riseList': [{'collectionUuid': 101013, 'name': 'VeeFriends', 'volume': 1436796.54, 'quoteChange': 188.4452}, {'collectionUuid': 102761, 'name': 'RENGA Black Box', 'volume': 238929.9, 'quoteChange': 1.922}, {'collectionUuid': 102441, 'name': 'Forgotten Runes Warriors Guild', 'volume': 144792.54, 'quoteChange': 8.4457}, {'collectionUuid': 101021, 'name': 'BEANZ Official', 'volume': 128252.14, 'quoteChange': 0.5163}, {'collectionUuid': 100317, 'name': 'OG:Crystals', 'volume': 98846.19, 'quoteChange': 17.262}, {'collectionUuid': 101009, 'name': 'Loot (for Adventurers)', 'volume': 83902.34, 'quoteChange': 42.4342}, {'collectionUuid': 101015, 'name': 'Cool Cats NFT', 'volume': 81950.18, 'quoteChange': 0.4091}, {'collectionUuid': 101049, 'name': 'Prime Ape Planet PAP', 'volume': 73282.18, 'quoteChange': 26.6164}, {'collectionUuid': 101043, 'name': 'Creepz Genesis', 'volume': 57142.97, 'quoteChange': 0.8486}, {'collectionUuid': 101033, 'name': 'CyberBrokers', 'volume': 53674.55, 'quoteChange': 1.3212}], 'fallList': [{'collectionUuid': 102185, 'name': 'Dreadfulz', 'volume': 10496059.2, 'quoteChange': -0.1931}, {'collectionUuid': 101003, 'name': 'Mutant Ape Yacht Club', 'volume': 343738.88, 'quoteChange': -0.6829}, {'collectionUuid': 101000, 'name': 'Bored Ape Yacht Club', 'volume': 279252.73, 'quoteChange': -0.8896}, {'collectionUuid': 101011, 'name': 'Doodles', 'volume': 92616.32, 'quoteChange': -0.6885}, {'collectionUuid': 101007, 'name': 'Moonbirds', 'volume': 79913.17, 'quoteChange': -0.381}, {'collectionUuid': 101065, 'name': 'Adam Bomb Squad', 'volume': 44951.81, 'quoteChange': -0.1974}, {'collectionUuid': 100392, 'name': "Sneaky's Internet Friends", 'volume': 29856.85, 'quoteChange': -0.729}, {'collectionUuid': 101041, 'name': 'V1 CryptoPunks Wrapped', 'volume': 23011.98, 'quoteChange': -0.5345}, {'collectionUuid': 101669, 'name': 'The Plague NFT', 'volume': 12483.98, 'quoteChange': -0.119}, {'collectionUuid': 102479, 'name': 'Lil Pudgys', 'volume': 11635.24, 'quoteChange': -0.652}]}}
[2022-10-13 10:23:42,366][db.py 39][INFO]: 查询的sql为：
        SELECT count(*) rise_count FROM `hk-manhattan`.chain_collection_statistics 
        WHERE date_type=0 AND volume_change>0
    
[2022-10-13 10:23:42,624][db.py 39][INFO]: 查询的sql为：
        SELECT count(*) fall_count FROM `hk-manhattan`.chain_collection_statistics 
        WHERE date_type=0 AND volume_change<0
     
[2022-10-13 10:23:42,885][db.py 39][INFO]: 查询的sql为：
        SELECT collect_name, volume_change, volume FROM `hk-manhattan`.chain_collection_statistics 
        WHERE date_type=0 AND volume_change>0 ORDER BY volume desc limit 18
    
[2022-10-13 10:23:43,142][db.py 39][INFO]: 查询的sql为：
        SELECT collect_name, volume_change, volume FROM `hk-manhattan`.chain_collection_statistics 
        WHERE date_type=0 AND volume_change<0 ORDER BY volume desc limit 2
    
[2022-10-13 10:23:43,407][db.py 39][INFO]: 查询的sql为：
        select last_price  from `hk-manhattan`.token_last_price where token_type = 'ETH' and unit = 'USD' order by create_time 
        desc limit 1
    
[2022-10-13 10:23:43,662][test_data_calculate.py 116][INFO]: 热力图测试数据接口返回：[{'collectionUuid': 101013, 'name': 'VeeFriends', 'volume': 1436796.54, 'quoteChange': 188.4452}, {'collectionUuid': 102761, 'name': 'RENGA Black Box', 'volume': 238929.9, 'quoteChange': 1.922}, {'collectionUuid': 102441, 'name': 'Forgotten Runes Warriors Guild', 'volume': 144792.54, 'quoteChange': 8.4457}, {'collectionUuid': 101021, 'name': 'BEANZ Official', 'volume': 128252.14, 'quoteChange': 0.5163}, {'collectionUuid': 100317, 'name': 'OG:Crystals', 'volume': 98846.19, 'quoteChange': 17.262}, {'collectionUuid': 101009, 'name': 'Loot (for Adventurers)', 'volume': 83902.34, 'quoteChange': 42.4342}, {'collectionUuid': 101015, 'name': 'Cool Cats NFT', 'volume': 81950.18, 'quoteChange': 0.4091}, {'collectionUuid': 101049, 'name': 'Prime Ape Planet PAP', 'volume': 73282.18, 'quoteChange': 26.6164}, {'collectionUuid': 101043, 'name': 'Creepz Genesis', 'volume': 57142.97, 'quoteChange': 0.8486}, {'collectionUuid': 101033, 'name': 'CyberBrokers', 'volume': 53674.55, 'quoteChange': 1.3212}]
[2022-10-13 10:23:43,662][test_data_calculate.py 117][INFO]: 热力图测试数据sql查询：[{'collect_name': 'Moonbirds Oddities', 'volume_change': Decimal('3.30380000'), 'volume': Decimal('72.92043000')}, {'collect_name': 'Rare Apepe YC', 'volume_change': Decimal('0.54930000'), 'volume': Decimal('18.33170000')}, {'collect_name': 'Webaverse Genesis Pass', 'volume_change': Decimal('4.67450000'), 'volume': Decimal('13.56970000')}]
[2022-10-13 10:23:43,851][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:23:43,852][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:23:43,852][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/heatMap/app
[2022-10-13 10:23:43,852][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 10:23:43,853][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "dataNum": 20,
    "timeRange": "ONE_WEEK"
}
[2022-10-13 10:23:43,853][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'dataNum': 20, 'timeRange': 'ONE_WEEK'}
[2022-10-13 10:23:43,853][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "dataNum": 20,
    "timeRange": "ONE_WEEK"
}
[2022-10-13 10:23:44,333][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': {'riseNum': 10, 'fallNum': 10, 'riseList': [{'collectionUuid': 102185, 'name': 'Dreadfulz', 'volume': 63228590.95, 'quoteChange': 0.0114}, {'collectionUuid': 101010, 'name': 'Decentraland LAND', 'volume': 34513560.07, 'quoteChange': 15165.9651}, {'collectionUuid': 101000, 'name': 'Bored Ape Yacht Club', 'volume': 18883757.29, 'quoteChange': 0.3109}, {'collectionUuid': 101003, 'name': 'Mutant Ape Yacht Club', 'volume': 13047458.11, 'quoteChange': 2.2704}, {'collectionUuid': 101008, 'name': 'Azuki', 'volume': 8313998.57, 'quoteChange': 7.1036}, {'collectionUuid': 101582, 'name': 'Genesis Box', 'volume': 8147003.98, 'quoteChange': 6.4448}, {'collectionUuid': 102313, 'name': 'Finiliar', 'volume': 1910544.15, 'quoteChange': 25.6141}, {'collectionUuid': 101013, 'name': 'VeeFriends', 'volume': 1689992.81, 'quoteChange': 9.5432}, {'collectionUuid': 101015, 'name': 'Cool Cats NFT', 'volume': 1646793.0, 'quoteChange': 2.8534}, {'collectionUuid': 101014, 'name': 'Bored Ape Kennel Club', 'volume': 1588166.18, 'quoteChange': 2.88}], 'fallList': [{'collectionUuid': 101043, 'name': 'Creepz Genesis', 'volume': 5302308.37, 'quoteChange': -0.1653}, {'collectionUuid': 101011, 'name': 'Doodles', 'volume': 1683508.37, 'quoteChange': -0.5265}, {'collectionUuid': 102534, 'name': 'The Band Bears', 'volume': 1667691.86, 'quoteChange': -0.3838}, {'collectionUuid': 102761, 'name': 'RENGA Black Box', 'volume': 1516588.01, 'quoteChange': -0.8313}, {'collectionUuid': 101028, 'name': 'Nouns', 'volume': 836415.82, 'quoteChange': -0.3568}, {'collectionUuid': 102410, 'name': 'Urbit ID', 'volume': 258707.51, 'quoteChange': -0.5802}, {'collectionUuid': 102399, 'name': 'We Are All Going to Die', 'volume': 233880.21, 'quoteChange': -0.3983}, {'collectionUuid': 101539, 'name': 'The Art of Seasons', 'volume': 197348.1, 'quoteChange': -0.8486}, {'collectionUuid': 101030, 'name': 'Pudgy Penguins', 'volume': 192082.57, 'quoteChange': -0.5097}, {'collectionUuid': 101020, 'name': 'CyberKongz', 'volume': 188216.58, 'quoteChange': -0.347}]}}
[2022-10-13 10:23:44,334][db.py 39][INFO]: 查询的sql为：
        SELECT count(*) rise_count FROM `hk-manhattan`.chain_collection_statistics 
        WHERE date_type=1 AND volume_change>0
    
[2022-10-13 10:23:44,593][db.py 39][INFO]: 查询的sql为：
        SELECT count(*) fall_count FROM `hk-manhattan`.chain_collection_statistics 
        WHERE date_type=1 AND volume_change<0
     
[2022-10-13 10:23:44,856][db.py 39][INFO]: 查询的sql为：
        SELECT collect_name, volume_change, volume FROM `hk-manhattan`.chain_collection_statistics 
        WHERE date_type=1 AND volume_change>0 ORDER BY volume desc limit 18
    
[2022-10-13 10:23:45,131][db.py 39][INFO]: 查询的sql为：
        SELECT collect_name, volume_change, volume FROM `hk-manhattan`.chain_collection_statistics 
        WHERE date_type=1 AND volume_change<0 ORDER BY volume desc limit 2
    
[2022-10-13 10:23:45,396][db.py 39][INFO]: 查询的sql为：
        select last_price  from `hk-manhattan`.token_last_price where token_type = 'ETH' and unit = 'USD' order by create_time 
        desc limit 1
    
[2022-10-13 10:23:45,660][test_data_calculate.py 116][INFO]: 热力图测试数据接口返回：[{'collectionUuid': 102185, 'name': 'Dreadfulz', 'volume': 63228590.95, 'quoteChange': 0.0114}, {'collectionUuid': 101010, 'name': 'Decentraland LAND', 'volume': 34513560.07, 'quoteChange': 15165.9651}, {'collectionUuid': 101000, 'name': 'Bored Ape Yacht Club', 'volume': 18883757.29, 'quoteChange': 0.3109}, {'collectionUuid': 101003, 'name': 'Mutant Ape Yacht Club', 'volume': 13047458.11, 'quoteChange': 2.2704}, {'collectionUuid': 101008, 'name': 'Azuki', 'volume': 8313998.57, 'quoteChange': 7.1036}, {'collectionUuid': 101582, 'name': 'Genesis Box', 'volume': 8147003.98, 'quoteChange': 6.4448}, {'collectionUuid': 102313, 'name': 'Finiliar', 'volume': 1910544.15, 'quoteChange': 25.6141}, {'collectionUuid': 101013, 'name': 'VeeFriends', 'volume': 1689992.81, 'quoteChange': 9.5432}, {'collectionUuid': 101015, 'name': 'Cool Cats NFT', 'volume': 1646793.0, 'quoteChange': 2.8534}, {'collectionUuid': 101014, 'name': 'Bored Ape Kennel Club', 'volume': 1588166.18, 'quoteChange': 2.88}]
[2022-10-13 10:23:45,662][test_data_calculate.py 117][INFO]: 热力图测试数据sql查询：[{'collect_name': 'Webaverse Genesis Pass', 'volume_change': Decimal('74.06120000'), 'volume': Decimal('10183.11550000')}, {'collect_name': 'DigiDaigaku Genesis', 'volume_change': Decimal('0.25370000'), 'volume': Decimal('559.31525000')}, {'collect_name': 'WAFUKU GEN', 'volume_change': Decimal('1.18340000'), 'volume': Decimal('58.12146000')}]
[2022-10-13 10:23:45,700][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:23:45,701][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:23:45,702][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/heatMap/app
[2022-10-13 10:23:45,702][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 10:23:45,702][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "dataNum": 20,
    "timeRange": "ONE_MONTH"
}
[2022-10-13 10:23:45,702][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'dataNum': 20, 'timeRange': 'ONE_MONTH'}
[2022-10-13 10:23:45,702][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "dataNum": 20,
    "timeRange": "ONE_MONTH"
}
[2022-10-13 10:23:46,222][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': {'riseNum': 10, 'fallNum': 10, 'riseList': [{'collectionUuid': 101010, 'name': 'Decentraland LAND', 'volume': 491936600.74, 'quoteChange': 3961.021}, {'collectionUuid': 102185, 'name': 'Dreadfulz', 'volume': 238751164.69, 'quoteChange': 0.396}, {'collectionUuid': 101008, 'name': 'Azuki', 'volume': 24867000.92, 'quoteChange': 1.1586}, {'collectionUuid': 102761, 'name': 'RENGA Black Box', 'volume': 17510229.89, 'quoteChange': 0.6341}, {'collectionUuid': 101582, 'name': 'Genesis Box', 'volume': 13622020.75, 'quoteChange': 0.5182}, {'collectionUuid': 101043, 'name': 'Creepz Genesis', 'volume': 11878093.73, 'quoteChange': 15.282}, {'collectionUuid': 102534, 'name': 'The Band Bears', 'volume': 4433049.72, 'quoteChange': 23.1948}, {'collectionUuid': 100505, 'name': 'Roborovski NFT Collection by SYA Concept', 'volume': 3303815.57, 'quoteChange': 4673.2319}, {'collectionUuid': 101021, 'name': 'BEANZ Official', 'volume': 3216299.35, 'quoteChange': 1.5514}, {'collectionUuid': 101539, 'name': 'The Art of Seasons', 'volume': 2791356.05, 'quoteChange': 16.8043}], 'fallList': [{'collectionUuid': 101000, 'name': 'Bored Ape Yacht Club', 'volume': 90000324.41, 'quoteChange': -0.7335}, {'collectionUuid': 101003, 'name': 'Mutant Ape Yacht Club', 'volume': 40221270.11, 'quoteChange': -0.5202}, {'collectionUuid': 101011, 'name': 'Doodles', 'volume': 6900456.5, 'quoteChange': -0.8674}, {'collectionUuid': 101012, 'name': 'Wrapped Cryptopunks', 'volume': 2441380.23, 'quoteChange': -0.9688}, {'collectionUuid': 101578, 'name': 'The Potatoz', 'volume': 2305125.1, 'quoteChange': -0.8286}, {'collectionUuid': 101046, 'name': 'goblintown.wtf', 'volume': 2104758.68, 'quoteChange': -0.0615}, {'collectionUuid': 102313, 'name': 'Finiliar', 'volume': 2104505.56, 'quoteChange': -0.7733}, {'collectionUuid': 101007, 'name': 'Moonbirds', 'volume': 1371123.73, 'quoteChange': -0.842}, {'collectionUuid': 102486, 'name': 'Ash Chapter Two: Metamorphosis', 'volume': 1241492.79, 'quoteChange': -0.7662}, {'collectionUuid': 101041, 'name': 'V1 CryptoPunks Wrapped', 'volume': 1036701.31, 'quoteChange': -0.6084}]}}
[2022-10-13 10:23:46,222][db.py 39][INFO]: 查询的sql为：
        SELECT count(*) rise_count FROM `hk-manhattan`.chain_collection_statistics 
        WHERE date_type=2 AND volume_change>0
    
[2022-10-13 10:23:46,484][db.py 39][INFO]: 查询的sql为：
        SELECT count(*) fall_count FROM `hk-manhattan`.chain_collection_statistics 
        WHERE date_type=2 AND volume_change<0
     
[2022-10-13 10:23:46,745][db.py 39][INFO]: 查询的sql为：
        SELECT collect_name, volume_change, volume FROM `hk-manhattan`.chain_collection_statistics 
        WHERE date_type=2 AND volume_change>0 ORDER BY volume desc limit 1
    
[2022-10-13 10:23:47,007][db.py 39][INFO]: 查询的sql为：
        SELECT collect_name, volume_change, volume FROM `hk-manhattan`.chain_collection_statistics 
        WHERE date_type=2 AND volume_change<0 ORDER BY volume desc limit 19
    
[2022-10-13 10:23:47,260][db.py 39][INFO]: 查询的sql为：
        select last_price  from `hk-manhattan`.token_last_price where token_type = 'ETH' and unit = 'USD' order by create_time 
        desc limit 1
    
[2022-10-13 10:23:47,515][test_data_calculate.py 116][INFO]: 热力图测试数据接口返回：[{'collectionUuid': 101010, 'name': 'Decentraland LAND', 'volume': 491936600.74, 'quoteChange': 3961.021}, {'collectionUuid': 102185, 'name': 'Dreadfulz', 'volume': 238751164.69, 'quoteChange': 0.396}, {'collectionUuid': 101008, 'name': 'Azuki', 'volume': 24867000.92, 'quoteChange': 1.1586}, {'collectionUuid': 102761, 'name': 'RENGA Black Box', 'volume': 17510229.89, 'quoteChange': 0.6341}, {'collectionUuid': 101582, 'name': 'Genesis Box', 'volume': 13622020.75, 'quoteChange': 0.5182}, {'collectionUuid': 101043, 'name': 'Creepz Genesis', 'volume': 11878093.73, 'quoteChange': 15.282}, {'collectionUuid': 102534, 'name': 'The Band Bears', 'volume': 4433049.72, 'quoteChange': 23.1948}, {'collectionUuid': 100505, 'name': 'Roborovski NFT Collection by SYA Concept', 'volume': 3303815.57, 'quoteChange': 4673.2319}, {'collectionUuid': 101021, 'name': 'BEANZ Official', 'volume': 3216299.35, 'quoteChange': 1.5514}, {'collectionUuid': 101539, 'name': 'The Art of Seasons', 'volume': 2791356.05, 'quoteChange': 16.8043}]
[2022-10-13 10:23:47,516][test_data_calculate.py 117][INFO]: 热力图测试数据sql查询：[{'collect_name': 'Webaverse Genesis Pass', 'volume_change': Decimal('0.05250000'), 'volume': Decimal('10580.41880000')}]
[2022-10-13 10:23:47,552][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:23:47,553][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:23:47,553][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/heatMap/app
[2022-10-13 10:23:47,553][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 10:23:47,553][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "dataNum": 20,
    "timeRange": "THREE_MONTHS"
}
[2022-10-13 10:23:47,554][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'dataNum': 20, 'timeRange': 'THREE_MONTHS'}
[2022-10-13 10:23:47,554][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "dataNum": 20,
    "timeRange": "THREE_MONTHS"
}
[2022-10-13 10:23:47,994][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': {'riseNum': 0, 'fallNum': 0, 'riseList': [], 'fallList': []}}
[2022-10-13 10:23:47,994][db.py 39][INFO]: 查询的sql为：
        SELECT count(*) rise_count FROM `hk-manhattan`.chain_collection_statistics 
        WHERE date_type=3 AND volume_change>0
    
[2022-10-13 10:23:48,256][db.py 39][INFO]: 查询的sql为：
        SELECT count(*) fall_count FROM `hk-manhattan`.chain_collection_statistics 
        WHERE date_type=3 AND volume_change<0
     
[2022-10-13 10:23:48,527][db.py 39][INFO]: 查询的sql为：
        SELECT collect_name, volume_change, volume FROM `hk-manhattan`.chain_collection_statistics 
        WHERE date_type=3 AND volume_change>0 ORDER BY volume desc limit 0
    
[2022-10-13 10:23:48,783][db.py 39][INFO]: 查询的sql为：
        SELECT collect_name, volume_change, volume FROM `hk-manhattan`.chain_collection_statistics 
        WHERE date_type=3 AND volume_change<0 ORDER BY volume desc limit 20
    
[2022-10-13 10:23:49,048][db.py 39][INFO]: 查询的sql为：
        select last_price  from `hk-manhattan`.token_last_price where token_type = 'ETH' and unit = 'USD' order by create_time 
        desc limit 1
    
[2022-10-13 10:23:49,303][test_data_calculate.py 116][INFO]: 热力图测试数据接口返回：[]
[2022-10-13 10:23:49,304][test_data_calculate.py 117][INFO]: 热力图测试数据sql查询：()
[2022-10-13 10:28:49,006][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:28:49,007][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:28:49,383][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:28:49,385][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:28:49,874][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:28:49,875][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:28:49,879][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:28:49,880][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:28:49,882][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:28:49,883][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:28:49,884][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 10:28:50,305][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[101490, 101491, 101492, 101493, 101494, 101495, 101496, 101497, 101499, 101500, 101501, 101503, 101505, 101506, 101507, 101508, 101509, 101511, 101513, 101514, 101515, 101516, 101517, 101519, 101520, 101521, 101523, 101524, 101525, 101526, 101527, 101529, 101531, 101532, 101533, 101534, 101535, 101536, 101537, 101538, 101539, 101540, 101544, 101545, 101546, 101547, 101548, 101549, 101552, 101553], start_index为：1428
[2022-10-13 10:29:56,058][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:29:56,059][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:29:56,415][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:29:56,416][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:29:56,864][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:29:56,864][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:29:56,869][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:29:56,870][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:29:56,873][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:29:56,873][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:29:56,875][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 10:29:57,256][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[102483, 102484, 102485, 102486, 102487, 102488, 102490, 102491, 102492, 102493, 102494, 102495, 102496, 102497, 102498, 102499, 102500, 102501, 102502, 102503, 102504, 102506, 102507, 102508, 102509, 102510, 102511, 102512, 102513, 102514, 102515, 102516, 102517, 102518, 102519, 102520, 102521, 102522, 102523, 102524, 102525, 102526, 102527, 102528, 102529, 102530, 102531, 102532, 102533, 102534], start_index为：2336
[2022-10-13 10:29:57,304][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 10:29:57,304][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 10:29:57,305][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 10:29:57,305][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_DAY'}
[2022-10-13 10:29:57,305][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 10:29:57,723][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.3, 'avgPrice': 15.93701079, 'date': '2022-10-12 03:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 04:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 06:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 08:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 10:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 12:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 14:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 16:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93092087, 'date': '2022-10-12 18:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 20:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 22:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93046246, 'date': '2022-10-13 00:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 02:00', 'showTime': True}]}
[2022-10-13 10:29:57,724][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:29:57,973][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 1 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:29:58,225][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:29:58,465][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 3 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:29:58,712][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 4 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:29:58,956][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 5 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:29:59,201][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 6 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:29:59,441][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 7 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:29:59,679][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 8 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:29:59,918][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 9 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:30:00,156][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 10 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:30:00,393][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 11 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:30:00,630][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 12 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:30:00,868][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 13 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:30:01,104][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 14 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:30:01,338][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 15 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:30:01,576][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 16 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:30:01,816][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 17 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:30:02,051][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 18 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:30:02,289][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 19 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:30:02,526][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 20 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:30:02,765][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 21 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:30:03,001][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 22 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:30:03,240][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:48,310][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:44:48,311][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:44:48,682][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:44:48,683][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:44:49,160][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:44:49,162][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:44:49,166][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:44:49,167][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:44:49,168][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 10:44:49,169][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 10:44:49,171][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 10:44:49,579][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[101178, 101179, 101180, 101181, 101182, 101183, 101184, 101185, 101186, 101187, 101188, 101189, 101190, 101191, 101192, 101193, 101194, 101195, 101196, 101197, 101198, 101199, 101200, 101201, 101202, 101203, 101204, 101205, 101206, 101207, 101208, 101209, 101210, 101211, 101212, 101213, 101214, 101215, 101216, 101217, 101218, 101219, 101220, 101221, 101222, 101223, 101224, 101225, 101226, 101227], start_index为：1120
[2022-10-13 10:44:49,625][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 10:44:49,625][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 10:44:49,625][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 10:44:49,625][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_DAY'}
[2022-10-13 10:44:49,625][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 10:44:50,105][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.3, 'avgPrice': 15.93701079, 'date': '2022-10-12 03:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 04:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 06:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 08:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 10:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 12:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 14:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 16:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93092087, 'date': '2022-10-12 18:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 20:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 22:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93046246, 'date': '2022-10-13 00:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 02:00', 'showTime': True}]}
[2022-10-13 10:44:50,106][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:50,356][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 22 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:50,602][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 21 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:50,859][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 20 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:51,106][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 19 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:51,358][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 18 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:51,615][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 17 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:51,875][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 16 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:52,124][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 15 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:52,382][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 14 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:53,261][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 13 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:53,508][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 12 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:53,755][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 11 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:54,001][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 10 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:54,248][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 9 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:54,491][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 8 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:54,738][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 7 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:54,986][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 6 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:55,231][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 5 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:55,479][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 4 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:55,732][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 3 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:55,977][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:56,224][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 1 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 10:44:56,471][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:03:22,505][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:03:22,506][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:03:22,830][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:03:22,831][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:03:23,274][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:03:23,275][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:03:23,281][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:03:23,282][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:03:23,284][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:03:23,284][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:03:23,286][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 11:03:23,656][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[101511, 101513, 101514, 101515, 101516, 101517, 101519, 101520, 101521, 101523, 101524, 101525, 101526, 101527, 101529, 101531, 101532, 101533, 101534, 101535, 101536, 101537, 101538, 101539, 101540, 101544, 101545, 101546, 101547, 101548, 101549, 101552, 101553, 101554, 101555, 101556, 101558, 101559, 101560, 101561, 101562, 101563, 101564, 101566, 101567, 101568, 101569, 101570, 101571, 101572], start_index为：1445
[2022-10-13 11:04:24,119][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:04:24,119][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:04:24,494][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:04:24,497][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:04:24,970][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:04:24,970][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:04:24,974][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:04:24,974][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:04:24,976][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:04:24,976][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:04:24,978][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 11:04:25,409][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[100284, 100285, 100286, 100287, 100288, 100289, 100290, 100291, 100292, 100293, 100294, 100295, 100296, 100297, 100298, 100299, 100300, 100301, 100302, 100304, 100305, 100306, 100307, 100308, 100309, 100310, 100311, 100312, 100313, 100314, 100315, 100316, 100317, 100318, 100319, 100320, 100321, 100322, 100324, 100325, 100327, 100328, 100329, 100330, 100331, 100332, 100333, 100334, 100336, 100337], start_index为：276
[2022-10-13 11:04:25,455][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:04:25,456][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:04:25,456][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 11:04:25,456][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_DAY'}
[2022-10-13 11:04:25,456][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 11:04:25,917][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 04:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 06:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 08:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 10:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 12:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 14:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 16:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93092087, 'date': '2022-10-12 18:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 20:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 22:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93046246, 'date': '2022-10-13 00:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 02:00', 'showTime': True}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 03:00', 'showTime': True}]}
[2022-10-13 11:04:25,918][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:26,171][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:26,423][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 22 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:26,673][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 22 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:26,922][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 21 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:27,180][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 21 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:27,429][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 20 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:27,688][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 20 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:27,938][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 19 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:28,188][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 19 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:28,441][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 18 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:28,695][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 18 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:28,945][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 17 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:29,194][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 17 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:29,443][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 16 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:29,701][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 16 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:29,950][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 15 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:30,199][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 15 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:30,445][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 14 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:30,697][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 14 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:30,948][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 13 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:31,203][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 13 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:31,454][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 12 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:31,705][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 12 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:31,954][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 11 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:32,210][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 11 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:32,466][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 10 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:32,717][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 10 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:32,972][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 9 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:33,228][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 9 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:33,483][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 8 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:33,734][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 8 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:33,984][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 7 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:34,234][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 7 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:34,486][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 6 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:34,737][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 6 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:34,988][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 5 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:35,239][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 5 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:35,499][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 4 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:35,752][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 4 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:36,003][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 3 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:36,253][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 3 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:36,503][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:36,753][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:37,003][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 1 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:37,252][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 1 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:37,502][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:37,754][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:38,004][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.93686845, 15.93686845, 15.93658147, 15.93658147, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93516605, 15.93516605, 15.93516605, 15.93362158, 15.93342669, 15.93342669, 15.93092087, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93046246, 15.93030222, 15.93030222, 15.93030222]
[2022-10-13 11:04:38,005][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.93686845, 15.93686845, 15.93658147, 15.93658147, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93516605, 15.93516605, 15.93516605, 15.93362158, 15.93342669, 15.93342669, 15.93092087, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93046246, 15.93030222, 15.93030222, 15.93030222]
[2022-10-13 11:04:38,037][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:04:38,037][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:04:38,038][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_WEEK"
}
[2022-10-13 11:04:38,038][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_WEEK'}
[2022-10-13 11:04:38,038][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_WEEK"
}
[2022-10-13 11:04:38,511][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.0, 'avgPrice': 15.86485694, 'date': '2022-10-06 05:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86483257, 'date': '2022-10-06 07:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86361793, 'date': '2022-10-06 09:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86349496, 'date': '2022-10-06 11:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.8631645, 'date': '2022-10-06 13:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86311586, 'date': '2022-10-06 15:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86311586, 'date': '2022-10-06 17:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96918404, 'date': '2022-10-06 19:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96879193, 'date': '2022-10-06 21:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96650488, 'date': '2022-10-06 23:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96434236, 'date': '2022-10-07 01:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96417436, 'date': '2022-10-07 03:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96311299, 'date': '2022-10-07 05:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96176713, 'date': '2022-10-07 07:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96167684, 'date': '2022-10-07 09:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96045898, 'date': '2022-10-07 11:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95903559, 'date': '2022-10-07 13:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95888778, 'date': '2022-10-07 15:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95791579, 'date': '2022-10-07 17:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95746736, 'date': '2022-10-07 19:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95509157, 'date': '2022-10-07 21:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07 23:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95369663, 'date': '2022-10-08 01:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95259812, 'date': '2022-10-08 03:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95237044, 'date': '2022-10-08 05:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95237044, 'date': '2022-10-08 07:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95182706, 'date': '2022-10-08 09:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95182706, 'date': '2022-10-08 11:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95093181, 'date': '2022-10-08 13:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95087703, 'date': '2022-10-08 15:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95245558, 'date': '2022-10-08 17:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95161605, 'date': '2022-10-08 19:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95161605, 'date': '2022-10-08 21:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95215079, 'date': '2022-10-08 23:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94690961, 'date': '2022-10-09 01:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94690961, 'date': '2022-10-09 03:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 05:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 07:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 09:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 11:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94592567, 'date': '2022-10-09 13:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94592567, 'date': '2022-10-09 15:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.9435523, 'date': '2022-10-09 17:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94268487, 'date': '2022-10-09 19:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94268487, 'date': '2022-10-09 21:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94263201, 'date': '2022-10-09 23:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.94109483, 'date': '2022-10-10 01:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.94022208, 'date': '2022-10-10 03:00', 'showTime': False}, {'floorPrice': 10.02, 'avgPrice': 15.94014804, 'date': '2022-10-10 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93982348, 'date': '2022-10-10 07:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93966822, 'date': '2022-10-10 09:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93921675, 'date': '2022-10-10 11:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93921675, 'date': '2022-10-10 13:00', 'showTime': False}, {'floorPrice': 10.19, 'avgPrice': 15.93800479, 'date': '2022-10-10 15:00', 'showTime': False}, {'floorPrice': 10.1, 'avgPrice': 15.93822528, 'date': '2022-10-10 17:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9376355, 'date': '2022-10-10 19:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9376355, 'date': '2022-10-10 21:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9380872, 'date': '2022-10-10 23:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 01:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 03:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 07:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93936525, 'date': '2022-10-11 09:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 11:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 13:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 15:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94202971, 'date': '2022-10-11 17:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94136192, 'date': '2022-10-11 19:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94204827, 'date': '2022-10-11 21:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94204827, 'date': '2022-10-11 23:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12 01:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93701079, 'date': '2022-10-12 03:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': False}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 03:00', 'showTime': False}]}
[2022-10-13 11:04:38,512][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:38,759][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:39,008][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 166 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:39,256][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 166 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:39,511][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 165 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:39,762][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 165 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:40,014][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 164 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:40,267][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 164 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:40,516][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 163 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:40,765][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 163 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:41,012][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 162 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:41,259][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 162 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:41,509][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 161 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:41,759][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 161 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:42,007][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 160 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:42,260][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 160 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:42,514][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 159 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:42,771][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 159 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:43,020][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 158 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:43,269][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 158 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:43,517][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 157 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:43,769][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 157 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:44,019][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 156 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:44,272][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 156 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:44,520][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 155 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:44,772][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 155 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:45,023][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 154 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:45,278][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 154 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:45,530][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 153 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:45,781][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 153 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:46,032][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 152 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:46,282][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 152 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:46,532][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 151 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:46,784][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 151 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:47,031][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 150 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:47,282][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 150 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:47,545][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 149 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:47,797][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 149 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:48,047][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 148 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:48,299][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 148 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:48,548][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 147 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:48,799][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 147 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:49,047][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 146 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:49,297][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 146 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:49,548][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 145 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:49,799][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 145 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:50,053][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 144 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:50,303][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 144 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:50,555][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 143 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:50,804][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 143 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:51,054][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 142 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:51,305][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 142 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:51,556][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 141 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:51,805][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 141 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:52,054][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 140 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:52,301][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 140 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:52,561][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 139 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:52,812][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 139 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:53,064][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 138 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:53,315][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 138 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:53,574][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 137 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:53,822][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 137 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:54,073][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 136 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:54,324][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 136 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:54,577][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 135 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:54,826][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 135 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:55,074][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 134 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:55,324][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 134 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:55,572][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 133 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:55,824][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 133 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:56,075][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 132 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:56,328][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 132 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:56,577][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 131 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:56,826][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 131 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:57,078][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 130 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:57,331][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 130 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:57,582][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 129 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:57,832][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 129 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:58,081][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 128 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:58,329][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 128 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:58,582][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 127 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:58,829][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 127 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:59,079][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 126 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:59,330][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 126 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:04:59,580][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 125 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:04:59,833][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 125 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:00,084][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 124 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:00,335][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 124 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:00,585][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 123 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:00,834][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 123 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:01,085][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 122 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:01,342][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 122 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:01,593][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 121 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:01,842][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 121 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:02,091][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 120 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:02,338][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 120 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:02,589][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 119 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:02,839][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 119 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:03,089][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 118 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:03,338][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 118 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:03,585][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 117 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:03,839][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 117 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:04,089][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 116 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:04,337][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 116 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:04,588][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 115 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:04,838][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 115 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:05,087][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 114 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:05,336][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 114 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:05,584][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 113 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:05,832][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 113 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:06,082][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 112 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:06,331][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 112 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:06,584][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 111 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:06,837][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 111 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:07,089][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 110 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:07,343][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 110 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:07,599][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 109 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:07,849][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 109 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:08,099][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 108 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:08,350][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 108 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:08,605][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 107 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:08,857][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 107 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:09,107][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 106 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:09,356][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 106 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:09,604][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 105 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:09,855][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 105 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:10,107][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 104 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:10,357][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 104 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:10,603][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 103 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:10,855][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 103 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:11,106][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 102 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:11,357][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 102 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:11,607][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 101 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:11,858][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 101 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:12,109][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 100 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:12,359][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 100 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:12,608][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 99 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:12,859][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 99 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:13,111][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 98 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:13,362][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 98 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:13,618][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 97 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:13,868][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 97 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:14,120][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 96 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:14,380][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 96 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:14,631][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 95 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:14,878][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 95 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:15,129][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 94 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:15,381][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 94 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:15,634][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 93 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:15,885][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 93 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:16,140][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 92 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:16,401][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 92 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:16,653][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 91 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:16,904][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 91 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:17,154][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 90 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:17,407][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 90 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:17,665][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 89 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:17,913][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 89 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:18,160][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 88 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:18,418][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 88 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:18,669][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 87 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:18,915][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 87 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:19,164][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 86 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:19,415][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 86 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:19,667][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 85 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:19,921][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 85 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:20,170][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 84 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:20,420][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 84 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:20,678][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 83 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:20,927][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 83 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:21,177][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 82 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:21,429][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 82 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:21,681][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 81 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:21,933][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 81 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:22,185][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 80 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:22,435][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 80 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:22,683][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 79 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:22,930][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 79 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:23,179][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 78 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:23,431][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 78 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:23,680][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 77 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:23,930][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 77 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:24,181][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 76 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:24,429][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 76 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:24,679][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 75 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:24,929][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 75 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:25,185][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 74 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:25,434][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 74 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:25,690][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 73 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:25,939][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 73 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:26,195][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 72 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:26,445][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 72 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:26,698][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 71 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:26,956][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 71 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:27,225][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 70 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:27,473][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 70 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:27,720][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 69 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:27,976][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 69 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:28,226][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 68 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:28,476][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 68 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:28,726][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 67 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:28,977][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 67 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:29,228][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 66 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:29,476][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 66 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:29,729][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 65 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:29,978][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 65 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:30,225][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 64 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:30,474][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 64 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:30,724][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 63 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:30,974][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 63 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:31,225][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 62 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:31,474][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 62 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:31,724][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 61 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:31,974][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 61 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:32,227][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 60 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:32,479][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 60 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:32,731][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 59 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:32,981][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 59 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:33,234][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 58 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:33,488][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 58 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:33,737][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 57 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:33,988][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 57 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:34,237][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 56 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:34,488][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 56 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:34,738][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 55 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:34,990][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 55 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:35,239][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 54 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:35,488][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 54 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:35,739][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 53 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:35,989][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 53 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:36,237][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 52 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:36,485][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 52 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:36,734][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 51 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:36,980][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 51 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:37,230][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 50 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:37,479][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 50 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:37,727][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 49 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:37,977][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 49 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:38,227][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 48 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:38,476][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 48 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:38,727][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 47 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:38,979][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 47 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:39,230][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 46 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:39,478][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 46 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:39,725][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 45 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:39,973][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 45 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:40,221][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 44 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:40,469][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 44 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:40,724][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 43 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:40,974][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 43 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:41,223][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 42 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:41,471][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 42 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:41,723][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 41 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:41,970][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 41 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:42,221][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 40 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:42,473][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 40 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:42,723][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 39 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:42,974][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 39 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:43,225][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 38 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:43,478][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 38 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:43,726][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 37 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:43,977][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 37 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:44,228][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 36 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:44,476][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 36 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:44,731][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 35 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:44,982][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 35 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:45,230][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 34 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:45,478][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 34 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:45,730][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 33 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:45,978][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 33 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:46,228][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 32 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:46,479][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 32 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:46,728][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 31 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:46,974][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 31 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:47,222][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 30 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:47,473][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 30 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:47,723][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 29 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:47,972][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 29 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:48,226][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 28 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:48,479][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 28 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:48,727][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 27 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:48,979][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 27 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:49,228][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 26 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:49,475][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 26 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:49,724][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 25 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:49,975][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 25 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:50,221][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 24 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:50,474][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 24 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:50,720][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:50,971][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:51,222][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 22 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:51,477][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 22 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:51,728][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 21 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:51,983][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 21 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:52,233][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 20 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:52,483][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 20 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:52,731][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 19 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:52,979][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 19 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:53,229][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 18 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:53,481][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 18 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:53,733][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 17 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:53,996][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 17 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:54,246][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 16 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:54,501][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 16 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:54,754][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 15 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:55,005][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 15 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:55,261][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 14 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:55,510][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 14 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:55,763][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 13 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:56,014][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 13 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:56,264][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 12 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:56,512][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 12 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:56,762][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 11 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:57,011][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 11 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:57,266][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 10 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:57,517][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 10 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:57,767][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 9 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:58,017][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 9 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:58,265][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 8 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:58,526][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 8 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:58,783][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 7 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:59,032][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 7 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:59,281][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 6 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:05:59,530][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 6 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:05:59,782][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 5 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:00,031][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 5 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:00,278][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 4 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:00,526][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 4 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:00,777][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 3 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:01,024][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 3 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:01,277][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:01,523][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:01,773][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 1 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:02,025][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 1 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:02,274][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:02,521][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:02,771][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.05, 10.05, 10.02, 10.3, 10.3, 10.3, 10.3, 10.19, 10.1, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.86485694, 15.86483257, 15.86361793, 15.86349496, 15.8631645, 15.86311586, 15.86311586, 15.96918404, 15.96879193, 15.96650488, 15.96434236, 15.96417436, 15.96311299, 15.96176713, 15.96167684, 15.96045898, 15.95903559, 15.95888778, 15.95791579, 15.95746736, 15.95509157, 15.95473999, 15.95369663, 15.95259812, 15.95237044, 15.95237044, 15.95182706, 15.95182706, 15.95093181, 15.95087703, 15.95245558, 15.95161605, 15.95161605, 15.95215079, 15.94690961, 15.94690961, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94592567, 15.94592567, 15.9435523, 15.94268487, 15.94268487, 15.94263201, 15.94109483, 15.94022208, 15.94014804, 15.93982348, 15.93966822, 15.93921675, 15.93921675, 15.93800479, 15.93822528, 15.9376355, 15.9376355, 15.9380872, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93936525, 15.94240175, 15.94240175, 15.94240175, 15.94202971, 15.94136192, 15.94204827, 15.94204827, 15.94076728, 15.93701079, 15.93686845, 15.93658147, 15.93525684, 15.93525684, 15.93516605, 15.93362158, 15.93342669, 15.93078298, 15.93078298, 15.93078298, 15.93030222, 15.93030222]
[2022-10-13 11:06:02,772][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：
[2022-10-13 11:06:02,831][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:06:02,832][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:06:02,832][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_MONTH"
}
[2022-10-13 11:06:02,832][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_MONTH'}
[2022-10-13 11:06:02,833][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_MONTH"
}
[2022-10-13 11:06:03,400][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 7.7, 'avgPrice': 15.72366447, 'date': '2022-09-13', 'showTime': False}, {'floorPrice': 7.5, 'avgPrice': 15.72203573, 'date': '2022-09-14', 'showTime': False}, {'floorPrice': 7.63, 'avgPrice': 15.72021965, 'date': '2022-09-15', 'showTime': False}, {'floorPrice': 9.49, 'avgPrice': 15.71604586, 'date': '2022-09-16', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.76479543, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 9.899, 'avgPrice': 15.76209893, 'date': '2022-09-18', 'showTime': False}, {'floorPrice': 10.4, 'avgPrice': 15.75933884, 'date': '2022-09-19', 'showTime': False}, {'floorPrice': 11.11, 'avgPrice': 15.82966529, 'date': '2022-09-20', 'showTime': False}, {'floorPrice': 11.8, 'avgPrice': 15.86195463, 'date': '2022-09-21', 'showTime': False}, {'floorPrice': 11.15, 'avgPrice': 15.90771119, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 10.2, 'avgPrice': 15.90760049, 'date': '2022-09-23', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.90719263, 'date': '2022-09-24', 'showTime': False}, {'floorPrice': 9.25, 'avgPrice': 15.90719263, 'date': '2022-09-25', 'showTime': False}, {'floorPrice': 8.88, 'avgPrice': 15.90719263, 'date': '2022-09-26', 'showTime': False}, {'floorPrice': 9.0, 'avgPrice': 15.90716694, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 9.2, 'avgPrice': 15.9051948, 'date': '2022-09-28', 'showTime': False}, {'floorPrice': 9.55, 'avgPrice': 15.90436152, 'date': '2022-09-29', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.90434781, 'date': '2022-09-30', 'showTime': False}, {'floorPrice': 10.2, 'avgPrice': 15.89996067, 'date': '2022-10-01', 'showTime': False}, {'floorPrice': 10.44, 'avgPrice': 15.89461695, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 10.23, 'avgPrice': 15.88418119, 'date': '2022-10-03', 'showTime': False}, {'floorPrice': 10.4, 'avgPrice': 15.87724741, 'date': '2022-10-04', 'showTime': False}, {'floorPrice': 10.369, 'avgPrice': 15.86662469, 'date': '2022-10-05', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96650488, 'date': '2022-10-06', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95215079, 'date': '2022-10-08', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94263201, 'date': '2022-10-09', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9380872, 'date': '2022-10-10', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 11:06:03,400][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:03,649][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:03,897][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 718 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:04,147][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 718 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:04,394][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 717 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:04,649][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 717 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:04,899][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 716 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:05,147][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 716 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:05,397][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 715 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:05,648][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 715 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:05,898][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 714 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:06,147][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 714 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:06,399][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 713 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:06,651][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 713 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:06,906][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 712 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:07,156][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 712 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:07,405][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 711 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:07,659][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 711 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:07,911][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 710 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:08,159][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 710 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:08,409][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 709 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:08,656][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 709 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:08,903][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 708 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:09,155][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 708 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:09,403][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 707 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:09,652][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 707 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:09,900][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 706 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:10,150][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 706 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:10,401][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 705 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:10,650][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 705 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:10,898][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 704 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:11,151][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 704 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:11,401][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 703 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:11,649][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 703 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:11,909][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 702 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:12,169][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 702 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:12,418][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 701 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:12,668][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 701 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:12,920][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 700 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:13,176][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 700 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:13,430][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 699 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:13,679][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 699 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:13,927][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 698 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:14,173][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 698 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:14,423][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 697 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:14,675][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 697 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:14,925][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 696 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:15,173][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 696 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:15,423][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 695 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:15,673][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 695 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:15,924][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 694 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:16,172][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 694 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:16,423][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 693 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:16,673][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 693 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:16,923][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 692 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:17,179][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 692 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:17,430][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 691 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:17,683][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 691 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:17,933][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 690 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:18,185][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 690 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:18,432][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 689 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:18,682][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 689 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:18,946][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 688 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:19,193][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 688 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:19,444][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 687 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:19,695][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 687 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:19,947][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 686 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:20,197][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 686 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:20,450][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 685 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:20,703][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 685 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:20,953][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 684 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:21,203][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 684 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:21,453][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 683 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:21,702][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 683 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:21,950][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 682 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:22,202][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 682 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:22,450][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 681 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:22,699][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 681 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:22,946][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 680 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:23,196][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 680 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:23,447][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 679 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:23,703][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 679 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:23,951][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 678 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:24,201][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 678 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:24,451][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 677 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:24,705][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 677 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:24,954][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 676 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:25,202][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 676 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:25,456][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 675 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:25,703][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 675 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:25,957][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 674 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:26,214][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 674 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:26,465][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 673 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:26,715][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 673 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:26,965][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 672 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:27,212][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 672 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:27,465][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 671 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:27,713][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 671 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:27,961][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 670 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:28,213][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 670 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:28,464][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 669 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:28,716][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 669 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:28,962][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 668 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:29,214][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 668 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:29,463][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 667 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:29,709][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 667 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:29,961][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 666 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:30,211][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 666 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:30,460][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 665 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:30,710][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 665 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:30,963][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 664 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:31,214][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 664 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:31,464][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 663 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:31,716][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 663 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:31,965][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 662 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:32,217][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 662 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:32,466][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 661 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:32,715][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 661 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:32,963][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 660 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:33,211][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 660 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:33,466][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 659 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:33,717][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 659 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:33,968][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 658 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:34,215][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 658 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:34,470][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 657 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:34,717][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 657 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:34,969][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 656 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:35,225][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 656 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:35,475][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 655 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:35,726][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 655 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:35,983][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 654 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:36,232][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 654 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:36,481][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 653 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:36,731][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 653 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:36,986][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 652 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:37,237][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 652 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:37,489][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 651 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:37,741][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 651 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:37,990][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 650 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:38,239][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 650 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:38,488][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 649 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:38,738][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 649 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:38,988][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 648 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:39,235][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 648 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:39,486][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 647 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:39,735][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 647 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:39,984][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 646 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:40,236][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 646 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:40,487][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 645 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:40,739][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 645 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:40,989][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 644 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:41,237][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 644 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:41,492][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 643 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:41,744][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 643 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:41,993][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 642 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:42,245][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 642 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:42,495][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 641 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:42,748][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 641 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:43,001][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 640 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:43,251][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 640 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:43,498][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 639 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:43,750][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 639 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:44,000][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 638 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:44,249][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 638 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:44,497][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 637 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:44,751][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 637 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:45,001][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 636 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:45,255][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 636 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:45,505][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 635 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:45,756][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 635 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:46,007][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 634 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:46,259][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 634 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:46,508][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 633 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:46,755][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 633 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:47,007][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 632 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:47,258][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 632 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:47,508][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 631 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:47,759][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 631 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:48,009][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 630 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:48,257][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 630 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:48,503][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 629 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:48,753][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 629 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:49,002][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 628 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:49,249][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 628 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:49,500][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 627 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:49,751][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 627 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:50,004][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 626 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:50,253][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 626 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:50,503][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 625 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:50,755][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 625 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:51,005][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 624 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:51,259][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 624 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:51,508][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 623 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:51,760][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 623 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:52,010][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 622 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:52,265][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 622 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:52,515][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 621 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:52,768][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 621 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:53,020][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 620 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:53,272][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 620 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:53,523][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 619 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:53,771][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 619 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:54,021][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 618 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:54,273][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 618 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:54,526][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 617 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:54,777][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 617 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:55,029][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 616 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:55,280][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 616 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:55,532][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 615 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:55,785][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 615 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:56,036][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 614 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:56,287][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 614 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:56,538][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 613 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:56,788][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 613 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:57,036][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 612 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:57,284][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 612 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:57,534][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 611 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:57,787][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 611 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:58,036][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 610 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:58,283][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 610 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:58,534][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 609 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:58,784][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 609 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:59,034][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 608 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:59,286][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 608 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:06:59,539][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 607 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:06:59,791][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 607 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:00,041][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 606 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:00,292][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 606 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:00,541][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 605 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:00,788][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 605 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:01,040][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 604 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:01,287][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 604 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:01,534][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 603 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:01,783][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 603 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:02,033][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 602 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:02,286][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 602 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:02,533][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 601 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:02,785][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 601 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:03,035][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 600 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:03,296][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 600 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:03,548][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 599 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:03,796][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 599 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:04,045][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 598 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:04,296][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 598 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:04,545][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 597 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:04,795][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 597 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:05,045][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 596 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:05,292][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 596 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:05,541][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 595 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:05,789][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 595 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:06,038][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 594 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:06,288][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 594 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:06,536][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 593 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:06,787][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 593 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:07,041][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 592 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:07,289][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 592 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:07,538][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 591 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:07,788][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 591 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:08,037][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 590 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:08,286][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 590 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:08,534][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 589 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:08,786][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 589 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:09,036][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 588 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:09,285][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 588 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:09,537][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 587 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:09,783][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 587 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:10,033][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 586 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:10,286][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 586 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:10,533][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 585 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:10,783][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 585 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:11,032][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 584 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:11,280][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 584 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:11,530][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 583 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:11,779][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 583 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:12,029][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 582 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:12,278][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 582 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:12,526][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 581 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:12,777][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 581 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:13,028][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 580 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:13,279][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 580 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:13,532][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 579 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:13,787][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 579 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:14,042][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 578 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:14,294][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 578 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:14,543][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 577 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:14,793][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 577 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:15,048][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 576 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:15,301][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 576 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:15,555][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 575 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:15,808][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 575 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:16,059][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 574 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:16,309][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 574 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:16,557][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 573 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:16,803][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 573 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:17,052][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 572 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:17,301][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 572 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:17,552][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 571 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:17,800][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 571 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:18,050][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 570 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:18,297][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 570 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:18,546][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 569 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:18,798][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 569 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:19,048][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 568 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:19,298][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 568 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:19,545][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 567 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:19,797][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 567 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:20,047][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 566 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:20,300][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 566 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:20,547][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 565 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:20,796][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 565 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:21,044][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 564 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:21,292][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 564 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:21,540][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 563 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:21,792][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 563 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:22,040][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 562 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:22,290][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 562 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:22,538][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 561 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:22,793][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 561 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:23,048][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 560 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:23,309][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 560 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:23,561][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 559 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:23,808][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 559 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:24,056][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 558 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:24,306][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 558 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:24,556][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 557 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:24,808][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 557 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:25,065][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 556 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:25,315][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 556 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:25,569][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 555 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:25,822][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 555 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:26,073][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 554 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:26,323][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 554 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:26,574][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 553 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:26,821][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 553 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:27,073][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 552 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:27,325][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 552 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:27,572][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 551 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:27,818][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 551 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:28,065][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 550 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:28,314][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 550 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:28,564][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 549 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:28,815][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 549 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:29,067][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 548 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:29,316][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 548 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:29,569][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 547 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:29,820][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 547 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:30,072][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 546 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:30,322][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 546 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:30,576][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 545 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:30,825][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 545 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:31,074][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 544 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:31,320][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 544 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:31,572][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 543 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:31,824][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 543 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:32,077][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 542 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:32,326][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 542 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:32,575][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 541 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:32,828][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 541 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:33,079][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 540 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:33,329][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 540 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:33,578][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 539 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:33,825][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 539 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:34,075][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 538 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:34,323][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 538 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:34,588][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 537 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:34,841][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 537 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:35,088][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 536 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:35,340][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 536 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:35,593][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 535 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:35,847][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 535 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:36,101][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 534 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:36,352][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 534 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:36,602][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 533 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:36,852][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 533 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:37,103][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 532 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:37,354][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 532 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:37,602][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 531 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:37,849][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 531 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:38,098][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 530 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:38,345][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 530 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:38,594][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 529 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:38,844][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 529 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:39,093][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 528 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:39,341][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 528 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:39,591][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 527 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:39,841][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 527 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:40,091][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 526 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:40,346][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 526 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:40,596][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 525 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:40,846][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 525 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:41,105][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 524 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:41,359][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 524 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:41,609][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 523 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:41,857][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 523 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:42,114][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 522 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:42,363][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 522 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:42,615][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 521 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:42,865][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 521 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:43,117][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 520 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:43,364][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 520 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:43,615][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 519 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:43,867][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 519 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:44,114][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 518 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:44,366][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 518 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:44,613][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 517 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:44,866][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 517 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:45,115][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 516 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:45,365][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 516 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:45,614][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 515 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:45,870][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 515 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:46,121][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 514 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:46,371][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 514 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:46,622][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 513 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:46,874][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 513 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:47,125][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 512 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:47,377][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 512 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:47,626][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 511 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:47,878][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 511 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:48,128][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 510 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:48,378][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 510 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:48,631][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 509 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:48,887][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 509 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:49,137][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 508 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:49,392][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 508 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:49,643][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 507 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:49,891][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 507 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:50,146][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 506 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:50,397][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 506 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:50,647][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 505 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:50,895][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 505 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:51,147][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 504 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:51,397][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 504 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:51,651][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 503 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:51,909][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 503 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:52,164][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 502 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:52,415][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 502 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:52,670][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 501 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:52,925][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 501 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:53,178][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 500 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:53,427][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 500 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:53,678][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 499 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:53,929][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 499 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:54,179][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 498 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:54,429][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 498 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:54,680][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 497 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:54,932][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 497 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:55,182][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 496 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:55,432][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 496 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:55,681][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 495 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:55,929][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 495 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:56,181][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 494 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:56,427][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 494 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:56,677][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 493 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:56,927][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 493 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:57,170][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 492 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:57,418][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 492 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:57,667][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 491 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:57,913][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 491 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:58,166][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 490 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:58,415][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 490 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:58,668][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 489 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:58,914][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 489 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:59,162][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 488 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:59,409][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 488 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:07:59,660][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 487 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:07:59,910][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 487 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:00,162][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 486 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:00,418][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 486 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:00,671][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 485 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:00,918][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 485 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:01,166][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 484 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:01,415][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 484 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:01,666][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 483 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:01,914][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 483 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:02,163][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 482 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:02,411][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 482 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:02,660][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 481 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:02,908][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 481 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:03,154][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 480 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:03,402][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 480 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:03,653][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 479 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:03,900][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 479 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:04,150][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 478 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:04,397][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 478 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:04,642][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 477 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:04,888][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 477 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:05,137][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 476 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:05,386][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 476 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:05,637][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 475 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:05,884][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 475 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:06,132][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 474 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:06,381][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 474 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:06,629][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 473 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:06,879][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 473 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:07,128][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 472 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:07,377][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 472 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:07,626][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 471 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:07,874][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 471 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:08,124][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 470 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:08,375][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 470 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:08,626][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 469 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:08,875][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 469 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:09,126][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 468 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:09,374][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 468 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:09,625][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 467 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:09,876][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 467 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:10,122][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 466 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:10,370][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 466 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:10,619][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 465 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:10,868][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 465 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:11,118][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 464 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:11,369][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 464 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:11,617][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 463 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:11,881][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 463 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:12,132][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 462 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:12,381][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 462 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:12,633][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 461 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:12,885][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 461 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:13,140][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 460 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:13,393][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 460 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:13,646][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 459 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:13,897][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 459 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:14,161][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 458 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:14,416][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 458 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:14,666][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 457 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:14,916][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 457 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:15,164][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 456 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:15,411][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 456 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:15,659][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 455 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:15,910][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 455 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:16,159][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 454 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:16,413][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 454 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:16,664][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 453 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:16,917][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 453 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:17,163][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 452 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:17,417][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 452 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:17,670][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 451 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:17,921][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 451 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:18,177][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 450 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:18,430][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 450 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:18,683][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 449 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:18,934][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 449 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:19,183][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 448 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:19,433][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 448 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:19,684][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 447 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:19,937][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 447 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:20,187][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 446 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:20,439][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 446 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:20,689][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 445 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:20,940][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 445 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:21,189][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 444 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:21,459][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 444 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:21,708][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 443 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:21,962][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 443 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:22,211][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 442 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:22,458][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 442 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:22,706][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 441 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:22,957][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 441 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:23,205][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 440 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:23,453][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 440 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:23,702][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 439 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:23,950][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 439 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:24,203][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 438 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:24,453][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 438 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:24,703][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 437 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:24,960][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 437 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:25,211][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 436 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:25,463][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 436 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:25,716][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 435 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:25,971][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 435 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:26,225][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 434 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:26,483][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 434 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:26,734][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 433 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:26,987][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 433 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:27,234][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 432 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:27,485][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 432 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:27,736][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 431 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:27,986][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 431 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:28,240][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 430 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:28,490][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 430 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:28,739][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 429 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:28,988][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 429 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:29,258][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 428 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:29,516][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 428 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:29,774][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 427 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:30,034][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 427 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:30,281][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 426 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:30,541][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 426 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:30,789][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 425 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:31,037][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 425 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:31,295][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 424 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:31,551][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 424 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:31,802][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 423 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:32,050][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 423 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:32,304][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 422 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:32,561][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 422 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:32,814][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 421 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:33,153][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 421 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:33,433][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 420 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:33,808][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 420 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:34,176][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 419 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:34,588][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 419 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:34,995][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 418 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:35,407][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 418 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:35,664][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 417 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:35,918][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 417 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:36,168][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 416 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:36,421][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 416 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:36,671][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 415 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:36,920][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 415 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:37,171][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 414 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:37,420][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 414 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:37,669][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 413 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:37,916][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 413 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:38,167][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 412 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:38,417][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 412 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:38,669][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 411 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:38,918][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 411 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:39,168][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 410 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:39,423][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 410 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:39,674][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 409 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:39,925][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 409 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:40,177][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 408 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:40,428][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 408 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:40,683][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 407 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:40,934][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 407 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:41,187][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 406 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:41,452][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 406 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:41,703][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 405 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:41,949][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 405 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:42,199][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 404 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:42,447][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 404 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:42,697][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 403 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:42,946][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 403 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:43,201][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 402 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:43,448][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 402 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:43,698][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 401 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:43,956][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 401 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:44,206][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 400 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:44,459][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 400 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:44,706][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 399 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:44,953][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 399 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:45,207][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 398 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:45,457][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 398 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:45,713][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 397 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:45,964][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 397 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:46,220][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 396 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:46,470][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 396 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:46,719][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 395 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:46,968][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 395 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:47,218][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 394 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:47,467][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 394 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:47,719][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 393 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:47,971][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 393 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:48,221][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 392 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:48,469][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 392 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:48,718][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 391 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:48,969][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 391 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:49,218][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 390 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:49,468][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 390 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:49,716][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 389 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:49,969][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 389 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:50,222][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 388 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:50,478][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 388 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:50,733][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 387 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:50,985][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 387 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:51,235][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 386 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:51,572][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 386 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:51,890][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 385 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:52,229][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 385 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:52,613][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 384 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:52,934][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 384 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:53,198][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 383 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:53,465][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 383 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:53,740][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 382 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:54,007][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 382 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:54,271][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 381 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:54,546][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 381 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:54,825][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 380 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:55,092][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 380 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:55,369][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 379 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:55,654][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 379 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:55,933][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 378 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:56,201][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 378 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:56,472][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 377 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:56,743][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 377 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:57,026][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 376 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:57,288][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 376 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:57,538][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 375 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:57,787][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 375 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:58,038][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 374 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:58,288][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 374 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:58,538][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 373 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:58,788][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 373 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:59,038][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 372 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:59,286][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 372 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:08:59,534][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 371 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:08:59,783][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 371 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:00,033][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 370 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:00,282][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 370 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:00,531][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 369 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:00,782][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 369 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:01,033][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 368 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:01,292][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 368 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:01,542][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 367 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:01,794][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 367 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:02,044][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 366 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:02,298][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 366 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:02,550][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 365 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:02,798][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 365 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:03,052][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 364 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:03,305][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 364 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:03,556][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 363 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:03,803][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 363 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:04,055][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 362 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:04,310][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 362 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:04,560][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 361 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:04,810][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 361 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:05,059][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 360 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:05,309][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 360 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:05,559][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 359 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:05,808][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 359 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:06,060][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 358 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:06,308][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 358 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:06,558][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 357 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:06,808][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 357 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:07,064][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 356 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:07,318][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 356 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:07,570][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 355 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:07,819][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 355 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:08,071][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 354 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:08,319][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 354 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:08,568][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 353 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:08,820][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 353 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:09,068][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 352 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:09,318][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 352 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:09,569][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 351 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:09,821][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 351 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:10,070][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 350 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:10,319][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 350 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:10,569][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 349 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:10,819][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 349 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:11,070][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 348 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:11,321][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 348 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:11,571][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 347 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:11,822][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 347 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:12,074][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 346 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:12,321][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 346 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:12,575][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 345 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:12,823][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 345 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:13,072][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 344 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:13,321][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 344 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:13,571][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 343 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:13,836][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 343 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:14,085][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 342 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:14,339][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 342 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:14,586][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 341 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:14,835][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 341 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:15,084][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 340 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:15,332][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 340 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:15,577][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 339 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:15,827][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 339 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:16,075][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 338 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:16,323][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 338 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:16,572][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 337 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:16,825][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 337 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:17,073][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 336 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:17,327][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 336 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:17,575][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 335 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:17,826][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 335 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:18,074][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 334 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:18,325][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 334 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:18,572][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 333 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:18,823][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 333 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:19,072][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 332 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:19,322][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 332 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:19,578][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 331 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:19,836][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 331 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:20,091][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 330 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:20,340][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 330 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:20,588][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 329 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:20,838][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 329 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:21,090][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 328 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:21,341][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 328 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:21,592][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 327 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:21,843][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 327 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:22,092][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 326 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:22,343][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 326 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:22,594][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 325 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:22,842][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 325 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:23,092][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 324 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:23,340][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 324 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:23,588][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 323 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:23,839][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 323 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:24,089][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 322 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:24,336][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 322 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:24,583][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 321 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:24,831][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 321 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:25,079][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 320 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:25,324][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 320 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:25,578][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 319 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:25,828][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 319 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:26,079][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 318 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:26,328][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 318 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:26,580][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 317 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:26,829][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 317 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:27,085][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 316 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:27,331][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 316 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:27,583][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 315 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:27,832][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 315 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:28,082][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 314 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:28,342][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 314 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:28,596][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 313 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:28,847][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 313 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:29,097][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 312 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:29,346][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 312 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:29,597][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 311 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:29,850][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 311 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:30,100][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 310 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:30,351][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 310 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:30,605][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 309 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:30,857][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 309 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:31,104][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 308 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:31,355][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 308 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:31,605][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 307 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:31,865][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 307 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:32,127][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 306 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:32,395][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 306 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:32,647][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 305 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:32,896][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 305 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:33,147][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 304 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:33,398][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 304 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:33,651][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 303 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:33,898][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 303 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:34,148][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 302 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:34,396][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 302 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:34,646][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 301 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:34,895][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 301 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:35,145][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 300 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:35,393][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 300 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:35,640][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 299 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:35,890][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 299 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:36,137][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 298 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:36,386][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 298 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:36,636][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 297 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:36,885][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 297 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:37,133][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 296 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:37,383][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 296 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:37,633][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 295 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:37,883][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 295 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:38,134][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 294 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:38,382][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 294 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:38,628][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 293 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:38,877][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 293 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:39,123][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 292 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:39,376][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 292 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:39,628][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 291 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:39,879][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 291 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:40,130][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 290 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:40,381][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 290 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:40,633][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 289 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:40,883][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 289 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:41,134][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 288 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:41,382][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 288 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:41,631][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 287 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:41,878][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 287 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:42,127][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 286 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:42,377][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 286 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:42,623][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 285 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:42,876][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 285 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:43,125][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 284 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:43,373][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 284 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:43,627][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 283 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:43,876][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 283 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:44,128][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 282 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:44,378][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 282 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:44,630][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 281 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:44,879][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 281 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:45,130][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 280 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:45,377][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 280 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:45,630][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 279 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:45,881][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 279 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:46,135][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 278 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:46,384][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 278 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:46,641][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 277 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:46,892][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 277 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:47,147][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 276 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:47,398][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 276 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:47,647][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 275 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:47,896][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 275 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:48,147][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 274 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:48,396][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 274 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:48,646][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 273 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:48,900][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 273 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:49,156][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 272 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:49,407][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 272 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:49,659][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 271 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:49,910][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 271 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:50,160][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 270 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:50,427][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 270 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:50,680][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 269 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:50,935][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 269 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:51,190][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 268 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:51,450][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 268 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:51,722][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 267 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:51,982][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 267 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:52,235][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 266 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:52,491][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 266 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:52,751][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 265 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:53,000][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 265 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:53,266][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 264 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:53,517][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 264 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:53,765][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 263 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:54,018][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 263 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:54,268][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 262 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:54,520][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 262 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:54,770][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 261 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:55,020][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 261 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:55,270][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 260 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:55,523][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 260 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:55,777][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 259 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:56,031][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 259 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:56,283][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 258 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:56,535][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 258 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:56,783][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 257 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:57,043][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 257 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:57,294][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 256 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:57,541][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 256 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:57,794][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 255 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:58,046][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 255 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:58,295][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 254 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:58,546][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 254 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:58,794][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 253 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:59,048][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 253 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:59,297][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 252 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:09:59,549][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 252 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:09:59,801][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 251 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:00,051][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 251 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:00,297][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 250 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:00,547][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 250 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:00,796][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 249 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:01,045][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 249 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:01,296][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 248 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:01,545][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 248 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:01,798][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 247 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:02,046][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 247 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:02,294][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 246 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:02,548][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 246 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:02,794][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 245 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:03,046][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 245 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:03,293][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 244 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:03,545][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 244 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:03,803][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 243 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:04,055][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 243 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:04,300][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 242 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:04,554][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 242 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:04,808][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 241 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:05,055][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 241 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:05,304][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 240 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:05,553][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 240 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:05,803][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 239 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:06,050][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 239 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:06,297][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 238 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:06,544][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 238 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:06,792][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 237 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:07,043][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 237 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:07,291][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 236 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:07,544][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 236 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:07,793][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 235 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:08,041][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 235 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:08,290][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 234 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:08,535][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 234 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:08,787][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 233 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:09,036][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 233 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:09,287][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 232 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:09,535][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 232 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:09,786][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 231 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:10,033][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 231 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:10,289][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 230 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:10,536][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 230 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:10,785][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 229 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:11,037][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 229 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:11,292][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 228 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:11,551][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 228 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:11,806][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 227 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:12,059][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 227 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:12,310][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 226 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:12,564][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 226 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:12,818][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 225 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:13,071][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 225 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:13,322][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 224 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:13,570][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 224 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:13,821][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 223 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:14,069][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 223 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:14,327][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 222 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:14,577][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 222 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:14,833][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 221 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:15,087][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 221 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:15,344][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 220 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:15,590][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 220 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:15,840][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 219 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:16,090][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 219 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:16,344][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 218 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:16,594][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 218 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:16,849][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 217 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:17,104][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 217 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:17,367][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 216 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:17,618][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 216 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:17,870][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 215 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:18,143][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 215 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:18,394][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 214 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:18,645][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 214 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:18,898][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 213 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:19,148][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 213 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:19,397][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 212 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:19,647][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 212 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:19,895][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 211 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:20,144][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 211 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:20,394][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 210 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:20,648][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 210 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:20,898][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 209 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:21,172][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 209 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:21,425][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 208 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:21,678][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 208 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:21,929][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 207 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:22,179][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 207 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:22,429][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 206 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:22,680][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 206 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:22,933][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 205 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:23,191][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 205 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:23,447][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 204 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:23,697][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 204 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:23,949][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 203 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:24,199][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 203 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:24,455][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 202 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:24,702][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 202 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:24,952][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 201 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:25,202][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 201 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:25,452][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 200 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:25,703][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 200 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:25,953][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 199 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:26,202][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 199 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:26,455][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 198 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:26,704][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 198 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:26,953][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 197 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:27,203][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 197 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:27,455][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 196 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:27,710][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 196 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:27,960][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 195 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:28,211][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 195 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:28,462][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 194 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:28,713][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 194 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:28,964][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 193 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:29,214][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 193 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:29,465][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 192 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:29,714][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 192 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:29,965][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 191 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:30,216][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 191 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:30,468][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 190 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:30,724][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 190 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:30,980][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 189 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:31,234][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 189 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:31,487][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 188 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:31,736][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 188 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:31,987][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 187 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:32,237][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 187 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:32,486][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 186 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:32,735][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 186 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:32,987][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 185 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:33,249][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 185 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:33,504][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 184 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:33,758][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 184 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:34,021][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 183 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:34,274][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 183 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:34,525][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 182 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:34,777][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 182 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:35,026][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 181 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:35,277][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 181 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:35,528][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 180 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:35,772][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 180 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:36,019][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 179 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:36,264][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 179 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:36,510][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 178 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:36,760][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 178 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:37,008][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 177 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:37,253][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 177 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:37,502][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 176 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:37,751][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 176 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:37,998][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 175 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:38,243][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 175 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:38,494][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 174 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:38,744][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 174 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:38,994][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 173 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:39,244][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 173 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:39,495][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 172 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:39,749][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 172 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:40,001][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 171 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:40,252][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 171 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:40,504][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 170 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:40,755][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 170 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:41,004][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 169 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:41,253][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 169 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:41,498][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 168 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:41,748][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 168 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:41,998][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:42,244][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:42,490][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 166 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:42,737][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 166 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:42,986][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 165 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:43,233][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 165 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:43,479][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 164 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:43,727][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 164 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:43,980][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 163 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:44,230][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 163 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:44,478][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 162 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:44,727][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 162 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:44,977][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 161 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:45,228][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 161 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:45,475][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 160 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:45,730][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 160 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:45,975][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 159 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:46,225][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 159 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:46,476][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 158 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:46,724][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 158 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:46,972][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 157 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:47,220][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 157 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:47,467][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 156 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:47,714][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 156 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:47,965][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 155 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:48,215][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 155 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:48,471][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 154 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:48,723][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 154 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:48,977][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 153 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:49,224][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 153 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:49,478][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 152 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:49,725][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 152 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:49,980][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 151 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:50,230][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 151 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:50,482][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 150 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:50,736][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 150 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:50,987][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 149 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:51,236][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 149 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:51,483][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 148 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:51,732][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 148 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:51,982][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 147 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:52,234][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 147 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:52,486][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 146 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:52,737][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 146 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:52,985][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 145 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:53,237][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 145 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:53,488][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 144 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:53,742][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 144 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:53,991][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 143 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:54,246][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 143 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:54,492][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 142 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:54,740][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 142 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:54,986][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 141 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:55,236][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 141 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:55,493][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 140 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:55,742][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 140 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:55,990][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 139 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:56,236][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 139 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:56,484][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 138 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:56,734][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 138 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:56,983][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 137 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:57,232][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 137 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:57,479][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 136 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:57,730][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 136 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:58,042][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 135 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:58,304][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 135 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:58,550][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 134 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:58,800][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 134 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:59,059][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 133 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:59,314][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 133 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:10:59,569][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 132 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:10:59,818][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 132 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:00,072][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 131 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:00,321][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 131 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:00,572][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 130 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:00,827][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 130 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:01,077][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 129 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:01,331][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 129 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:01,590][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 128 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:01,853][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 128 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:02,102][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 127 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:02,347][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 127 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:02,600][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 126 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:02,848][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 126 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:03,096][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 125 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:03,349][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 125 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:03,597][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 124 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:03,848][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 124 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:04,102][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 123 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:04,351][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 123 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:04,632][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 122 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:04,883][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 122 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:05,132][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 121 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:05,383][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 121 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:05,634][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 120 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:05,882][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 120 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:06,130][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 119 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:06,417][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 119 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:06,667][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 118 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:06,917][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 118 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:07,177][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 117 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:07,428][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 117 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:07,687][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 116 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:07,937][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 116 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:08,189][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 115 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:08,448][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 115 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:08,694][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 114 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:08,943][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 114 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:09,190][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 113 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:09,443][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 113 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:09,690][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 112 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:09,940][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 112 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:10,195][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 111 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:10,442][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 111 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:10,693][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 110 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:10,945][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 110 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:11,194][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 109 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:11,445][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 109 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:11,695][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 108 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:11,948][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 108 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:12,201][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 107 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:12,448][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 107 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:12,702][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 106 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:12,955][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 106 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:13,207][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 105 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:13,457][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 105 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:13,704][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 104 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:13,957][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 104 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:14,246][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 103 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:14,496][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 103 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:14,742][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 102 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:15,004][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 102 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:15,253][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 101 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:15,502][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 101 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:15,754][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 100 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:16,005][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 100 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:16,255][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 99 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:16,508][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 99 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:11:16,758][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 98 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 11:11:17,004][db.py 39][INFO]: 查询的sql为：
    select
        avg_price
    from
        `hk-manhattan`.chain_collection_quotation
    where
        collection_uuid = 101008
        and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 98 hour), '%Y-%m-%d %H'),
        '%Y-%m-%d %H%i%m')
    
[2022-10-13 11:26:45,795][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:26:45,796][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:26:46,108][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:26:46,109][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:26:46,546][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:26:46,547][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:26:46,552][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:26:46,553][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:26:46,555][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:26:46,556][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:26:46,558][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 11:26:47,310][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[102550, 102551, 102552, 102553, 102554, 102555, 102556, 102557, 102558, 102559, 102560, 102561, 102563, 102564, 102565, 102566, 102567, 102568, 102569, 102570, 102571, 102572, 102573, 102574, 102575, 102576, 102577, 102578, 102579, 102580, 102581, 102582, 102583, 102584, 102585, 102586, 102587, 102588, 102589, 102590, 102591, 102592, 102593, 102594, 102595, 102596, 102597, 102598, 102599, 102600], start_index为：2400
[2022-10-13 11:26:47,358][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:26:47,359][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:26:47,359][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 11:26:47,359][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_DAY'}
[2022-10-13 11:26:47,359][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 11:26:47,824][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 04:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 06:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 08:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 10:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 12:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 14:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 16:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93092087, 'date': '2022-10-12 18:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 20:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 22:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93046246, 'date': '2022-10-13 00:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 02:00', 'showTime': True}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 03:00', 'showTime': True}]}
[2022-10-13 11:26:47,825][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:26:48,036][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:26:48,242][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.93686845, 15.93686845, 15.93658147, 15.93658147, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93516605, 15.93516605, 15.93516605, 15.93362158, 15.93342669, 15.93342669, 15.93092087, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93046246, 15.93030222, 15.93030222, 15.93030222]
[2022-10-13 11:26:48,243][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[[]],[[]]
[2022-10-13 11:26:48,439][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:26:48,439][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:26:48,439][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_WEEK"
}
[2022-10-13 11:26:48,440][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_WEEK'}
[2022-10-13 11:26:48,440][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_WEEK"
}
[2022-10-13 11:26:48,869][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.0, 'avgPrice': 15.86485694, 'date': '2022-10-06 05:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86483257, 'date': '2022-10-06 07:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86361793, 'date': '2022-10-06 09:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86349496, 'date': '2022-10-06 11:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.8631645, 'date': '2022-10-06 13:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86311586, 'date': '2022-10-06 15:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86311586, 'date': '2022-10-06 17:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96918404, 'date': '2022-10-06 19:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96879193, 'date': '2022-10-06 21:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96650488, 'date': '2022-10-06 23:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96434236, 'date': '2022-10-07 01:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96417436, 'date': '2022-10-07 03:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96311299, 'date': '2022-10-07 05:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96176713, 'date': '2022-10-07 07:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96167684, 'date': '2022-10-07 09:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96045898, 'date': '2022-10-07 11:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95903559, 'date': '2022-10-07 13:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95888778, 'date': '2022-10-07 15:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95791579, 'date': '2022-10-07 17:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95746736, 'date': '2022-10-07 19:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95509157, 'date': '2022-10-07 21:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07 23:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95369663, 'date': '2022-10-08 01:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95259812, 'date': '2022-10-08 03:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95237044, 'date': '2022-10-08 05:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95237044, 'date': '2022-10-08 07:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95182706, 'date': '2022-10-08 09:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95182706, 'date': '2022-10-08 11:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95093181, 'date': '2022-10-08 13:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95087703, 'date': '2022-10-08 15:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95245558, 'date': '2022-10-08 17:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95161605, 'date': '2022-10-08 19:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95161605, 'date': '2022-10-08 21:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95215079, 'date': '2022-10-08 23:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94690961, 'date': '2022-10-09 01:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94690961, 'date': '2022-10-09 03:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 05:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 07:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 09:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 11:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94592567, 'date': '2022-10-09 13:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94592567, 'date': '2022-10-09 15:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.9435523, 'date': '2022-10-09 17:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94268487, 'date': '2022-10-09 19:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94268487, 'date': '2022-10-09 21:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94263201, 'date': '2022-10-09 23:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.94109483, 'date': '2022-10-10 01:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.94022208, 'date': '2022-10-10 03:00', 'showTime': False}, {'floorPrice': 10.02, 'avgPrice': 15.94014804, 'date': '2022-10-10 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93982348, 'date': '2022-10-10 07:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93966822, 'date': '2022-10-10 09:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93921675, 'date': '2022-10-10 11:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93921675, 'date': '2022-10-10 13:00', 'showTime': False}, {'floorPrice': 10.19, 'avgPrice': 15.93800479, 'date': '2022-10-10 15:00', 'showTime': False}, {'floorPrice': 10.1, 'avgPrice': 15.93822528, 'date': '2022-10-10 17:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9376355, 'date': '2022-10-10 19:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9376355, 'date': '2022-10-10 21:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9380872, 'date': '2022-10-10 23:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 01:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 03:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 07:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93936525, 'date': '2022-10-11 09:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 11:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 13:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 15:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94202971, 'date': '2022-10-11 17:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94136192, 'date': '2022-10-11 19:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94204827, 'date': '2022-10-11 21:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94204827, 'date': '2022-10-11 23:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12 01:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93701079, 'date': '2022-10-12 03:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': False}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 03:00', 'showTime': False}]}
[2022-10-13 11:26:48,870][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:26:49,077][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:26:49,286][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.05, 10.05, 10.02, 10.3, 10.3, 10.3, 10.3, 10.19, 10.1, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.86485694, 15.86483257, 15.86361793, 15.86349496, 15.8631645, 15.86311586, 15.86311586, 15.96918404, 15.96879193, 15.96650488, 15.96434236, 15.96417436, 15.96311299, 15.96176713, 15.96167684, 15.96045898, 15.95903559, 15.95888778, 15.95791579, 15.95746736, 15.95509157, 15.95473999, 15.95369663, 15.95259812, 15.95237044, 15.95237044, 15.95182706, 15.95182706, 15.95093181, 15.95087703, 15.95245558, 15.95161605, 15.95161605, 15.95215079, 15.94690961, 15.94690961, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94592567, 15.94592567, 15.9435523, 15.94268487, 15.94268487, 15.94263201, 15.94109483, 15.94022208, 15.94014804, 15.93982348, 15.93966822, 15.93921675, 15.93921675, 15.93800479, 15.93822528, 15.9376355, 15.9376355, 15.9380872, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93936525, 15.94240175, 15.94240175, 15.94240175, 15.94202971, 15.94136192, 15.94204827, 15.94204827, 15.94076728, 15.93701079, 15.93686845, 15.93658147, 15.93525684, 15.93525684, 15.93516605, 15.93362158, 15.93342669, 15.93078298, 15.93078298, 15.93078298, 15.93030222, 15.93030222]
[2022-10-13 11:26:49,287][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[[]],[[]]
[2022-10-13 11:26:49,333][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:26:49,334][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:26:49,334][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_MONTH"
}
[2022-10-13 11:26:49,334][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_MONTH'}
[2022-10-13 11:26:49,335][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_MONTH"
}
[2022-10-13 11:26:49,743][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 7.7, 'avgPrice': 15.72366447, 'date': '2022-09-13', 'showTime': False}, {'floorPrice': 7.5, 'avgPrice': 15.72203573, 'date': '2022-09-14', 'showTime': False}, {'floorPrice': 7.63, 'avgPrice': 15.72021965, 'date': '2022-09-15', 'showTime': False}, {'floorPrice': 9.49, 'avgPrice': 15.71604586, 'date': '2022-09-16', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.76479543, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 9.899, 'avgPrice': 15.76209893, 'date': '2022-09-18', 'showTime': False}, {'floorPrice': 10.4, 'avgPrice': 15.75933884, 'date': '2022-09-19', 'showTime': False}, {'floorPrice': 11.11, 'avgPrice': 15.82966529, 'date': '2022-09-20', 'showTime': False}, {'floorPrice': 11.8, 'avgPrice': 15.86195463, 'date': '2022-09-21', 'showTime': False}, {'floorPrice': 11.15, 'avgPrice': 15.90771119, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 10.2, 'avgPrice': 15.90760049, 'date': '2022-09-23', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.90719263, 'date': '2022-09-24', 'showTime': False}, {'floorPrice': 9.25, 'avgPrice': 15.90719263, 'date': '2022-09-25', 'showTime': False}, {'floorPrice': 8.88, 'avgPrice': 15.90719263, 'date': '2022-09-26', 'showTime': False}, {'floorPrice': 9.0, 'avgPrice': 15.90716694, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 9.2, 'avgPrice': 15.9051948, 'date': '2022-09-28', 'showTime': False}, {'floorPrice': 9.55, 'avgPrice': 15.90436152, 'date': '2022-09-29', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.90434781, 'date': '2022-09-30', 'showTime': False}, {'floorPrice': 10.2, 'avgPrice': 15.89996067, 'date': '2022-10-01', 'showTime': False}, {'floorPrice': 10.44, 'avgPrice': 15.89461695, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 10.23, 'avgPrice': 15.88418119, 'date': '2022-10-03', 'showTime': False}, {'floorPrice': 10.4, 'avgPrice': 15.87724741, 'date': '2022-10-04', 'showTime': False}, {'floorPrice': 10.369, 'avgPrice': 15.86662469, 'date': '2022-10-05', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96650488, 'date': '2022-10-06', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95215079, 'date': '2022-10-08', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94263201, 'date': '2022-10-09', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9380872, 'date': '2022-10-10', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 11:26:49,744][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:26:49,951][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:26:50,160][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[7.7, 7.5, 7.63, 9.49, 9.95, 9.899, 10.4, 11.11, 11.8, 11.15, 10.2, 9.95, 9.25, 8.88, 9.0, 9.2, 9.55, 9.97, 10.2, 10.44, 10.23, 10.4, 10.369, 10.0, 10.06, 10.0, 9.97, 10.3, 10.3, 10.3],[15.72366447, 15.72203573, 15.72021965, 15.71604586, 15.76479543, 15.76209893, 15.75933884, 15.82966529, 15.86195463, 15.90771119, 15.90760049, 15.90719263, 15.90719263, 15.90719263, 15.90716694, 15.9051948, 15.90436152, 15.90434781, 15.89996067, 15.89461695, 15.88418119, 15.87724741, 15.86662469, 15.96650488, 15.95473999, 15.95215079, 15.94263201, 15.9380872, 15.94240175, 15.94076728]
[2022-10-13 11:26:50,161][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[[]],[[]]
[2022-10-13 11:26:50,202][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:26:50,202][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:26:50,203][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 11:26:50,203][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'THREE_MONTHS'}
[2022-10-13 11:26:50,203][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 11:26:50,640][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-19', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-24', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-29', 'showTime': False}, {'floorPrice': 8.899, 'avgPrice': 15.19756207, 'date': '2022-08-03', 'showTime': False}, {'floorPrice': 7.5, 'avgPrice': 15.19149379, 'date': '2022-08-08', 'showTime': False}, {'floorPrice': 7.0, 'avgPrice': 15.17617049, 'date': '2022-08-13', 'showTime': False}, {'floorPrice': 6.8, 'avgPrice': 15.15433874, 'date': '2022-08-18', 'showTime': False}, {'floorPrice': 6.78, 'avgPrice': 15.26656897, 'date': '2022-08-23', 'showTime': False}, {'floorPrice': 8.35, 'avgPrice': 15.22764058, 'date': '2022-08-28', 'showTime': False}, {'floorPrice': 8.0, 'avgPrice': 15.24912814, 'date': '2022-09-02', 'showTime': False}, {'floorPrice': 7.4, 'avgPrice': 15.74122915, 'date': '2022-09-07', 'showTime': False}, {'floorPrice': 6.87, 'avgPrice': 15.73047393, 'date': '2022-09-12', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.76479543, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 11.15, 'avgPrice': 15.90771119, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 9.0, 'avgPrice': 15.90716694, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 10.44, 'avgPrice': 15.89461695, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 11:26:50,640][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:26:50,846][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:26:51,053][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[0.0, 0.0, 0.0, 8.899, 7.5, 7.0, 6.8, 6.78, 8.35, 8.0, 7.4, 6.87, 9.95, 11.15, 9.0, 10.44, 10.06, 10.3],[0.0, 0.0, 0.0, 15.19756207, 15.19149379, 15.17617049, 15.15433874, 15.26656897, 15.22764058, 15.24912814, 15.74122915, 15.73047393, 15.76479543, 15.90771119, 15.90716694, 15.89461695, 15.95473999, 15.94076728]
[2022-10-13 11:26:51,054][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[[]],[[]]
[2022-10-13 11:28:13,496][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:28:13,497][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:28:13,803][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:28:13,805][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:28:14,469][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:28:14,470][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:28:14,476][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:28:14,477][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:28:14,480][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:28:14,481][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:28:14,484][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 11:28:14,845][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[100354, 100355, 100356, 100357, 100358, 100359, 100360, 100361, 100362, 100363, 100364, 100365, 100367, 100368, 100369, 100370, 100371, 100372, 100373, 100374, 100375, 100376, 100377, 100378, 100379, 100380, 100381, 100383, 100384, 100385, 100386, 100387, 100388, 100389, 100390, 100391, 100392, 100393, 100394, 100395, 100396, 100397, 100398, 100399, 100400, 100401, 100402, 100403, 100404, 100405], start_index为：341
[2022-10-13 11:28:14,981][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:28:14,983][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:28:14,984][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 11:28:14,984][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_DAY'}
[2022-10-13 11:28:14,984][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 11:28:15,478][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 04:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 06:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 08:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 10:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 12:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 14:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 16:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93092087, 'date': '2022-10-12 18:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 20:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 22:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93046246, 'date': '2022-10-13 00:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 02:00', 'showTime': True}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 03:00', 'showTime': True}]}
[2022-10-13 11:28:15,479][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:40:37,975][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:40:37,975][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:40:38,274][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:40:38,276][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:40:38,704][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:40:38,705][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:40:38,711][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:40:38,711][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:40:38,714][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:40:38,715][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:40:38,717][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 11:40:39,061][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[101145, 101146, 101147, 101148, 101149, 101150, 101151, 101152, 101153, 101154, 101155, 101156, 101157, 101158, 101159, 101160, 101161, 101162, 101164, 101165, 101166, 101167, 101168, 101169, 101170, 101171, 101172, 101173, 101174, 101175, 101176, 101177, 101178, 101179, 101180, 101181, 101182, 101183, 101184, 101185, 101186, 101187, 101188, 101189, 101190, 101191, 101192, 101193, 101194, 101195], start_index为：1088
[2022-10-13 11:40:39,126][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:40:39,126][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:40:39,126][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 11:40:39,126][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_DAY'}
[2022-10-13 11:40:39,126][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 11:40:39,550][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 04:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 06:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 08:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 10:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 12:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 14:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 16:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93092087, 'date': '2022-10-12 18:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 20:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 22:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93046246, 'date': '2022-10-13 00:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 02:00', 'showTime': True}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 03:00', 'showTime': True}]}
[2022-10-13 11:40:39,551][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:40:39,755][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:40:39,965][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.93686845, 15.93686845, 15.93658147, 15.93658147, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93516605, 15.93516605, 15.93516605, 15.93362158, 15.93342669, 15.93342669, 15.93092087, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93046246, 15.93030222, 15.93030222, 15.93030222]
[2022-10-13 11:40:39,965][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[[10.25, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.3, 10.3, 10.3, 10.3]],[[15.93030222, 15.93030222, 15.93030222, 15.93046246, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93092087, 15.93342669, 15.93342669, 15.93362158, 15.93516605, 15.93516605, 15.93516605, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93658147, 15.93658147, 15.93686845, 15.93686845]]
[2022-10-13 11:40:40,190][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:40:40,191][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:40:40,192][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_WEEK"
}
[2022-10-13 11:40:40,192][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_WEEK'}
[2022-10-13 11:40:40,193][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_WEEK"
}
[2022-10-13 11:40:40,638][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.0, 'avgPrice': 15.86485694, 'date': '2022-10-06 05:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86483257, 'date': '2022-10-06 07:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86361793, 'date': '2022-10-06 09:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86349496, 'date': '2022-10-06 11:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.8631645, 'date': '2022-10-06 13:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86311586, 'date': '2022-10-06 15:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86311586, 'date': '2022-10-06 17:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96918404, 'date': '2022-10-06 19:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96879193, 'date': '2022-10-06 21:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96650488, 'date': '2022-10-06 23:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96434236, 'date': '2022-10-07 01:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96417436, 'date': '2022-10-07 03:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96311299, 'date': '2022-10-07 05:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96176713, 'date': '2022-10-07 07:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96167684, 'date': '2022-10-07 09:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96045898, 'date': '2022-10-07 11:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95903559, 'date': '2022-10-07 13:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95888778, 'date': '2022-10-07 15:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95791579, 'date': '2022-10-07 17:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95746736, 'date': '2022-10-07 19:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95509157, 'date': '2022-10-07 21:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07 23:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95369663, 'date': '2022-10-08 01:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95259812, 'date': '2022-10-08 03:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95237044, 'date': '2022-10-08 05:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95237044, 'date': '2022-10-08 07:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95182706, 'date': '2022-10-08 09:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95182706, 'date': '2022-10-08 11:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95093181, 'date': '2022-10-08 13:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95087703, 'date': '2022-10-08 15:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95245558, 'date': '2022-10-08 17:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95161605, 'date': '2022-10-08 19:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95161605, 'date': '2022-10-08 21:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95215079, 'date': '2022-10-08 23:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94690961, 'date': '2022-10-09 01:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94690961, 'date': '2022-10-09 03:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 05:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 07:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 09:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 11:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94592567, 'date': '2022-10-09 13:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94592567, 'date': '2022-10-09 15:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.9435523, 'date': '2022-10-09 17:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94268487, 'date': '2022-10-09 19:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94268487, 'date': '2022-10-09 21:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94263201, 'date': '2022-10-09 23:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.94109483, 'date': '2022-10-10 01:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.94022208, 'date': '2022-10-10 03:00', 'showTime': False}, {'floorPrice': 10.02, 'avgPrice': 15.94014804, 'date': '2022-10-10 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93982348, 'date': '2022-10-10 07:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93966822, 'date': '2022-10-10 09:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93921675, 'date': '2022-10-10 11:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93921675, 'date': '2022-10-10 13:00', 'showTime': False}, {'floorPrice': 10.19, 'avgPrice': 15.93800479, 'date': '2022-10-10 15:00', 'showTime': False}, {'floorPrice': 10.1, 'avgPrice': 15.93822528, 'date': '2022-10-10 17:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9376355, 'date': '2022-10-10 19:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9376355, 'date': '2022-10-10 21:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9380872, 'date': '2022-10-10 23:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 01:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 03:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 07:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93936525, 'date': '2022-10-11 09:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 11:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 13:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 15:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94202971, 'date': '2022-10-11 17:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94136192, 'date': '2022-10-11 19:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94204827, 'date': '2022-10-11 21:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94204827, 'date': '2022-10-11 23:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12 01:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93701079, 'date': '2022-10-12 03:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': False}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 03:00', 'showTime': False}]}
[2022-10-13 11:40:40,639][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:40:40,845][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:40:41,057][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.05, 10.05, 10.02, 10.3, 10.3, 10.3, 10.3, 10.19, 10.1, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.86485694, 15.86483257, 15.86361793, 15.86349496, 15.8631645, 15.86311586, 15.86311586, 15.96918404, 15.96879193, 15.96650488, 15.96434236, 15.96417436, 15.96311299, 15.96176713, 15.96167684, 15.96045898, 15.95903559, 15.95888778, 15.95791579, 15.95746736, 15.95509157, 15.95473999, 15.95369663, 15.95259812, 15.95237044, 15.95237044, 15.95182706, 15.95182706, 15.95093181, 15.95087703, 15.95245558, 15.95161605, 15.95161605, 15.95215079, 15.94690961, 15.94690961, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94592567, 15.94592567, 15.9435523, 15.94268487, 15.94268487, 15.94263201, 15.94109483, 15.94022208, 15.94014804, 15.93982348, 15.93966822, 15.93921675, 15.93921675, 15.93800479, 15.93822528, 15.9376355, 15.9376355, 15.9380872, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93936525, 15.94240175, 15.94240175, 15.94240175, 15.94202971, 15.94136192, 15.94204827, 15.94204827, 15.94076728, 15.93701079, 15.93686845, 15.93658147, 15.93525684, 15.93525684, 15.93516605, 15.93362158, 15.93342669, 15.93078298, 15.93078298, 15.93078298, 15.93030222, 15.93030222]
[2022-10-13 11:40:41,058][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[[10.25, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.1, 10.1, 10.1, 10.19, 10.19, 10.3, 10.3, 10.3, 9.75, 10.3, 10.3, 10.3, 10.02, 10.02, 10.05, 10.05, 10.05, 10.05, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.05, 10.0, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]],[[15.93030222, 15.93030222, 15.93030222, 15.93046246, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93092087, 15.93342669, 15.93342669, 15.93362158, 15.93516605, 15.93516605, 15.93516605, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93658147, 15.93658147, 15.93686845, 15.93686845, 15.93701079, 15.93809071, 15.94076728, 15.94076728, 15.94204827, 15.94204827, 15.94204827, 15.94125156, 15.94136192, 15.94151709, 15.94202971, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.9392073, 15.93936525, 15.93976799, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.9380872, 15.9376355, 15.9376355, 15.9376355, 15.9376355, 15.9379654, 15.93822528, 15.93761213, 15.93800479, 15.9386039, 15.93921675, 15.93921675, 15.93921675, 15.93950771, 15.93966822, 15.93966822, 15.93982348, 15.93998856, 15.94014804, 15.94022208, 15.94022208, 15.94033253, 15.94109483, 15.94218505, 15.94263201, 15.94268487, 15.94268487, 15.94268487, 15.94268487, 15.94322375, 15.9435523, 15.94680418, 15.94592567, 15.94592567, 15.94592567, 15.94592567, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94690961, 15.94690961, 15.94690961, 15.95185794, 15.95215079, 15.95161605, 15.95161605, 15.95161605, 15.95161605, 15.95161605, 15.95245558, 15.94953437, 15.95087703, 15.95093181, 15.95093181, 15.95182706, 15.95182706, 15.95182706, 15.95182706, 15.95237044, 15.95237044, 15.95237044, 15.95237044, 15.9525503, 15.95259812, 15.95323581, 15.95369663, 15.95383296, 15.95473999, 15.95498046, 15.95509157, 15.95506221, 15.95746736, 15.95746736, 15.95791579, 15.95888778, 15.95888778, 15.95903559, 15.95903559, 15.95920702, 15.96045898, 15.96167684, 15.96167684, 15.96167684, 15.96176713, 15.96266416, 15.96311299, 15.96311299, 15.96417436, 15.96417436, 15.96434236, 15.9654309, 15.96650488, 15.96776559, 15.96879193, 15.96918404, 15.96918404, 15.96918404, 15.86311586, 15.86311586, 15.86311586, 15.8631645, 15.8631645, 15.86332973, 15.86349496, 15.86349496, 15.86361793, 15.86465748, 15.86483257, 15.86483257, 15.86485694, 15.86621732]]
[2022-10-13 11:40:41,262][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:40:41,262][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:40:41,263][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_MONTH"
}
[2022-10-13 11:40:41,263][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_MONTH'}
[2022-10-13 11:40:41,263][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_MONTH"
}
[2022-10-13 11:40:41,673][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 7.7, 'avgPrice': 15.72366447, 'date': '2022-09-13', 'showTime': False}, {'floorPrice': 7.5, 'avgPrice': 15.72203573, 'date': '2022-09-14', 'showTime': False}, {'floorPrice': 7.63, 'avgPrice': 15.72021965, 'date': '2022-09-15', 'showTime': False}, {'floorPrice': 9.49, 'avgPrice': 15.71604586, 'date': '2022-09-16', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.76479543, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 9.899, 'avgPrice': 15.76209893, 'date': '2022-09-18', 'showTime': False}, {'floorPrice': 10.4, 'avgPrice': 15.75933884, 'date': '2022-09-19', 'showTime': False}, {'floorPrice': 11.11, 'avgPrice': 15.82966529, 'date': '2022-09-20', 'showTime': False}, {'floorPrice': 11.8, 'avgPrice': 15.86195463, 'date': '2022-09-21', 'showTime': False}, {'floorPrice': 11.15, 'avgPrice': 15.90771119, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 10.2, 'avgPrice': 15.90760049, 'date': '2022-09-23', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.90719263, 'date': '2022-09-24', 'showTime': False}, {'floorPrice': 9.25, 'avgPrice': 15.90719263, 'date': '2022-09-25', 'showTime': False}, {'floorPrice': 8.88, 'avgPrice': 15.90719263, 'date': '2022-09-26', 'showTime': False}, {'floorPrice': 9.0, 'avgPrice': 15.90716694, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 9.2, 'avgPrice': 15.9051948, 'date': '2022-09-28', 'showTime': False}, {'floorPrice': 9.55, 'avgPrice': 15.90436152, 'date': '2022-09-29', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.90434781, 'date': '2022-09-30', 'showTime': False}, {'floorPrice': 10.2, 'avgPrice': 15.89996067, 'date': '2022-10-01', 'showTime': False}, {'floorPrice': 10.44, 'avgPrice': 15.89461695, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 10.23, 'avgPrice': 15.88418119, 'date': '2022-10-03', 'showTime': False}, {'floorPrice': 10.4, 'avgPrice': 15.87724741, 'date': '2022-10-04', 'showTime': False}, {'floorPrice': 10.369, 'avgPrice': 15.86662469, 'date': '2022-10-05', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96650488, 'date': '2022-10-06', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95215079, 'date': '2022-10-08', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94263201, 'date': '2022-10-09', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9380872, 'date': '2022-10-10', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 11:40:41,673][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:40:41,982][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:40:42,196][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[7.7, 7.5, 7.63, 9.49, 9.95, 9.899, 10.4, 11.11, 11.8, 11.15, 10.2, 9.95, 9.25, 8.88, 9.0, 9.2, 9.55, 9.97, 10.2, 10.44, 10.23, 10.4, 10.369, 10.0, 10.06, 10.0, 9.97, 10.3, 10.3, 10.3],[15.72366447, 15.72203573, 15.72021965, 15.71604586, 15.76479543, 15.76209893, 15.75933884, 15.82966529, 15.86195463, 15.90771119, 15.90760049, 15.90719263, 15.90719263, 15.90719263, 15.90716694, 15.9051948, 15.90436152, 15.90434781, 15.89996067, 15.89461695, 15.88418119, 15.87724741, 15.86662469, 15.96650488, 15.95473999, 15.95215079, 15.94263201, 15.9380872, 15.94240175, 15.94076728]
[2022-10-13 11:40:42,197][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[[10.25, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.1, 10.1, 10.1, 10.19, 10.19, 10.3, 10.3, 10.3, 9.75, 10.3, 10.3, 10.3, 10.02, 10.02, 10.05, 10.05, 10.05, 10.05, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.05, 10.0, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.35, 10.369, 10.369, 10.369, 10.369, 10.369, 10.38, 10.38, 10.38, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 9.99, 9.99, 10.1, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.23, 10.23, 10.15, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.35, 10.35, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.0, 10.0, 10.44, 9.7, 9.7, 9.7, 9.7, 9.7, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.95, 9.95, 9.95, 9.95, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.65, 9.65, 9.65, 9.65, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.69, 8.69, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 9.0, 9.0, 9.0, 9.1, 9.1, 9.25, 9.25, 9.25, 9.25, 9.25, 9.54, 9.54, 9.54, 9.69, 9.69, 9.69, 9.69, 9.8, 9.89, 9.89, 9.89, 9.89, 9.69, 9.69, 9.949, 9.949, 9.949, 9.949, 9.949, 9.95, 9.95, 9.95, 9.95, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.1, 10.1, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.888, 10.888, 10.888, 10.975, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.69, 11.69, 11.69, 11.7, 11.7, 11.95, 11.95, 11.95, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.75, 11.75, 11.8, 11.8, 11.8, 11.8, 11.8, 11.895, 11.895, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.2, 11.2, 11.29, 11.29, 11.29, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.45, 11.49, 10.5, 10.5, 10.5, 10.5, 10.4, 10.4, 10.4, 10.4, 10.4, 10.349, 10.349, 10.1, 10.1, 10.1, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 10.2, 9.95, 10.0, 10.2, 10.2, 10.349, 10.349, 10.349, 10.45, 10.45, 9.49, 9.49, 9.49, 8.5, 8.5, 7.999, 7.999, 7.999, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.63, 7.63, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.6, 7.63, 7.63, 7.63, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.5, 7.49, 7.1, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87]],[[15.93030222, 15.93030222, 15.93030222, 15.93046246, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93092087, 15.93342669, 15.93342669, 15.93362158, 15.93516605, 15.93516605, 15.93516605, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93658147, 15.93658147, 15.93686845, 15.93686845, 15.93701079, 15.93809071, 15.94076728, 15.94076728, 15.94204827, 15.94204827, 15.94204827, 15.94125156, 15.94136192, 15.94151709, 15.94202971, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.9392073, 15.93936525, 15.93976799, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.9380872, 15.9376355, 15.9376355, 15.9376355, 15.9376355, 15.9379654, 15.93822528, 15.93761213, 15.93800479, 15.9386039, 15.93921675, 15.93921675, 15.93921675, 15.93950771, 15.93966822, 15.93966822, 15.93982348, 15.93998856, 15.94014804, 15.94022208, 15.94022208, 15.94033253, 15.94109483, 15.94218505, 15.94263201, 15.94268487, 15.94268487, 15.94268487, 15.94268487, 15.94322375, 15.9435523, 15.94680418, 15.94592567, 15.94592567, 15.94592567, 15.94592567, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94690961, 15.94690961, 15.94690961, 15.95185794, 15.95215079, 15.95161605, 15.95161605, 15.95161605, 15.95161605, 15.95161605, 15.95245558, 15.94953437, 15.95087703, 15.95093181, 15.95093181, 15.95182706, 15.95182706, 15.95182706, 15.95182706, 15.95237044, 15.95237044, 15.95237044, 15.95237044, 15.9525503, 15.95259812, 15.95323581, 15.95369663, 15.95383296, 15.95473999, 15.95498046, 15.95509157, 15.95506221, 15.95746736, 15.95746736, 15.95791579, 15.95888778, 15.95888778, 15.95903559, 15.95903559, 15.95920702, 15.96045898, 15.96167684, 15.96167684, 15.96167684, 15.96176713, 15.96266416, 15.96311299, 15.96311299, 15.96417436, 15.96417436, 15.96434236, 15.9654309, 15.96650488, 15.96776559, 15.96879193, 15.96918404, 15.96918404, 15.96918404, 15.86311586, 15.86311586, 15.86311586, 15.8631645, 15.8631645, 15.86332973, 15.86349496, 15.86349496, 15.86361793, 15.86465748, 15.86483257, 15.86483257, 15.86485694, 15.86621732, 15.86621732, 15.8663545, 15.8663545, 15.86662469, 15.86662469, 15.86706325, 15.86706325, 15.86720046, 15.87163515, 15.87178947, 15.87282402, 15.87302044, 15.87361985, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87386439, 15.87386439, 15.8760553, 15.8760553, 15.87732602, 15.87732602, 15.87701442, 15.87701442, 15.87724741, 15.87756568, 15.87772088, 15.87774566, 15.87819392, 15.87819392, 15.8784728, 15.87916638, 15.87958028, 15.87965367, 15.87965367, 15.87965367, 15.87965367, 15.87965367, 15.87998914, 15.87992928, 15.88008544, 15.88023739, 15.88023739, 15.88023739, 15.8811344, 15.88140071, 15.88140071, 15.88418119, 15.88418119, 15.88418119, 15.88418119, 15.88418119, 15.88436859, 15.88469024, 15.88553081, 15.88674176, 15.88796243, 15.88796243, 15.89260699, 15.89260699, 15.8925474, 15.89270837, 15.89284672, 15.89284672, 15.89284672, 15.8932902, 15.89345261, 15.89345261, 15.89412532, 15.89427505, 15.89444175, 15.89444175, 15.89461695, 15.89490231, 15.89490231, 15.89580096, 15.89580096, 15.89580096, 15.89596066, 15.89596066, 15.89596066, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89756934, 15.89756934, 15.89772205, 15.89772205, 15.89772205, 15.89790306, 15.89790306, 15.89808632, 15.89996067, 15.90009933, 15.90009933, 15.9002663, 15.90080281, 15.90084245, 15.90207663, 15.90251351, 15.90251351, 15.90251351, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90412687, 15.90412687, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90454285, 15.90461094, 15.90499927, 15.90499927, 15.90499927, 15.9051948, 15.9051948, 15.90538942, 15.90550002, 15.90568426, 15.90629045, 15.90629045, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90669383, 15.90669383, 15.90686256, 15.90686256, 15.90708459, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90695951, 15.90695951, 15.90695951, 15.90733727, 15.86159919, 15.86159919, 15.86167179, 15.86167179, 15.86167179, 15.86167179, 15.86167179, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.85941402, 15.85941402, 15.85941402, 15.85954892, 15.85960162, 15.85982985, 15.85995344, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82940981, 15.82940981, 15.829534, 15.829534, 15.829534, 15.829534, 15.829534, 15.82966529, 15.82966529, 15.82966529, 15.82967464, 15.82967464, 15.82967464, 15.82967464, 15.82967464, 15.82994659, 15.8301454, 15.8301454, 15.8301454, 15.83021149, 15.83083219, 15.83136763, 15.83136763, 15.83225147, 15.75638607, 15.75679424, 15.75692928, 15.7575365, 15.75811711, 15.75840154, 15.75918237, 15.75933884, 15.7599563, 15.75742135, 15.75801531, 15.75840393, 15.75877127, 15.75905234, 15.75946976, 15.75996795, 15.76046221, 15.76046221, 15.76046221, 15.76064119, 15.76130757, 15.76130757, 15.76130757, 15.76130757, 15.76130757, 15.76185603, 15.762017, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76226844, 15.76246823, 15.76260364, 15.76305854, 15.76370166, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76427303, 15.76443697, 15.76443697, 15.76455285, 15.76455285, 15.76463147, 15.76479543, 15.76496807, 15.76496807, 15.76541653, 15.76547557, 15.76547557, 15.76547557, 15.7657285, 15.76588827, 15.76588827, 15.76632067, 15.76651575, 15.76700834, 15.76840115, 15.76855681, 15.76903151, 15.7691391, 15.7710968, 15.72329528, 15.7117878, 15.71271018, 15.71336111, 15.71394222, 15.71488649, 15.71604586, 15.71626623, 15.71626623, 15.71626623, 15.71646662, 15.71646662, 15.71646662, 15.71646662, 15.71646662, 15.71665846, 15.71690528, 15.71690528, 15.71706886, 15.71706886, 15.71706886, 15.71729606, 15.71776552, 15.71981423, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.72021965, 15.72021965, 15.71961443, 15.71961443, 15.71982246, 15.72046692, 15.72046692, 15.72046692, 15.72068757, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72136274, 15.72155485, 15.72155485, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.7222847, 15.7222847, 15.7222847, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72298205, 15.72320284, 15.72320284, 15.72342364, 15.72342364, 15.72366447, 15.72366447, 15.72366447, 15.72366447, 15.72372015, 15.72443001, 15.72486981, 15.72534961, 15.72574888, 15.72624371, 15.72845927, 15.72871203, 15.72871203, 15.72871203, 15.72922988, 15.72922988, 15.72922988, 15.72947649, 15.72947649, 15.72957891, 15.72957891, 15.72957891, 15.72957891]]
[2022-10-13 11:40:42,410][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:40:42,411][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:40:42,411][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 11:40:42,411][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'THREE_MONTHS'}
[2022-10-13 11:40:42,412][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 11:40:42,851][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-19', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-24', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-29', 'showTime': False}, {'floorPrice': 8.899, 'avgPrice': 15.19756207, 'date': '2022-08-03', 'showTime': False}, {'floorPrice': 7.5, 'avgPrice': 15.19149379, 'date': '2022-08-08', 'showTime': False}, {'floorPrice': 7.0, 'avgPrice': 15.17617049, 'date': '2022-08-13', 'showTime': False}, {'floorPrice': 6.8, 'avgPrice': 15.15433874, 'date': '2022-08-18', 'showTime': False}, {'floorPrice': 6.78, 'avgPrice': 15.26656897, 'date': '2022-08-23', 'showTime': False}, {'floorPrice': 8.35, 'avgPrice': 15.22764058, 'date': '2022-08-28', 'showTime': False}, {'floorPrice': 8.0, 'avgPrice': 15.24912814, 'date': '2022-09-02', 'showTime': False}, {'floorPrice': 7.4, 'avgPrice': 15.74122915, 'date': '2022-09-07', 'showTime': False}, {'floorPrice': 6.87, 'avgPrice': 15.73047393, 'date': '2022-09-12', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.76479543, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 11.15, 'avgPrice': 15.90771119, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 9.0, 'avgPrice': 15.90716694, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 10.44, 'avgPrice': 15.89461695, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 11:40:42,851][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:40:43,186][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:40:43,426][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[0.0, 0.0, 0.0, 8.899, 7.5, 7.0, 6.8, 6.78, 8.35, 8.0, 7.4, 6.87, 9.95, 11.15, 9.0, 10.44, 10.06, 10.3],[0.0, 0.0, 0.0, 15.19756207, 15.19149379, 15.17617049, 15.15433874, 15.26656897, 15.22764058, 15.24912814, 15.74122915, 15.73047393, 15.76479543, 15.90771119, 15.90716694, 15.89461695, 15.95473999, 15.94076728]
[2022-10-13 11:40:43,429][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[[10.25, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.1, 10.1, 10.1, 10.19, 10.19, 10.3, 10.3, 10.3, 9.75, 10.3, 10.3, 10.3, 10.02, 10.02, 10.05, 10.05, 10.05, 10.05, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.05, 10.0, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.35, 10.369, 10.369, 10.369, 10.369, 10.369, 10.38, 10.38, 10.38, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 9.99, 9.99, 10.1, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.23, 10.23, 10.15, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.35, 10.35, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.0, 10.0, 10.44, 9.7, 9.7, 9.7, 9.7, 9.7, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.95, 9.95, 9.95, 9.95, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.65, 9.65, 9.65, 9.65, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.69, 8.69, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 9.0, 9.0, 9.0, 9.1, 9.1, 9.25, 9.25, 9.25, 9.25, 9.25, 9.54, 9.54, 9.54, 9.69, 9.69, 9.69, 9.69, 9.8, 9.89, 9.89, 9.89, 9.89, 9.69, 9.69, 9.949, 9.949, 9.949, 9.949, 9.949, 9.95, 9.95, 9.95, 9.95, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.1, 10.1, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.888, 10.888, 10.888, 10.975, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.69, 11.69, 11.69, 11.7, 11.7, 11.95, 11.95, 11.95, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.75, 11.75, 11.8, 11.8, 11.8, 11.8, 11.8, 11.895, 11.895, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.2, 11.2, 11.29, 11.29, 11.29, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.45, 11.49, 10.5, 10.5, 10.5, 10.5, 10.4, 10.4, 10.4, 10.4, 10.4, 10.349, 10.349, 10.1, 10.1, 10.1, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 10.2, 9.95, 10.0, 10.2, 10.2, 10.349, 10.349, 10.349, 10.45, 10.45, 9.49, 9.49, 9.49, 8.5, 8.5, 7.999, 7.999, 7.999, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.63, 7.63, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.6, 7.63, 7.63, 7.63, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.5, 7.49, 7.1, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.8, 6.85, 6.86, 6.88, 6.88, 6.9, 6.9, 6.9, 6.9, 6.9, 6.93, 6.95, 6.95, 6.95, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.1, 7.11, 7.19, 7.3, 7.3, 7.3, 7.3, 7.31, 7.31, 7.3, 7.34, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.38, 7.39, 7.41, 7.41, 7.48, 7.48, 7.48, 7.48, 7.48, 7.48, 7.48, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.399999, 7.399999, 7.399999, 7.399999, 7.399999, 7.399999, 7.399999, 7.399999, 6.95, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.4, 7.4, 7.4, 7.4, 7.4, 7.0, 7.0, 7.4, 7.4, 7.4, 7.2, 7.2, 7.2, 7.39999, 7.39999, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.59, 7.59, 7.59, 7.59, 7.59, 7.59, 7.6, 7.6, 7.6, 7.6, 7.6, 7.5, 7.5, 7.55, 7.55, 7.6, 7.6, 7.6, 7.75, 7.75, 7.8, 7.85, 7.85, 7.85, 7.85, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 7.99, 7.99, 8.0, 8.0, 8.0, 7.86, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.96, 7.95, 7.95, 7.95, 7.95, 7.96, 7.96, 7.96, 7.45, 7.45, 7.96, 7.96, 7.96, 7.96, 7.96, 7.96, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.98, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.98, 7.98, 7.98, 7.99, 8.09, 8.09, 8.09, 8.09, 8.09, 8.1, 8.1, 8.15, 8.15, 8.15, 8.199, 8.199, 8.199, 8.199, 8.199, 8.199, 8.199, 8.28, 8.295, 8.295, 8.295, 8.295, 8.295, 8.3, 8.3, 8.3, 8.3, 8.35, 8.35, 8.35, 8.4, 8.4, 8.3, 8.5, 8.5, 8.53, 8.53, 8.53, 8.515, 8.53, 8.53, 8.53, 8.54, 8.54, 8.54, 8.54, 8.54, 8.25, 8.25, 8.25, 8.25, 8.25, 8.25, 8.49, 8.49, 8.49, 8.49, 8.48, 8.29, 8.29, 8.49, 8.49, 8.49, 8.49, 8.49, 8.5, 8.5, 8.55, 8.55, 8.65, 8.65, 8.65, 8.65, 8.69, 8.75, 8.75, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.35, 8.35, 8.35, 8.35, 8.4, 8.4, 8.3, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.45, 8.45, 8.45, 8.5, 8.75, 8.8, 8.8, 8.8888, 8.88, 8.88, 8.88, 8.88, 8.88, 8.8887, 8.8887, 8.45, 8.0, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.36, 7.36, 7.36, 6.99, 6.99, 6.99, 6.96, 6.96, 6.96, 6.96, 6.96, 6.96, 6.96, 6.96, 6.96, 6.96, 6.875, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.78, 6.78, 6.78, 6.38, 6.38, 6.38, 6.38, 6.3, 6.3, 6.3, 6.3, 6.3, 6.25, 6.25, 6.25, 6.25, 5.8, 5.8, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 5.99, 5.99, 5.99, 6.0, 6.0, 6.0, 6.0, 6.0, 6.1, 6.1, 6.1, 6.1, 6.1, 6.135, 6.25, 6.25, 6.25, 6.25, 6.29, 6.29, 6.29, 6.29, 6.29, 6.29, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.65, 6.65, 6.65, 6.65, 6.65, 6.7, 6.65, 6.65, 6.65, 6.65, 6.65, 6.78, 6.78, 6.78, 6.78, 6.78, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.789, 6.789, 6.789, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.65, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.4, 6.4, 6.4, 6.5, 6.5, 6.5, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.35, 6.35, 6.35, 6.35, 6.35, 6.35, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.479, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.7398, 7.7398, 7.7398, 7.74, 7.74, 7.74, 7.74, 7.74, 7.74, 7.74, 7.74, 7.7888, 7.79, 7.8, 7.8, 7.8, 7.8, 7.8, 7.8, 7.8, 7.8, 7.83, 7.83, 7.83, 7.83, 7.83, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.88, 7.88, 7.88, 7.88, 7.88, 7.88, 7.88, 7.88, 7.88, 7.69, 7.69, 7.69, 7.69, 7.69, 7.95, 7.95, 7.95, 8.1, 8.1, 8.1, 8.1, 8.1, 8.1, 8.1, 8.1, 8.1, 8.3, 8.3, 8.3, 8.3, 8.3, 8.3, 8.3, 8.28, 8.28, 8.28, 8.28, 8.29, 8.29, 8.29, 8.3, 8.3, 8.3, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 7.5, 7.5, 7.5, 7.5, 8.0, 8.0, 8.0, 8.43, 8.43, 8.45, 8.3795, 8.3795, 8.3795, 8.3795, 8.3795, 8.3795, 8.15, 8.3795, 8.3795, 8.3795, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39, 8.49, 8.5, 8.5, 8.5, 8.45, 8.45, 8.45, 8.45, 8.45, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.39, 8.39, 8.39, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.9, 8.9, 8.9, 8.9, 8.9, 8.9, 8.99, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 8.9, 8.899, 8.899, 8.899, 8.899, 8.899, 8.9, 8.999, 9.0, 9.0, 9.269, 9.38, 9.398, 9.398, 9.398, 9.398, 9.398, 9.399, 9.399]],[[15.93030222, 15.93030222, 15.93030222, 15.93046246, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93092087, 15.93342669, 15.93342669, 15.93362158, 15.93516605, 15.93516605, 15.93516605, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93658147, 15.93658147, 15.93686845, 15.93686845, 15.93701079, 15.93809071, 15.94076728, 15.94076728, 15.94204827, 15.94204827, 15.94204827, 15.94125156, 15.94136192, 15.94151709, 15.94202971, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.9392073, 15.93936525, 15.93976799, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.9380872, 15.9376355, 15.9376355, 15.9376355, 15.9376355, 15.9379654, 15.93822528, 15.93761213, 15.93800479, 15.9386039, 15.93921675, 15.93921675, 15.93921675, 15.93950771, 15.93966822, 15.93966822, 15.93982348, 15.93998856, 15.94014804, 15.94022208, 15.94022208, 15.94033253, 15.94109483, 15.94218505, 15.94263201, 15.94268487, 15.94268487, 15.94268487, 15.94268487, 15.94322375, 15.9435523, 15.94680418, 15.94592567, 15.94592567, 15.94592567, 15.94592567, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94690961, 15.94690961, 15.94690961, 15.95185794, 15.95215079, 15.95161605, 15.95161605, 15.95161605, 15.95161605, 15.95161605, 15.95245558, 15.94953437, 15.95087703, 15.95093181, 15.95093181, 15.95182706, 15.95182706, 15.95182706, 15.95182706, 15.95237044, 15.95237044, 15.95237044, 15.95237044, 15.9525503, 15.95259812, 15.95323581, 15.95369663, 15.95383296, 15.95473999, 15.95498046, 15.95509157, 15.95506221, 15.95746736, 15.95746736, 15.95791579, 15.95888778, 15.95888778, 15.95903559, 15.95903559, 15.95920702, 15.96045898, 15.96167684, 15.96167684, 15.96167684, 15.96176713, 15.96266416, 15.96311299, 15.96311299, 15.96417436, 15.96417436, 15.96434236, 15.9654309, 15.96650488, 15.96776559, 15.96879193, 15.96918404, 15.96918404, 15.96918404, 15.86311586, 15.86311586, 15.86311586, 15.8631645, 15.8631645, 15.86332973, 15.86349496, 15.86349496, 15.86361793, 15.86465748, 15.86483257, 15.86483257, 15.86485694, 15.86621732, 15.86621732, 15.8663545, 15.8663545, 15.86662469, 15.86662469, 15.86706325, 15.86706325, 15.86720046, 15.87163515, 15.87178947, 15.87282402, 15.87302044, 15.87361985, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87386439, 15.87386439, 15.8760553, 15.8760553, 15.87732602, 15.87732602, 15.87701442, 15.87701442, 15.87724741, 15.87756568, 15.87772088, 15.87774566, 15.87819392, 15.87819392, 15.8784728, 15.87916638, 15.87958028, 15.87965367, 15.87965367, 15.87965367, 15.87965367, 15.87965367, 15.87998914, 15.87992928, 15.88008544, 15.88023739, 15.88023739, 15.88023739, 15.8811344, 15.88140071, 15.88140071, 15.88418119, 15.88418119, 15.88418119, 15.88418119, 15.88418119, 15.88436859, 15.88469024, 15.88553081, 15.88674176, 15.88796243, 15.88796243, 15.89260699, 15.89260699, 15.8925474, 15.89270837, 15.89284672, 15.89284672, 15.89284672, 15.8932902, 15.89345261, 15.89345261, 15.89412532, 15.89427505, 15.89444175, 15.89444175, 15.89461695, 15.89490231, 15.89490231, 15.89580096, 15.89580096, 15.89580096, 15.89596066, 15.89596066, 15.89596066, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89756934, 15.89756934, 15.89772205, 15.89772205, 15.89772205, 15.89790306, 15.89790306, 15.89808632, 15.89996067, 15.90009933, 15.90009933, 15.9002663, 15.90080281, 15.90084245, 15.90207663, 15.90251351, 15.90251351, 15.90251351, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90412687, 15.90412687, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90454285, 15.90461094, 15.90499927, 15.90499927, 15.90499927, 15.9051948, 15.9051948, 15.90538942, 15.90550002, 15.90568426, 15.90629045, 15.90629045, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90669383, 15.90669383, 15.90686256, 15.90686256, 15.90708459, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90695951, 15.90695951, 15.90695951, 15.90733727, 15.86159919, 15.86159919, 15.86167179, 15.86167179, 15.86167179, 15.86167179, 15.86167179, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.85941402, 15.85941402, 15.85941402, 15.85954892, 15.85960162, 15.85982985, 15.85995344, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82940981, 15.82940981, 15.829534, 15.829534, 15.829534, 15.829534, 15.829534, 15.82966529, 15.82966529, 15.82966529, 15.82967464, 15.82967464, 15.82967464, 15.82967464, 15.82967464, 15.82994659, 15.8301454, 15.8301454, 15.8301454, 15.83021149, 15.83083219, 15.83136763, 15.83136763, 15.83225147, 15.75638607, 15.75679424, 15.75692928, 15.7575365, 15.75811711, 15.75840154, 15.75918237, 15.75933884, 15.7599563, 15.75742135, 15.75801531, 15.75840393, 15.75877127, 15.75905234, 15.75946976, 15.75996795, 15.76046221, 15.76046221, 15.76046221, 15.76064119, 15.76130757, 15.76130757, 15.76130757, 15.76130757, 15.76130757, 15.76185603, 15.762017, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76226844, 15.76246823, 15.76260364, 15.76305854, 15.76370166, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76427303, 15.76443697, 15.76443697, 15.76455285, 15.76455285, 15.76463147, 15.76479543, 15.76496807, 15.76496807, 15.76541653, 15.76547557, 15.76547557, 15.76547557, 15.7657285, 15.76588827, 15.76588827, 15.76632067, 15.76651575, 15.76700834, 15.76840115, 15.76855681, 15.76903151, 15.7691391, 15.7710968, 15.72329528, 15.7117878, 15.71271018, 15.71336111, 15.71394222, 15.71488649, 15.71604586, 15.71626623, 15.71626623, 15.71626623, 15.71646662, 15.71646662, 15.71646662, 15.71646662, 15.71646662, 15.71665846, 15.71690528, 15.71690528, 15.71706886, 15.71706886, 15.71706886, 15.71729606, 15.71776552, 15.71981423, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.72021965, 15.72021965, 15.71961443, 15.71961443, 15.71982246, 15.72046692, 15.72046692, 15.72046692, 15.72068757, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72136274, 15.72155485, 15.72155485, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.7222847, 15.7222847, 15.7222847, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72298205, 15.72320284, 15.72320284, 15.72342364, 15.72342364, 15.72366447, 15.72366447, 15.72366447, 15.72366447, 15.72372015, 15.72443001, 15.72486981, 15.72534961, 15.72574888, 15.72624371, 15.72845927, 15.72871203, 15.72871203, 15.72871203, 15.72922988, 15.72922988, 15.72922988, 15.72947649, 15.72947649, 15.72957891, 15.72957891, 15.72957891, 15.72957891, 15.72957891, 15.72957891, 15.72957891, 15.729843, 15.73047393, 15.73047393, 15.73047393, 15.73060929, 15.73088092, 15.73088092, 15.73088092, 15.73115918, 15.73115918, 15.73115918, 15.73115918, 15.73164176, 15.73164176, 15.73164176, 15.73218324, 15.73245491, 15.73245491, 15.73245491, 15.7329902, 15.7329902, 15.73324322, 15.73324322, 15.73324322, 15.73401331, 15.73426638, 15.7344649, 15.7344649, 15.7344649, 15.7344649, 15.7344649, 15.7344649, 15.7344649, 15.73469778, 15.73469778, 15.73495472, 15.73517617, 15.73517617, 15.73517617, 15.73517617, 15.73541196, 15.73541196, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73619976, 15.73619976, 15.73619976, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73665717, 15.73665717, 15.73665717, 15.73665717, 15.73691422, 15.73718439, 15.7373716, 15.7373716, 15.7373716, 15.7373716, 15.7373716, 15.7373716, 15.7373716, 15.7373716, 15.73763597, 15.73763597, 15.73763597, 15.73788621, 15.73788621, 15.73813646, 15.73879126, 15.73879126, 15.73879126, 15.73879126, 15.73904156, 15.73904156, 15.73924891, 15.73924891, 15.73924891, 15.73950067, 15.73950067, 15.73950067, 15.73950067, 15.73950067, 15.73950067, 15.73975102, 15.73994408, 15.73994408, 15.73994408, 15.73994408, 15.73994408, 15.73994408, 15.73994408, 15.74021264, 15.74021264, 15.74049086, 15.74096151, 15.74122915, 15.74122915, 15.74122915, 15.74122915, 15.74122915, 15.74122915, 15.74122915, 15.74122915, 15.7414739, 15.74199855, 15.74222048, 15.74247818, 15.74247818, 15.74247818, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74368183, 15.38969544, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39090527, 15.391152, 15.391152, 15.391152, 15.391152, 15.35053051, 15.24270126, 15.24294187, 15.24315795, 15.24339462, 15.24339462, 15.24407201, 15.24407201, 15.24430689, 15.24430689, 15.24642067, 15.2471115, 15.2471115, 15.2471115, 15.24720507, 15.24634817, 15.24634817, 15.24681478, 15.24681478, 15.24710275, 15.24710275, 15.24710275, 15.2473298, 15.24753883, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24795108, 15.24795108, 15.24789983, 15.24789983, 15.24789983, 15.24789983, 15.24789983, 15.24789983, 15.24789983, 15.24789983, 15.24813057, 15.24813057, 15.24831084, 15.24831084, 15.24876486, 15.24876486, 15.24897667, 15.24897667, 15.24897667, 15.24897667, 15.24897667, 15.24897667, 15.24912814, 15.24912814, 15.24912814, 15.24912814, 15.24912814, 15.24912814, 15.24912814, 15.24912814, 15.24981321, 15.24981321, 15.24981321, 15.25003397, 15.25007438, 15.25002387, 15.25066298, 15.25084918, 15.25084918, 15.25084918, 15.25104448, 15.25104448, 15.25104448, 15.25104448, 15.25104448, 15.25104448, 15.25104448, 15.25122498, 15.25108932, 15.25131773, 15.25131773, 15.25131773, 15.25131773, 15.25154154, 15.25193317, 15.25193317, 15.25214402, 15.25214402, 15.25214402, 15.25214402, 15.25244807, 15.25244807, 15.25262862, 15.2528398, 15.2528398, 15.25306832, 15.25306832, 15.25306832, 15.25306832, 15.25306832, 15.22400251, 15.22400251, 15.22400251, 15.22400251, 15.22400251, 15.22446259, 15.2246482, 15.2246482, 15.2246482, 15.2246482, 15.2246482, 15.22502264, 15.22525163, 15.2254474, 15.2254474, 15.22565676, 15.22588129, 15.22588129, 15.22588129, 15.22329936, 15.22300228, 15.22300228, 15.22300228, 15.22300228, 15.22300228, 15.22300228, 15.22321687, 15.22364897, 15.22364897, 15.22384336, 15.22384336, 15.22384336, 15.22401492, 15.22401492, 15.22401492, 15.22401492, 15.22401492, 15.22401492, 15.22462349, 15.22462349, 15.22481793, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22540189, 15.22540189, 15.22540189, 15.22540189, 15.22540189, 15.22540189, 15.22561083, 15.22561083, 15.22561083, 15.22561083, 15.22561083, 15.22452154, 15.22472194, 15.22472194, 15.2251223, 15.2251223, 15.22515773, 15.22531464, 15.22554517, 15.22575417, 15.22707992, 15.22707992, 15.22707992, 15.2272809, 15.2272809, 15.2272809, 15.2272809, 15.22749722, 15.22748934, 15.22764058, 15.22764058, 15.22764058, 15.22764058, 15.22785429, 15.22815053, 15.22849448, 15.22879709, 15.22944673, 15.22953848, 15.22966816, 15.22966816, 15.22966816, 15.23002741, 15.23002741, 15.23002741, 15.23002741, 15.23038514, 15.23038514, 15.23038514, 15.23038514, 15.23058, 15.23058, 15.23058, 15.23058, 15.23080376, 15.23101167, 15.23101167, 15.23101167, 15.23101167, 15.23180918, 15.23261415, 15.23344926, 15.23382254, 15.23382254, 15.2340089, 15.23401881, 15.23401881, 15.23401881, 15.23401881, 15.23401881, 15.23420522, 15.23450249, 15.23450249, 15.23509282, 15.23530971, 15.23572179, 15.23612555, 15.23635733, 15.23635733, 15.23646561, 15.23453891, 15.23453891, 15.23473221, 15.23495332, 15.23570693, 15.23660514, 15.23660514, 15.23667578, 15.23667578, 15.23667578, 15.23667578, 15.23667578, 15.23687909, 15.23709323, 15.23660718, 15.23676589, 15.23697833, 15.23753747, 15.23781807, 15.23816339, 15.23849628, 15.23901919, 15.23923613, 15.23954337, 15.24101459, 15.24346299, 15.24551847, 15.24816327, 15.2499079, 15.25012183, 15.25012183, 15.2510807, 15.25106329, 15.25106329, 15.25122493, 15.25134128, 15.25157023, 15.25058256, 15.25232232, 15.25312966, 15.25356175, 15.25380297, 15.25404421, 15.25404421, 15.25404421, 15.25404421, 15.25469849, 15.25493862, 15.25493862, 15.25538445, 15.25538445, 15.25578481, 15.25624573, 15.25624573, 15.25724658, 15.257305, 15.25753948, 15.25779031, 15.25800736, 15.25929783, 15.25954116, 15.26024593, 15.26048641, 15.26167524, 15.26322154, 15.26346219, 15.26393981, 15.26445297, 15.26581012, 15.26656897, 15.26751879, 15.26851268, 15.26943458, 15.26969452, 15.26969452, 15.26867702, 15.26921913, 15.26921913, 15.26958582, 15.26987355, 15.27012922, 15.27133588, 15.27093908, 15.27093908, 15.27093908, 15.27121233, 15.27148562, 15.27148562, 15.27148562, 15.27176244, 15.27200365, 15.27200365, 15.2722919, 15.2722919, 15.2722919, 15.2722919, 15.2722919, 15.27258273, 15.2728444, 15.27337625, 15.27393241, 15.27420583, 15.27505789, 15.27533795, 15.27533795, 15.27533795, 15.27635823, 15.27654135, 15.27674636, 15.27674636, 15.27723163, 15.27723163, 15.27723163, 15.27746587, 15.27746587, 15.27792475, 15.27792475, 15.27792475, 15.27836851, 15.27836851, 15.27861824, 15.27861824, 15.27760486, 15.27778516, 15.27801947, 15.27801947, 15.27801947, 15.27829029, 15.2785582, 15.27901233, 15.27928349, 15.27928349, 15.27928349, 15.27954854, 15.27954854, 15.27954854, 15.27954854, 15.28011372, 15.28085855, 15.28114868, 15.28141559, 15.28168251, 15.28277, 15.28277, 15.28359939, 15.28427392, 15.28427392, 15.28427392, 15.28453634, 15.28453634, 15.28498527, 15.28498527, 15.14899881, 15.14899881, 15.14899881, 15.14949615, 15.1497522, 15.14999363, 15.14999363, 15.14999363, 15.15026785, 15.15026785, 15.15052804, 15.15079586, 15.15079586, 15.15105374, 15.15159417, 15.15185854, 15.15185854, 15.15185854, 15.15212175, 15.15212175, 15.15236946, 15.15236946, 15.15236946, 15.15236946, 15.15236946, 15.1528541, 15.1528541, 15.1528541, 15.1528541, 15.15309615, 15.15344914, 15.15369405, 15.15369405, 15.15369405, 15.15369405, 15.15433874, 15.15433874, 15.15433874, 15.15457751, 15.15457751, 15.15457751, 15.15457751, 15.15457751, 15.15457751, 15.15457751, 15.15534419, 15.15559766, 15.15559766, 15.15583357, 15.15583357, 15.15583357, 15.15609879, 15.15609879, 15.15609879, 15.15609879, 15.15630838, 15.15653321, 15.15653321, 15.15674282, 15.15674282, 15.1569583, 15.1569583, 15.1569583, 15.15747607, 15.15747607, 15.15747607, 15.15747607, 15.1581174, 15.1581174, 15.15836254, 15.15836254, 15.15833789, 15.15833789, 15.15833789, 15.15860676, 15.15884579, 15.15884579, 15.15884579, 15.16009474, 15.16030544, 15.16030544, 15.16030544, 15.16030544, 15.16056656, 15.16081011, 15.16102876, 15.16102876, 15.16152471, 15.16152471, 15.16228261, 15.16253652, 15.16341452, 15.16393421, 15.16393421, 15.16420575, 15.16465957, 15.16465957, 15.16465957, 15.16491948, 15.16491948, 15.16491948, 15.16491948, 15.16556766, 15.16595859, 15.16595859, 15.16618047, 15.16663306, 15.16717339, 15.16127859, 15.16151806, 15.16151806, 15.16151806, 15.16151806, 15.16285386, 15.16382951, 15.16437447, 15.16461412, 15.1648733, 15.16511592, 15.16575843, 15.16626729, 15.16649237, 15.16649237, 15.16649237, 15.16649237, 15.16698135, 15.16725052, 15.16750845, 15.16804628, 15.16854072, 15.16904962, 15.16950365, 15.16950365, 15.1699777, 15.1699777, 15.1699777, 15.1699777, 15.1699777, 15.1708062, 15.17103185, 15.17184114, 15.17289385, 15.1731252, 15.17414797, 15.17414797, 15.17445211, 15.17470021, 15.17470021, 15.17484643, 15.17504189, 15.17580729, 15.17591537, 15.17591537, 15.17617049, 15.17617049, 15.17617049, 15.17617049, 15.17617049, 15.17643291, 15.17643291, 15.17643291, 15.17668398, 15.17668398, 15.17716245, 15.1781972, 15.1781972, 15.17869123, 15.17869123, 15.17869123, 15.17869123, 15.17869123, 15.17869123, 15.17869123, 15.17869123, 15.17893085, 15.17963753, 15.17656308, 15.17656308, 15.17675427, 15.17718358, 15.17742425, 15.17766258, 15.17766258, 15.17812739, 15.17812739, 15.17830336, 15.17830336, 15.17830336, 15.17850583, 15.17850583, 15.17850583, 15.17850583, 15.17870831, 15.17892651, 15.17892651, 15.17892651, 15.17892651, 15.17913373, 15.17934508, 15.17934508, 15.17934508, 15.17934508, 15.18013436, 15.18013436, 15.18013436, 15.18033162, 15.18053567, 15.18077418, 15.1810013, 15.17938712, 15.17938712, 15.17959264, 15.18023312, 15.18042985, 15.18042985, 15.18052352, 15.18052352, 15.18094766, 15.18094766, 15.18133534, 15.18133534, 15.18177313, 15.18177313, 15.18177313, 15.18177313, 15.18218991, 15.18237203, 15.18237203, 15.18258951, 15.18258951, 15.18258951, 15.18258951, 15.18258951, 15.18258951, 15.18281584, 15.18301862, 15.1832217, 15.18342155, 15.18342155, 15.18364794, 15.18364794, 15.18364794, 15.18364794, 15.18364794, 15.18364794, 15.18384664, 15.18405537, 15.18405537, 15.18426705, 15.18426705, 15.18465334, 15.1855941, 15.1855941, 15.18579999, 15.18579999, 15.18599999, 15.18599999, 15.18599999, 15.1858581, 15.1858581, 15.18606549, 15.18650791, 15.18650791, 15.18691099, 15.18728169, 15.18728169, 15.18728169, 15.18728169, 15.18728169, 15.18728169, 15.18796166, 15.18865259, 15.18955001, 15.19045012, 15.19126691, 15.19149379, 15.19149379, 15.19149379, 15.19149379, 15.19164752, 15.19184847, 15.19184847, 15.1920512, 15.19273201, 15.19295583, 15.19336849, 15.19336849, 15.19336849, 15.1935837, 15.1935837, 15.1935837, 15.1935837, 15.19376645, 15.19376645, 15.19376645, 15.19376645, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19451433, 15.19465164, 15.19465164, 15.19484923, 15.19484923, 15.19530326, 15.19548612, 15.19548612, 15.19548612, 15.19548612, 15.19548612, 15.19548612, 15.19445881, 15.19445881, 15.19445881, 15.19445881, 15.19445881, 15.19502429, 15.19514813, 15.1953753, 15.19559934, 15.19559934, 15.19559934, 15.19559934, 15.19559934, 15.19559934, 15.19559934, 15.19559934, 15.19579406, 15.19587365, 15.19587365, 15.19627169, 15.19627169, 15.19627169, 15.1965137, 15.1965137, 15.1965137, 15.1965137, 15.1965137, 15.1965137, 15.1965137, 15.1965137, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.1969195, 15.19710843, 15.19708103, 15.19708103, 15.19708103, 15.19708103, 15.19708103, 15.19726403, 15.19718126, 15.19718126, 15.19718126, 15.19718126, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19793171, 15.1980557, 15.1980557, 15.1980557, 15.19819447, 15.19819447, 15.19819447, 15.19819447, 15.1983037, 15.1983037, 15.19868171, 15.19886482, 15.19886482, 15.19886482, 15.19886482, 15.19906862, 15.19906862, 15.19906862, 15.19925175, 15.19925175, 15.19925175, 15.19925175, 15.19925175, 15.19925175, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19951465, 15.1997844, 15.1997844, 15.1997844, 15.19976519, 15.19976519, 15.19992178, 15.20025125, 15.20025125, 15.20025125, 15.20044954, 15.20064754, 15.2008426, 15.20112637, 15.20127417, 15.20127417, 15.20127417, 15.20142494, 15.20143089, 15.20143089, 15.20143089, 15.20143089, 15.20143089, 15.20143089, 15.20143089, 15.20143089, 15.20181375, 15.20181375, 15.20181375]]
[2022-10-13 11:45:42,892][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:45:42,893][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:45:43,223][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:45:43,224][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:45:43,739][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:45:43,741][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:45:43,747][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:45:43,748][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:45:43,750][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:45:43,750][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:45:43,752][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 11:45:44,109][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[101028, 101029, 101030, 101031, 101033, 101035, 101036, 101038, 101039, 101040, 101041, 101042, 101043, 101044, 101045, 101046, 101048, 101049, 101050, 101051, 101052, 101053, 101055, 101058, 101059, 101060, 101061, 101062, 101063, 101064, 101065, 101066, 101067, 101068, 101069, 101070, 101071, 101074, 101075, 101077, 101078, 101079, 101081, 101082, 101083, 101085, 101086, 101087, 101088, 101089], start_index为：985
[2022-10-13 11:45:44,157][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:45:44,158][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:45:44,158][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 11:45:44,158][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_DAY'}
[2022-10-13 11:45:44,158][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 11:45:44,571][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 04:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 06:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 08:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 10:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 12:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 14:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 16:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93092087, 'date': '2022-10-12 18:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 20:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 22:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93046246, 'date': '2022-10-13 00:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 02:00', 'showTime': True}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 03:00', 'showTime': True}]}
[2022-10-13 11:45:44,572][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:45:44,787][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:45:45,013][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.93686845, 15.93686845, 15.93658147, 15.93658147, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93516605, 15.93516605, 15.93516605, 15.93362158, 15.93342669, 15.93342669, 15.93092087, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93046246, 15.93030222, 15.93030222, 15.93030222]
[2022-10-13 11:45:45,014][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：None,None
[2022-10-13 11:45:45,213][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:45:45,213][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:45:45,214][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_WEEK"
}
[2022-10-13 11:45:45,214][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_WEEK'}
[2022-10-13 11:45:45,214][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_WEEK"
}
[2022-10-13 11:45:45,640][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.0, 'avgPrice': 15.86485694, 'date': '2022-10-06 05:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86483257, 'date': '2022-10-06 07:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86361793, 'date': '2022-10-06 09:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86349496, 'date': '2022-10-06 11:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.8631645, 'date': '2022-10-06 13:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86311586, 'date': '2022-10-06 15:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86311586, 'date': '2022-10-06 17:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96918404, 'date': '2022-10-06 19:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96879193, 'date': '2022-10-06 21:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96650488, 'date': '2022-10-06 23:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96434236, 'date': '2022-10-07 01:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96417436, 'date': '2022-10-07 03:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96311299, 'date': '2022-10-07 05:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96176713, 'date': '2022-10-07 07:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96167684, 'date': '2022-10-07 09:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96045898, 'date': '2022-10-07 11:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95903559, 'date': '2022-10-07 13:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95888778, 'date': '2022-10-07 15:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95791579, 'date': '2022-10-07 17:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95746736, 'date': '2022-10-07 19:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95509157, 'date': '2022-10-07 21:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07 23:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95369663, 'date': '2022-10-08 01:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95259812, 'date': '2022-10-08 03:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95237044, 'date': '2022-10-08 05:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95237044, 'date': '2022-10-08 07:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95182706, 'date': '2022-10-08 09:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95182706, 'date': '2022-10-08 11:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95093181, 'date': '2022-10-08 13:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95087703, 'date': '2022-10-08 15:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95245558, 'date': '2022-10-08 17:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95161605, 'date': '2022-10-08 19:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95161605, 'date': '2022-10-08 21:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95215079, 'date': '2022-10-08 23:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94690961, 'date': '2022-10-09 01:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94690961, 'date': '2022-10-09 03:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 05:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 07:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 09:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 11:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94592567, 'date': '2022-10-09 13:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94592567, 'date': '2022-10-09 15:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.9435523, 'date': '2022-10-09 17:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94268487, 'date': '2022-10-09 19:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94268487, 'date': '2022-10-09 21:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94263201, 'date': '2022-10-09 23:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.94109483, 'date': '2022-10-10 01:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.94022208, 'date': '2022-10-10 03:00', 'showTime': False}, {'floorPrice': 10.02, 'avgPrice': 15.94014804, 'date': '2022-10-10 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93982348, 'date': '2022-10-10 07:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93966822, 'date': '2022-10-10 09:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93921675, 'date': '2022-10-10 11:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93921675, 'date': '2022-10-10 13:00', 'showTime': False}, {'floorPrice': 10.19, 'avgPrice': 15.93800479, 'date': '2022-10-10 15:00', 'showTime': False}, {'floorPrice': 10.1, 'avgPrice': 15.93822528, 'date': '2022-10-10 17:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9376355, 'date': '2022-10-10 19:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9376355, 'date': '2022-10-10 21:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9380872, 'date': '2022-10-10 23:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 01:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 03:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 07:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93936525, 'date': '2022-10-11 09:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 11:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 13:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 15:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94202971, 'date': '2022-10-11 17:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94136192, 'date': '2022-10-11 19:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94204827, 'date': '2022-10-11 21:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94204827, 'date': '2022-10-11 23:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12 01:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93701079, 'date': '2022-10-12 03:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': False}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 03:00', 'showTime': False}]}
[2022-10-13 11:45:45,641][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:45:45,865][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:45:46,090][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.05, 10.05, 10.02, 10.3, 10.3, 10.3, 10.3, 10.19, 10.1, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.86485694, 15.86483257, 15.86361793, 15.86349496, 15.8631645, 15.86311586, 15.86311586, 15.96918404, 15.96879193, 15.96650488, 15.96434236, 15.96417436, 15.96311299, 15.96176713, 15.96167684, 15.96045898, 15.95903559, 15.95888778, 15.95791579, 15.95746736, 15.95509157, 15.95473999, 15.95369663, 15.95259812, 15.95237044, 15.95237044, 15.95182706, 15.95182706, 15.95093181, 15.95087703, 15.95245558, 15.95161605, 15.95161605, 15.95215079, 15.94690961, 15.94690961, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94592567, 15.94592567, 15.9435523, 15.94268487, 15.94268487, 15.94263201, 15.94109483, 15.94022208, 15.94014804, 15.93982348, 15.93966822, 15.93921675, 15.93921675, 15.93800479, 15.93822528, 15.9376355, 15.9376355, 15.9380872, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93936525, 15.94240175, 15.94240175, 15.94240175, 15.94202971, 15.94136192, 15.94204827, 15.94204827, 15.94076728, 15.93701079, 15.93686845, 15.93658147, 15.93525684, 15.93525684, 15.93516605, 15.93362158, 15.93342669, 15.93078298, 15.93078298, 15.93078298, 15.93030222, 15.93030222]
[2022-10-13 11:45:46,091][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：None,None
[2022-10-13 11:45:46,122][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:45:46,123][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:45:46,123][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_MONTH"
}
[2022-10-13 11:45:46,123][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_MONTH'}
[2022-10-13 11:45:46,124][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_MONTH"
}
[2022-10-13 11:45:46,568][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 7.7, 'avgPrice': 15.72366447, 'date': '2022-09-13', 'showTime': False}, {'floorPrice': 7.5, 'avgPrice': 15.72203573, 'date': '2022-09-14', 'showTime': False}, {'floorPrice': 7.63, 'avgPrice': 15.72021965, 'date': '2022-09-15', 'showTime': False}, {'floorPrice': 9.49, 'avgPrice': 15.71604586, 'date': '2022-09-16', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.76479543, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 9.899, 'avgPrice': 15.76209893, 'date': '2022-09-18', 'showTime': False}, {'floorPrice': 10.4, 'avgPrice': 15.75933884, 'date': '2022-09-19', 'showTime': False}, {'floorPrice': 11.11, 'avgPrice': 15.82966529, 'date': '2022-09-20', 'showTime': False}, {'floorPrice': 11.8, 'avgPrice': 15.86195463, 'date': '2022-09-21', 'showTime': False}, {'floorPrice': 11.15, 'avgPrice': 15.90771119, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 10.2, 'avgPrice': 15.90760049, 'date': '2022-09-23', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.90719263, 'date': '2022-09-24', 'showTime': False}, {'floorPrice': 9.25, 'avgPrice': 15.90719263, 'date': '2022-09-25', 'showTime': False}, {'floorPrice': 8.88, 'avgPrice': 15.90719263, 'date': '2022-09-26', 'showTime': False}, {'floorPrice': 9.0, 'avgPrice': 15.90716694, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 9.2, 'avgPrice': 15.9051948, 'date': '2022-09-28', 'showTime': False}, {'floorPrice': 9.55, 'avgPrice': 15.90436152, 'date': '2022-09-29', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.90434781, 'date': '2022-09-30', 'showTime': False}, {'floorPrice': 10.2, 'avgPrice': 15.89996067, 'date': '2022-10-01', 'showTime': False}, {'floorPrice': 10.44, 'avgPrice': 15.89461695, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 10.23, 'avgPrice': 15.88418119, 'date': '2022-10-03', 'showTime': False}, {'floorPrice': 10.4, 'avgPrice': 15.87724741, 'date': '2022-10-04', 'showTime': False}, {'floorPrice': 10.369, 'avgPrice': 15.86662469, 'date': '2022-10-05', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96650488, 'date': '2022-10-06', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95215079, 'date': '2022-10-08', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94263201, 'date': '2022-10-09', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9380872, 'date': '2022-10-10', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 11:45:46,569][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:45:46,898][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:45:47,126][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[7.7, 7.5, 7.63, 9.49, 9.95, 9.899, 10.4, 11.11, 11.8, 11.15, 10.2, 9.95, 9.25, 8.88, 9.0, 9.2, 9.55, 9.97, 10.2, 10.44, 10.23, 10.4, 10.369, 10.0, 10.06, 10.0, 9.97, 10.3, 10.3, 10.3],[15.72366447, 15.72203573, 15.72021965, 15.71604586, 15.76479543, 15.76209893, 15.75933884, 15.82966529, 15.86195463, 15.90771119, 15.90760049, 15.90719263, 15.90719263, 15.90719263, 15.90716694, 15.9051948, 15.90436152, 15.90434781, 15.89996067, 15.89461695, 15.88418119, 15.87724741, 15.86662469, 15.96650488, 15.95473999, 15.95215079, 15.94263201, 15.9380872, 15.94240175, 15.94076728]
[2022-10-13 11:45:47,126][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：None,None
[2022-10-13 11:45:47,143][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:45:47,144][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:45:47,144][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 11:45:47,144][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'THREE_MONTHS'}
[2022-10-13 11:45:47,144][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 11:45:47,603][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-19', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-24', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-29', 'showTime': False}, {'floorPrice': 8.899, 'avgPrice': 15.19756207, 'date': '2022-08-03', 'showTime': False}, {'floorPrice': 7.5, 'avgPrice': 15.19149379, 'date': '2022-08-08', 'showTime': False}, {'floorPrice': 7.0, 'avgPrice': 15.17617049, 'date': '2022-08-13', 'showTime': False}, {'floorPrice': 6.8, 'avgPrice': 15.15433874, 'date': '2022-08-18', 'showTime': False}, {'floorPrice': 6.78, 'avgPrice': 15.26656897, 'date': '2022-08-23', 'showTime': False}, {'floorPrice': 8.35, 'avgPrice': 15.22764058, 'date': '2022-08-28', 'showTime': False}, {'floorPrice': 8.0, 'avgPrice': 15.24912814, 'date': '2022-09-02', 'showTime': False}, {'floorPrice': 7.4, 'avgPrice': 15.74122915, 'date': '2022-09-07', 'showTime': False}, {'floorPrice': 6.87, 'avgPrice': 15.73047393, 'date': '2022-09-12', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.76479543, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 11.15, 'avgPrice': 15.90771119, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 9.0, 'avgPrice': 15.90716694, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 10.44, 'avgPrice': 15.89461695, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 11:45:47,604][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:45:47,978][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:45:48,226][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[0.0, 0.0, 0.0, 8.899, 7.5, 7.0, 6.8, 6.78, 8.35, 8.0, 7.4, 6.87, 9.95, 11.15, 9.0, 10.44, 10.06, 10.3],[0.0, 0.0, 0.0, 15.19756207, 15.19149379, 15.17617049, 15.15433874, 15.26656897, 15.22764058, 15.24912814, 15.74122915, 15.73047393, 15.76479543, 15.90771119, 15.90716694, 15.89461695, 15.95473999, 15.94076728]
[2022-10-13 11:45:48,226][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：None,None
[2022-10-13 11:46:19,839][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:46:19,840][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:46:20,141][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:46:20,143][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:46:20,590][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:46:20,590][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:46:20,595][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:46:20,597][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:46:20,599][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:46:20,601][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:46:20,603][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 11:46:20,968][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[102631, 102632, 102633, 102634, 102635, 102636, 102637, 102638, 102639, 102640, 102641, 102642, 102643, 102644, 102645, 102646, 102647, 102648, 102649, 102650, 102651, 102652, 102653, 102654, 102655, 102656, 102657, 102658, 102659, 102660, 102661, 102662, 102663, 102664, 102665, 102666, 102667, 102668, 102669, 102670, 102671, 102672, 102673, 102674, 102675, 102676, 102677, 102678, 102679, 102680], start_index为：2480
[2022-10-13 11:46:21,012][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:46:21,013][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:46:21,013][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 11:46:21,013][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_DAY'}
[2022-10-13 11:46:21,013][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 11:46:21,448][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 04:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 06:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 08:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 10:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 12:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 14:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 16:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93092087, 'date': '2022-10-12 18:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 20:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 22:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93046246, 'date': '2022-10-13 00:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 02:00', 'showTime': True}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 03:00', 'showTime': True}]}
[2022-10-13 11:46:21,449][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:46:21,656][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:46:21,863][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.93686845, 15.93686845, 15.93658147, 15.93658147, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93516605, 15.93516605, 15.93516605, 15.93362158, 15.93342669, 15.93342669, 15.93092087, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93046246, 15.93030222, 15.93030222, 15.93030222]
[2022-10-13 11:46:21,863][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[None],[None]
[2022-10-13 11:46:22,031][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:46:22,031][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:46:22,031][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_WEEK"
}
[2022-10-13 11:46:22,031][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_WEEK'}
[2022-10-13 11:46:22,031][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_WEEK"
}
[2022-10-13 11:46:22,479][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.0, 'avgPrice': 15.86485694, 'date': '2022-10-06 05:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86483257, 'date': '2022-10-06 07:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86361793, 'date': '2022-10-06 09:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86349496, 'date': '2022-10-06 11:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.8631645, 'date': '2022-10-06 13:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86311586, 'date': '2022-10-06 15:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86311586, 'date': '2022-10-06 17:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96918404, 'date': '2022-10-06 19:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96879193, 'date': '2022-10-06 21:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96650488, 'date': '2022-10-06 23:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96434236, 'date': '2022-10-07 01:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96417436, 'date': '2022-10-07 03:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96311299, 'date': '2022-10-07 05:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96176713, 'date': '2022-10-07 07:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96167684, 'date': '2022-10-07 09:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96045898, 'date': '2022-10-07 11:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95903559, 'date': '2022-10-07 13:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95888778, 'date': '2022-10-07 15:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95791579, 'date': '2022-10-07 17:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95746736, 'date': '2022-10-07 19:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95509157, 'date': '2022-10-07 21:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07 23:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95369663, 'date': '2022-10-08 01:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95259812, 'date': '2022-10-08 03:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95237044, 'date': '2022-10-08 05:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95237044, 'date': '2022-10-08 07:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95182706, 'date': '2022-10-08 09:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95182706, 'date': '2022-10-08 11:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95093181, 'date': '2022-10-08 13:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95087703, 'date': '2022-10-08 15:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95245558, 'date': '2022-10-08 17:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95161605, 'date': '2022-10-08 19:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95161605, 'date': '2022-10-08 21:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95215079, 'date': '2022-10-08 23:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94690961, 'date': '2022-10-09 01:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94690961, 'date': '2022-10-09 03:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 05:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 07:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 09:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 11:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94592567, 'date': '2022-10-09 13:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94592567, 'date': '2022-10-09 15:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.9435523, 'date': '2022-10-09 17:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94268487, 'date': '2022-10-09 19:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94268487, 'date': '2022-10-09 21:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94263201, 'date': '2022-10-09 23:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.94109483, 'date': '2022-10-10 01:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.94022208, 'date': '2022-10-10 03:00', 'showTime': False}, {'floorPrice': 10.02, 'avgPrice': 15.94014804, 'date': '2022-10-10 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93982348, 'date': '2022-10-10 07:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93966822, 'date': '2022-10-10 09:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93921675, 'date': '2022-10-10 11:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93921675, 'date': '2022-10-10 13:00', 'showTime': False}, {'floorPrice': 10.19, 'avgPrice': 15.93800479, 'date': '2022-10-10 15:00', 'showTime': False}, {'floorPrice': 10.1, 'avgPrice': 15.93822528, 'date': '2022-10-10 17:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9376355, 'date': '2022-10-10 19:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9376355, 'date': '2022-10-10 21:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9380872, 'date': '2022-10-10 23:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 01:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 03:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 07:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93936525, 'date': '2022-10-11 09:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 11:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 13:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 15:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94202971, 'date': '2022-10-11 17:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94136192, 'date': '2022-10-11 19:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94204827, 'date': '2022-10-11 21:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94204827, 'date': '2022-10-11 23:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12 01:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93701079, 'date': '2022-10-12 03:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': False}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 03:00', 'showTime': False}]}
[2022-10-13 11:46:22,480][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:46:22,683][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:46:22,897][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.05, 10.05, 10.02, 10.3, 10.3, 10.3, 10.3, 10.19, 10.1, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.86485694, 15.86483257, 15.86361793, 15.86349496, 15.8631645, 15.86311586, 15.86311586, 15.96918404, 15.96879193, 15.96650488, 15.96434236, 15.96417436, 15.96311299, 15.96176713, 15.96167684, 15.96045898, 15.95903559, 15.95888778, 15.95791579, 15.95746736, 15.95509157, 15.95473999, 15.95369663, 15.95259812, 15.95237044, 15.95237044, 15.95182706, 15.95182706, 15.95093181, 15.95087703, 15.95245558, 15.95161605, 15.95161605, 15.95215079, 15.94690961, 15.94690961, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94592567, 15.94592567, 15.9435523, 15.94268487, 15.94268487, 15.94263201, 15.94109483, 15.94022208, 15.94014804, 15.93982348, 15.93966822, 15.93921675, 15.93921675, 15.93800479, 15.93822528, 15.9376355, 15.9376355, 15.9380872, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93936525, 15.94240175, 15.94240175, 15.94240175, 15.94202971, 15.94136192, 15.94204827, 15.94204827, 15.94076728, 15.93701079, 15.93686845, 15.93658147, 15.93525684, 15.93525684, 15.93516605, 15.93362158, 15.93342669, 15.93078298, 15.93078298, 15.93078298, 15.93030222, 15.93030222]
[2022-10-13 11:46:22,897][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[None],[None]
[2022-10-13 11:46:22,927][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:46:22,927][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:46:22,928][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_MONTH"
}
[2022-10-13 11:46:22,928][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_MONTH'}
[2022-10-13 11:46:22,928][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_MONTH"
}
[2022-10-13 11:46:23,353][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 7.7, 'avgPrice': 15.72366447, 'date': '2022-09-13', 'showTime': False}, {'floorPrice': 7.5, 'avgPrice': 15.72203573, 'date': '2022-09-14', 'showTime': False}, {'floorPrice': 7.63, 'avgPrice': 15.72021965, 'date': '2022-09-15', 'showTime': False}, {'floorPrice': 9.49, 'avgPrice': 15.71604586, 'date': '2022-09-16', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.76479543, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 9.899, 'avgPrice': 15.76209893, 'date': '2022-09-18', 'showTime': False}, {'floorPrice': 10.4, 'avgPrice': 15.75933884, 'date': '2022-09-19', 'showTime': False}, {'floorPrice': 11.11, 'avgPrice': 15.82966529, 'date': '2022-09-20', 'showTime': False}, {'floorPrice': 11.8, 'avgPrice': 15.86195463, 'date': '2022-09-21', 'showTime': False}, {'floorPrice': 11.15, 'avgPrice': 15.90771119, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 10.2, 'avgPrice': 15.90760049, 'date': '2022-09-23', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.90719263, 'date': '2022-09-24', 'showTime': False}, {'floorPrice': 9.25, 'avgPrice': 15.90719263, 'date': '2022-09-25', 'showTime': False}, {'floorPrice': 8.88, 'avgPrice': 15.90719263, 'date': '2022-09-26', 'showTime': False}, {'floorPrice': 9.0, 'avgPrice': 15.90716694, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 9.2, 'avgPrice': 15.9051948, 'date': '2022-09-28', 'showTime': False}, {'floorPrice': 9.55, 'avgPrice': 15.90436152, 'date': '2022-09-29', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.90434781, 'date': '2022-09-30', 'showTime': False}, {'floorPrice': 10.2, 'avgPrice': 15.89996067, 'date': '2022-10-01', 'showTime': False}, {'floorPrice': 10.44, 'avgPrice': 15.89461695, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 10.23, 'avgPrice': 15.88418119, 'date': '2022-10-03', 'showTime': False}, {'floorPrice': 10.4, 'avgPrice': 15.87724741, 'date': '2022-10-04', 'showTime': False}, {'floorPrice': 10.369, 'avgPrice': 15.86662469, 'date': '2022-10-05', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96650488, 'date': '2022-10-06', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95215079, 'date': '2022-10-08', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94263201, 'date': '2022-10-09', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9380872, 'date': '2022-10-10', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 11:46:23,353][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:46:23,659][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:46:23,881][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[7.7, 7.5, 7.63, 9.49, 9.95, 9.899, 10.4, 11.11, 11.8, 11.15, 10.2, 9.95, 9.25, 8.88, 9.0, 9.2, 9.55, 9.97, 10.2, 10.44, 10.23, 10.4, 10.369, 10.0, 10.06, 10.0, 9.97, 10.3, 10.3, 10.3],[15.72366447, 15.72203573, 15.72021965, 15.71604586, 15.76479543, 15.76209893, 15.75933884, 15.82966529, 15.86195463, 15.90771119, 15.90760049, 15.90719263, 15.90719263, 15.90719263, 15.90716694, 15.9051948, 15.90436152, 15.90434781, 15.89996067, 15.89461695, 15.88418119, 15.87724741, 15.86662469, 15.96650488, 15.95473999, 15.95215079, 15.94263201, 15.9380872, 15.94240175, 15.94076728]
[2022-10-13 11:46:23,881][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[None],[None]
[2022-10-13 11:46:23,903][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:46:23,903][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:46:23,903][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 11:46:23,904][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'THREE_MONTHS'}
[2022-10-13 11:46:23,904][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 11:46:24,327][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-19', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-24', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-29', 'showTime': False}, {'floorPrice': 8.899, 'avgPrice': 15.19756207, 'date': '2022-08-03', 'showTime': False}, {'floorPrice': 7.5, 'avgPrice': 15.19149379, 'date': '2022-08-08', 'showTime': False}, {'floorPrice': 7.0, 'avgPrice': 15.17617049, 'date': '2022-08-13', 'showTime': False}, {'floorPrice': 6.8, 'avgPrice': 15.15433874, 'date': '2022-08-18', 'showTime': False}, {'floorPrice': 6.78, 'avgPrice': 15.26656897, 'date': '2022-08-23', 'showTime': False}, {'floorPrice': 8.35, 'avgPrice': 15.22764058, 'date': '2022-08-28', 'showTime': False}, {'floorPrice': 8.0, 'avgPrice': 15.24912814, 'date': '2022-09-02', 'showTime': False}, {'floorPrice': 7.4, 'avgPrice': 15.74122915, 'date': '2022-09-07', 'showTime': False}, {'floorPrice': 6.87, 'avgPrice': 15.73047393, 'date': '2022-09-12', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.76479543, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 11.15, 'avgPrice': 15.90771119, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 9.0, 'avgPrice': 15.90716694, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 10.44, 'avgPrice': 15.89461695, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 11:46:24,327][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:46:24,658][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:46:24,901][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[0.0, 0.0, 0.0, 8.899, 7.5, 7.0, 6.8, 6.78, 8.35, 8.0, 7.4, 6.87, 9.95, 11.15, 9.0, 10.44, 10.06, 10.3],[0.0, 0.0, 0.0, 15.19756207, 15.19149379, 15.17617049, 15.15433874, 15.26656897, 15.22764058, 15.24912814, 15.74122915, 15.73047393, 15.76479543, 15.90771119, 15.90716694, 15.89461695, 15.95473999, 15.94076728]
[2022-10-13 11:46:24,902][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[None],[None]
[2022-10-13 11:49:36,415][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:49:36,415][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:49:36,738][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:49:36,739][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:49:37,188][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:49:37,188][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:49:37,193][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:49:37,194][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:49:37,196][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:49:37,196][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:49:37,200][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 11:49:37,569][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[100877, 100878, 100879, 100880, 100881, 100882, 100883, 100884, 100885, 100886, 100887, 100888, 100889, 100890, 100891, 100892, 100893, 100894, 100896, 100897, 100898, 100899, 100900, 100901, 100902, 100904, 100905, 100906, 100907, 100908, 100909, 100910, 100911, 100912, 100913, 100914, 100915, 100916, 100917, 100918, 100919, 100920, 100921, 100922, 100923, 100924, 100926, 100927, 100928, 100929], start_index为：844
[2022-10-13 11:49:37,618][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:49:37,619][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:49:37,619][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 11:49:37,619][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_DAY'}
[2022-10-13 11:49:37,620][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 11:49:38,046][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 04:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 06:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 08:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 10:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 12:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 14:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 16:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93092087, 'date': '2022-10-12 18:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 20:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 22:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93046246, 'date': '2022-10-13 00:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 02:00', 'showTime': True}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 03:00', 'showTime': True}]}
[2022-10-13 11:49:38,046][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:49:38,262][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:49:38,478][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.93686845, 15.93686845, 15.93658147, 15.93658147, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93516605, 15.93516605, 15.93516605, 15.93362158, 15.93342669, 15.93342669, 15.93092087, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93046246, 15.93030222, 15.93030222, 15.93030222]
[2022-10-13 11:49:38,478][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[[10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25]],[[15.93686845, 15.93686845, 15.93658147, 15.93658147, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93516605, 15.93516605, 15.93516605, 15.93362158, 15.93342669, 15.93342669, 15.93092087, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93046246, 15.93030222, 15.93030222, 15.93030222]]
[2022-10-13 11:49:38,691][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:49:38,692][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:49:38,692][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_WEEK"
}
[2022-10-13 11:49:38,692][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_WEEK'}
[2022-10-13 11:49:38,692][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_WEEK"
}
[2022-10-13 11:49:39,114][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.0, 'avgPrice': 15.86485694, 'date': '2022-10-06 05:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86483257, 'date': '2022-10-06 07:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86361793, 'date': '2022-10-06 09:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86349496, 'date': '2022-10-06 11:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.8631645, 'date': '2022-10-06 13:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86311586, 'date': '2022-10-06 15:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86311586, 'date': '2022-10-06 17:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96918404, 'date': '2022-10-06 19:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96879193, 'date': '2022-10-06 21:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96650488, 'date': '2022-10-06 23:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96434236, 'date': '2022-10-07 01:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96417436, 'date': '2022-10-07 03:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96311299, 'date': '2022-10-07 05:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96176713, 'date': '2022-10-07 07:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96167684, 'date': '2022-10-07 09:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96045898, 'date': '2022-10-07 11:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95903559, 'date': '2022-10-07 13:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95888778, 'date': '2022-10-07 15:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95791579, 'date': '2022-10-07 17:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95746736, 'date': '2022-10-07 19:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95509157, 'date': '2022-10-07 21:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07 23:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95369663, 'date': '2022-10-08 01:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95259812, 'date': '2022-10-08 03:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95237044, 'date': '2022-10-08 05:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95237044, 'date': '2022-10-08 07:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95182706, 'date': '2022-10-08 09:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95182706, 'date': '2022-10-08 11:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95093181, 'date': '2022-10-08 13:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95087703, 'date': '2022-10-08 15:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95245558, 'date': '2022-10-08 17:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95161605, 'date': '2022-10-08 19:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95161605, 'date': '2022-10-08 21:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95215079, 'date': '2022-10-08 23:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94690961, 'date': '2022-10-09 01:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94690961, 'date': '2022-10-09 03:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 05:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 07:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 09:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 11:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94592567, 'date': '2022-10-09 13:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94592567, 'date': '2022-10-09 15:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.9435523, 'date': '2022-10-09 17:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94268487, 'date': '2022-10-09 19:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94268487, 'date': '2022-10-09 21:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94263201, 'date': '2022-10-09 23:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.94109483, 'date': '2022-10-10 01:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.94022208, 'date': '2022-10-10 03:00', 'showTime': False}, {'floorPrice': 10.02, 'avgPrice': 15.94014804, 'date': '2022-10-10 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93982348, 'date': '2022-10-10 07:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93966822, 'date': '2022-10-10 09:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93921675, 'date': '2022-10-10 11:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93921675, 'date': '2022-10-10 13:00', 'showTime': False}, {'floorPrice': 10.19, 'avgPrice': 15.93800479, 'date': '2022-10-10 15:00', 'showTime': False}, {'floorPrice': 10.1, 'avgPrice': 15.93822528, 'date': '2022-10-10 17:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9376355, 'date': '2022-10-10 19:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9376355, 'date': '2022-10-10 21:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9380872, 'date': '2022-10-10 23:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 01:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 03:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 07:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93936525, 'date': '2022-10-11 09:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 11:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 13:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 15:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94202971, 'date': '2022-10-11 17:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94136192, 'date': '2022-10-11 19:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94204827, 'date': '2022-10-11 21:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94204827, 'date': '2022-10-11 23:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12 01:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93701079, 'date': '2022-10-12 03:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': False}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 03:00', 'showTime': False}]}
[2022-10-13 11:49:39,114][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:49:39,330][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:49:39,546][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.05, 10.05, 10.02, 10.3, 10.3, 10.3, 10.3, 10.19, 10.1, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.86485694, 15.86483257, 15.86361793, 15.86349496, 15.8631645, 15.86311586, 15.86311586, 15.96918404, 15.96879193, 15.96650488, 15.96434236, 15.96417436, 15.96311299, 15.96176713, 15.96167684, 15.96045898, 15.95903559, 15.95888778, 15.95791579, 15.95746736, 15.95509157, 15.95473999, 15.95369663, 15.95259812, 15.95237044, 15.95237044, 15.95182706, 15.95182706, 15.95093181, 15.95087703, 15.95245558, 15.95161605, 15.95161605, 15.95215079, 15.94690961, 15.94690961, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94592567, 15.94592567, 15.9435523, 15.94268487, 15.94268487, 15.94263201, 15.94109483, 15.94022208, 15.94014804, 15.93982348, 15.93966822, 15.93921675, 15.93921675, 15.93800479, 15.93822528, 15.9376355, 15.9376355, 15.9380872, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93936525, 15.94240175, 15.94240175, 15.94240175, 15.94202971, 15.94136192, 15.94204827, 15.94204827, 15.94076728, 15.93701079, 15.93686845, 15.93658147, 15.93525684, 15.93525684, 15.93516605, 15.93362158, 15.93342669, 15.93078298, 15.93078298, 15.93078298, 15.93030222, 15.93030222]
[2022-10-13 11:49:39,546][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：
[2022-10-13 11:49:39,970][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:49:39,971][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:49:39,971][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_MONTH"
}
[2022-10-13 11:49:39,971][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_MONTH'}
[2022-10-13 11:49:39,971][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_MONTH"
}
[2022-10-13 11:49:40,434][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 7.7, 'avgPrice': 15.72366447, 'date': '2022-09-13', 'showTime': False}, {'floorPrice': 7.5, 'avgPrice': 15.72203573, 'date': '2022-09-14', 'showTime': False}, {'floorPrice': 7.63, 'avgPrice': 15.72021965, 'date': '2022-09-15', 'showTime': False}, {'floorPrice': 9.49, 'avgPrice': 15.71604586, 'date': '2022-09-16', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.76479543, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 9.899, 'avgPrice': 15.76209893, 'date': '2022-09-18', 'showTime': False}, {'floorPrice': 10.4, 'avgPrice': 15.75933884, 'date': '2022-09-19', 'showTime': False}, {'floorPrice': 11.11, 'avgPrice': 15.82966529, 'date': '2022-09-20', 'showTime': False}, {'floorPrice': 11.8, 'avgPrice': 15.86195463, 'date': '2022-09-21', 'showTime': False}, {'floorPrice': 11.15, 'avgPrice': 15.90771119, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 10.2, 'avgPrice': 15.90760049, 'date': '2022-09-23', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.90719263, 'date': '2022-09-24', 'showTime': False}, {'floorPrice': 9.25, 'avgPrice': 15.90719263, 'date': '2022-09-25', 'showTime': False}, {'floorPrice': 8.88, 'avgPrice': 15.90719263, 'date': '2022-09-26', 'showTime': False}, {'floorPrice': 9.0, 'avgPrice': 15.90716694, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 9.2, 'avgPrice': 15.9051948, 'date': '2022-09-28', 'showTime': False}, {'floorPrice': 9.55, 'avgPrice': 15.90436152, 'date': '2022-09-29', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.90434781, 'date': '2022-09-30', 'showTime': False}, {'floorPrice': 10.2, 'avgPrice': 15.89996067, 'date': '2022-10-01', 'showTime': False}, {'floorPrice': 10.44, 'avgPrice': 15.89461695, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 10.23, 'avgPrice': 15.88418119, 'date': '2022-10-03', 'showTime': False}, {'floorPrice': 10.4, 'avgPrice': 15.87724741, 'date': '2022-10-04', 'showTime': False}, {'floorPrice': 10.369, 'avgPrice': 15.86662469, 'date': '2022-10-05', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96650488, 'date': '2022-10-06', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95215079, 'date': '2022-10-08', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94263201, 'date': '2022-10-09', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9380872, 'date': '2022-10-10', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 11:49:40,434][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:49:40,755][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:49:40,986][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[7.7, 7.5, 7.63, 9.49, 9.95, 9.899, 10.4, 11.11, 11.8, 11.15, 10.2, 9.95, 9.25, 8.88, 9.0, 9.2, 9.55, 9.97, 10.2, 10.44, 10.23, 10.4, 10.369, 10.0, 10.06, 10.0, 9.97, 10.3, 10.3, 10.3],[15.72366447, 15.72203573, 15.72021965, 15.71604586, 15.76479543, 15.76209893, 15.75933884, 15.82966529, 15.86195463, 15.90771119, 15.90760049, 15.90719263, 15.90719263, 15.90719263, 15.90716694, 15.9051948, 15.90436152, 15.90434781, 15.89996067, 15.89461695, 15.88418119, 15.87724741, 15.86662469, 15.96650488, 15.95473999, 15.95215079, 15.94263201, 15.9380872, 15.94240175, 15.94076728]
[2022-10-13 11:49:40,987][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[[6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 7.1, 7.49, 7.5, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.63, 7.63, 7.63, 7.6, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.63, 7.63, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.999, 7.999, 7.999, 8.5, 8.5, 9.49, 9.49, 9.49, 10.45, 10.45, 10.349, 10.349, 10.349, 10.2, 10.2, 10.0, 9.95, 10.2, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.1, 10.1, 10.1, 10.349, 10.349, 10.4, 10.4, 10.4, 10.4, 10.4, 10.5, 10.5, 10.5, 10.5, 11.49, 11.45, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.29, 11.29, 11.29, 11.2, 11.2, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.895, 11.895, 11.8, 11.8, 11.8, 11.8, 11.8, 11.75, 11.75, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.95, 11.95, 11.95, 11.7, 11.7, 11.69, 11.69, 11.69, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 10.975, 10.888, 10.888, 10.888, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.1, 10.1, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 9.95, 9.95, 9.95, 9.95, 9.949, 9.949, 9.949, 9.949, 9.949, 9.69, 9.69, 9.89, 9.89, 9.89, 9.89, 9.8, 9.69, 9.69, 9.69, 9.69, 9.54, 9.54, 9.54, 9.25, 9.25, 9.25, 9.25, 9.25, 9.1, 9.1, 9.0, 9.0, 9.0, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.69, 8.69, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.65, 9.65, 9.65, 9.65, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.95, 9.95, 9.95, 9.95, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 9.7, 9.7, 9.7, 9.7, 9.7, 10.44, 10.0, 10.0, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.35, 10.35, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.15, 10.23, 10.23, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.1, 9.99, 9.99, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.38, 10.38, 10.38, 10.369, 10.369, 10.369, 10.369, 10.369, 10.35, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.0, 10.05, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.05, 10.05, 10.05, 10.05, 10.02, 10.02, 10.3, 10.3, 10.3, 9.75, 10.3, 10.3, 10.3, 10.19, 10.19, 10.1, 10.1, 10.1, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25]],[[15.72957891, 15.72957891, 15.72957891, 15.72957891, 15.72947649, 15.72947649, 15.72922988, 15.72922988, 15.72922988, 15.72871203, 15.72871203, 15.72871203, 15.72845927, 15.72624371, 15.72574888, 15.72534961, 15.72486981, 15.72443001, 15.72372015, 15.72366447, 15.72366447, 15.72366447, 15.72366447, 15.72342364, 15.72342364, 15.72320284, 15.72320284, 15.72298205, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.7222847, 15.7222847, 15.7222847, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72155485, 15.72155485, 15.72136274, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72068757, 15.72046692, 15.72046692, 15.72046692, 15.71982246, 15.71961443, 15.71961443, 15.72021965, 15.72021965, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.71981423, 15.71776552, 15.71729606, 15.71706886, 15.71706886, 15.71706886, 15.71690528, 15.71690528, 15.71665846, 15.71646662, 15.71646662, 15.71646662, 15.71646662, 15.71646662, 15.71626623, 15.71626623, 15.71626623, 15.71604586, 15.71488649, 15.71394222, 15.71336111, 15.71271018, 15.7117878, 15.72329528, 15.7710968, 15.7691391, 15.76903151, 15.76855681, 15.76840115, 15.76700834, 15.76651575, 15.76632067, 15.76588827, 15.76588827, 15.7657285, 15.76547557, 15.76547557, 15.76547557, 15.76541653, 15.76496807, 15.76496807, 15.76479543, 15.76463147, 15.76455285, 15.76455285, 15.76443697, 15.76443697, 15.76427303, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76370166, 15.76305854, 15.76260364, 15.76246823, 15.76226844, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.762017, 15.76185603, 15.76130757, 15.76130757, 15.76130757, 15.76130757, 15.76130757, 15.76064119, 15.76046221, 15.76046221, 15.76046221, 15.75996795, 15.75946976, 15.75905234, 15.75877127, 15.75840393, 15.75801531, 15.75742135, 15.7599563, 15.75933884, 15.75918237, 15.75840154, 15.75811711, 15.7575365, 15.75692928, 15.75679424, 15.75638607, 15.83225147, 15.83136763, 15.83136763, 15.83083219, 15.83021149, 15.8301454, 15.8301454, 15.8301454, 15.82994659, 15.82967464, 15.82967464, 15.82967464, 15.82967464, 15.82967464, 15.82966529, 15.82966529, 15.82966529, 15.829534, 15.829534, 15.829534, 15.829534, 15.829534, 15.82940981, 15.82940981, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.85995344, 15.85982985, 15.85960162, 15.85954892, 15.85941402, 15.85941402, 15.85941402, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86167179, 15.86167179, 15.86167179, 15.86167179, 15.86167179, 15.86159919, 15.86159919, 15.90733727, 15.90695951, 15.90695951, 15.90695951, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90708459, 15.90686256, 15.90686256, 15.90669383, 15.90669383, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90629045, 15.90629045, 15.90568426, 15.90550002, 15.90538942, 15.9051948, 15.9051948, 15.90499927, 15.90499927, 15.90499927, 15.90461094, 15.90454285, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90412687, 15.90412687, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90251351, 15.90251351, 15.90251351, 15.90207663, 15.90084245, 15.90080281, 15.9002663, 15.90009933, 15.90009933, 15.89996067, 15.89808632, 15.89790306, 15.89790306, 15.89772205, 15.89772205, 15.89772205, 15.89756934, 15.89756934, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89596066, 15.89596066, 15.89596066, 15.89580096, 15.89580096, 15.89580096, 15.89490231, 15.89490231, 15.89461695, 15.89444175, 15.89444175, 15.89427505, 15.89412532, 15.89345261, 15.89345261, 15.8932902, 15.89284672, 15.89284672, 15.89284672, 15.89270837, 15.8925474, 15.89260699, 15.89260699, 15.88796243, 15.88796243, 15.88674176, 15.88553081, 15.88469024, 15.88436859, 15.88418119, 15.88418119, 15.88418119, 15.88418119, 15.88418119, 15.88140071, 15.88140071, 15.8811344, 15.88023739, 15.88023739, 15.88023739, 15.88008544, 15.87992928, 15.87998914, 15.87965367, 15.87965367, 15.87965367, 15.87965367, 15.87965367, 15.87958028, 15.87916638, 15.8784728, 15.87819392, 15.87819392, 15.87774566, 15.87772088, 15.87756568, 15.87724741, 15.87701442, 15.87701442, 15.87732602, 15.87732602, 15.8760553, 15.8760553, 15.87386439, 15.87386439, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87361985, 15.87302044, 15.87282402, 15.87178947, 15.87163515, 15.86720046, 15.86706325, 15.86706325, 15.86662469, 15.86662469, 15.8663545, 15.8663545, 15.86621732, 15.86621732, 15.86485694, 15.86483257, 15.86483257, 15.86465748, 15.86361793, 15.86349496, 15.86349496, 15.86332973, 15.8631645, 15.8631645, 15.86311586, 15.86311586, 15.86311586, 15.96918404, 15.96918404, 15.96918404, 15.96879193, 15.96776559, 15.96650488, 15.9654309, 15.96434236, 15.96417436, 15.96417436, 15.96311299, 15.96311299, 15.96266416, 15.96176713, 15.96167684, 15.96167684, 15.96167684, 15.96045898, 15.95920702, 15.95903559, 15.95903559, 15.95888778, 15.95888778, 15.95791579, 15.95746736, 15.95746736, 15.95506221, 15.95509157, 15.95498046, 15.95473999, 15.95383296, 15.95369663, 15.95323581, 15.95259812, 15.9525503, 15.95237044, 15.95237044, 15.95237044, 15.95237044, 15.95182706, 15.95182706, 15.95182706, 15.95182706, 15.95093181, 15.95093181, 15.95087703, 15.94953437, 15.95245558, 15.95161605, 15.95161605, 15.95161605, 15.95161605, 15.95161605, 15.95215079, 15.95185794, 15.94690961, 15.94690961, 15.94690961, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94592567, 15.94592567, 15.94592567, 15.94592567, 15.94680418, 15.9435523, 15.94322375, 15.94268487, 15.94268487, 15.94268487, 15.94268487, 15.94263201, 15.94218505, 15.94109483, 15.94033253, 15.94022208, 15.94022208, 15.94014804, 15.93998856, 15.93982348, 15.93966822, 15.93966822, 15.93950771, 15.93921675, 15.93921675, 15.93921675, 15.9386039, 15.93800479, 15.93761213, 15.93822528, 15.9379654, 15.9376355, 15.9376355, 15.9376355, 15.9376355, 15.9380872, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93976799, 15.93936525, 15.9392073, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94202971, 15.94151709, 15.94136192, 15.94125156, 15.94204827, 15.94204827, 15.94204827, 15.94076728, 15.94076728, 15.93809071, 15.93701079, 15.93686845, 15.93686845, 15.93658147, 15.93658147, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93516605, 15.93516605, 15.93516605, 15.93362158, 15.93342669, 15.93342669, 15.93092087, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93046246, 15.93030222, 15.93030222, 15.93030222]]
[2022-10-13 11:49:41,256][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:49:41,257][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:49:41,257][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 11:49:41,257][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'THREE_MONTHS'}
[2022-10-13 11:49:41,258][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 11:49:41,669][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-19', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-24', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-29', 'showTime': False}, {'floorPrice': 8.899, 'avgPrice': 15.19756207, 'date': '2022-08-03', 'showTime': False}, {'floorPrice': 7.5, 'avgPrice': 15.19149379, 'date': '2022-08-08', 'showTime': False}, {'floorPrice': 7.0, 'avgPrice': 15.17617049, 'date': '2022-08-13', 'showTime': False}, {'floorPrice': 6.8, 'avgPrice': 15.15433874, 'date': '2022-08-18', 'showTime': False}, {'floorPrice': 6.78, 'avgPrice': 15.26656897, 'date': '2022-08-23', 'showTime': False}, {'floorPrice': 8.35, 'avgPrice': 15.22764058, 'date': '2022-08-28', 'showTime': False}, {'floorPrice': 8.0, 'avgPrice': 15.24912814, 'date': '2022-09-02', 'showTime': False}, {'floorPrice': 7.4, 'avgPrice': 15.74122915, 'date': '2022-09-07', 'showTime': False}, {'floorPrice': 6.87, 'avgPrice': 15.73047393, 'date': '2022-09-12', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.76479543, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 11.15, 'avgPrice': 15.90771119, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 9.0, 'avgPrice': 15.90716694, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 10.44, 'avgPrice': 15.89461695, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 11:49:41,669][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:49:42,007][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:49:42,250][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[0.0, 0.0, 0.0, 8.899, 7.5, 7.0, 6.8, 6.78, 8.35, 8.0, 7.4, 6.87, 9.95, 11.15, 9.0, 10.44, 10.06, 10.3],[0.0, 0.0, 0.0, 15.19756207, 15.19149379, 15.17617049, 15.15433874, 15.26656897, 15.22764058, 15.24912814, 15.74122915, 15.73047393, 15.76479543, 15.90771119, 15.90716694, 15.89461695, 15.95473999, 15.94076728]
[2022-10-13 11:49:42,254][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[[9.399, 9.399, 9.398, 9.398, 9.398, 9.398, 9.398, 9.38, 9.269, 9.0, 9.0, 8.999, 8.9, 8.899, 8.899, 8.899, 8.899, 8.899, 8.9, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 8.99, 8.9, 8.9, 8.9, 8.9, 8.9, 8.9, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.39, 8.39, 8.39, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.45, 8.45, 8.45, 8.45, 8.45, 8.5, 8.5, 8.5, 8.49, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.3795, 8.3795, 8.3795, 8.15, 8.3795, 8.3795, 8.3795, 8.3795, 8.3795, 8.3795, 8.45, 8.43, 8.43, 8.0, 8.0, 8.0, 7.5, 7.5, 7.5, 7.5, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.3, 8.3, 8.3, 8.29, 8.29, 8.29, 8.28, 8.28, 8.28, 8.28, 8.3, 8.3, 8.3, 8.3, 8.3, 8.3, 8.3, 8.1, 8.1, 8.1, 8.1, 8.1, 8.1, 8.1, 8.1, 8.1, 7.95, 7.95, 7.95, 7.69, 7.69, 7.69, 7.69, 7.69, 7.88, 7.88, 7.88, 7.88, 7.88, 7.88, 7.88, 7.88, 7.88, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.83, 7.83, 7.83, 7.83, 7.83, 7.8, 7.8, 7.8, 7.8, 7.8, 7.8, 7.8, 7.8, 7.79, 7.7888, 7.74, 7.74, 7.74, 7.74, 7.74, 7.74, 7.74, 7.74, 7.7398, 7.7398, 7.7398, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.479, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.35, 6.35, 6.35, 6.35, 6.35, 6.35, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.5, 6.5, 6.5, 6.4, 6.4, 6.4, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.65, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.789, 6.789, 6.789, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.78, 6.78, 6.78, 6.78, 6.78, 6.65, 6.65, 6.65, 6.65, 6.65, 6.7, 6.65, 6.65, 6.65, 6.65, 6.65, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.29, 6.29, 6.29, 6.29, 6.29, 6.29, 6.25, 6.25, 6.25, 6.25, 6.135, 6.1, 6.1, 6.1, 6.1, 6.1, 6.0, 6.0, 6.0, 6.0, 6.0, 5.99, 5.99, 5.99, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.8, 5.8, 6.25, 6.25, 6.25, 6.25, 6.3, 6.3, 6.3, 6.3, 6.3, 6.38, 6.38, 6.38, 6.38, 6.78, 6.78, 6.78, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.875, 6.96, 6.96, 6.96, 6.96, 6.96, 6.96, 6.96, 6.96, 6.96, 6.96, 6.99, 6.99, 6.99, 7.36, 7.36, 7.36, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 8.0, 8.45, 8.8887, 8.8887, 8.88, 8.88, 8.88, 8.88, 8.88, 8.8888, 8.8, 8.8, 8.75, 8.5, 8.45, 8.45, 8.45, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.3, 8.4, 8.4, 8.35, 8.35, 8.35, 8.35, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.75, 8.75, 8.69, 8.65, 8.65, 8.65, 8.65, 8.55, 8.55, 8.5, 8.5, 8.49, 8.49, 8.49, 8.49, 8.49, 8.29, 8.29, 8.48, 8.49, 8.49, 8.49, 8.49, 8.25, 8.25, 8.25, 8.25, 8.25, 8.25, 8.54, 8.54, 8.54, 8.54, 8.54, 8.53, 8.53, 8.53, 8.515, 8.53, 8.53, 8.53, 8.5, 8.5, 8.3, 8.4, 8.4, 8.35, 8.35, 8.35, 8.3, 8.3, 8.3, 8.3, 8.295, 8.295, 8.295, 8.295, 8.295, 8.28, 8.199, 8.199, 8.199, 8.199, 8.199, 8.199, 8.199, 8.15, 8.15, 8.15, 8.1, 8.1, 8.09, 8.09, 8.09, 8.09, 8.09, 7.99, 7.98, 7.98, 7.98, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.98, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.96, 7.96, 7.96, 7.96, 7.96, 7.96, 7.45, 7.45, 7.96, 7.96, 7.96, 7.95, 7.95, 7.95, 7.95, 7.96, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.86, 8.0, 8.0, 8.0, 7.99, 7.99, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.85, 7.85, 7.85, 7.85, 7.8, 7.75, 7.75, 7.6, 7.6, 7.6, 7.55, 7.55, 7.5, 7.5, 7.6, 7.6, 7.6, 7.6, 7.6, 7.59, 7.59, 7.59, 7.59, 7.59, 7.59, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.39999, 7.39999, 7.2, 7.2, 7.2, 7.4, 7.4, 7.4, 7.0, 7.0, 7.4, 7.4, 7.4, 7.4, 7.4, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 6.95, 7.399999, 7.399999, 7.399999, 7.399999, 7.399999, 7.399999, 7.399999, 7.399999, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.48, 7.48, 7.48, 7.48, 7.48, 7.48, 7.48, 7.41, 7.41, 7.39, 7.38, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.34, 7.3, 7.31, 7.31, 7.3, 7.3, 7.3, 7.3, 7.19, 7.11, 7.1, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.95, 6.95, 6.95, 6.93, 6.9, 6.9, 6.9, 6.9, 6.9, 6.88, 6.88, 6.86, 6.85, 6.8, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 7.1, 7.49, 7.5, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.63, 7.63, 7.63, 7.6, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.63, 7.63, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.999, 7.999, 7.999, 8.5, 8.5, 9.49, 9.49, 9.49, 10.45, 10.45, 10.349, 10.349, 10.349, 10.2, 10.2, 10.0, 9.95, 10.2, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.1, 10.1, 10.1, 10.349, 10.349, 10.4, 10.4, 10.4, 10.4, 10.4, 10.5, 10.5, 10.5, 10.5, 11.49, 11.45, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.29, 11.29, 11.29, 11.2, 11.2, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.895, 11.895, 11.8, 11.8, 11.8, 11.8, 11.8, 11.75, 11.75, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.95, 11.95, 11.95, 11.7, 11.7, 11.69, 11.69, 11.69, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 10.975, 10.888, 10.888, 10.888, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.1, 10.1, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 9.95, 9.95, 9.95, 9.95, 9.949, 9.949, 9.949, 9.949, 9.949, 9.69, 9.69, 9.89, 9.89, 9.89, 9.89, 9.8, 9.69, 9.69, 9.69, 9.69, 9.54, 9.54, 9.54, 9.25, 9.25, 9.25, 9.25, 9.25, 9.1, 9.1, 9.0, 9.0, 9.0, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.69, 8.69, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.65, 9.65, 9.65, 9.65, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.95, 9.95, 9.95, 9.95, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 9.7, 9.7, 9.7, 9.7, 9.7, 10.44, 10.0, 10.0, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.35, 10.35, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.15, 10.23, 10.23, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.1, 9.99, 9.99, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.38, 10.38, 10.38, 10.369, 10.369, 10.369, 10.369, 10.369, 10.35, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.0, 10.05, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.05, 10.05, 10.05, 10.05, 10.02, 10.02, 10.3, 10.3, 10.3, 9.75, 10.3, 10.3, 10.3, 10.19, 10.19, 10.1, 10.1, 10.1, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25]],[[15.20181375, 15.20181375, 15.20181375, 15.20143089, 15.20143089, 15.20143089, 15.20143089, 15.20143089, 15.20143089, 15.20143089, 15.20143089, 15.20142494, 15.20127417, 15.20127417, 15.20127417, 15.20112637, 15.2008426, 15.20064754, 15.20044954, 15.20025125, 15.20025125, 15.20025125, 15.19992178, 15.19976519, 15.19976519, 15.1997844, 15.1997844, 15.1997844, 15.19951465, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19925175, 15.19925175, 15.19925175, 15.19925175, 15.19925175, 15.19925175, 15.19906862, 15.19906862, 15.19906862, 15.19886482, 15.19886482, 15.19886482, 15.19886482, 15.19868171, 15.1983037, 15.1983037, 15.19819447, 15.19819447, 15.19819447, 15.19819447, 15.1980557, 15.1980557, 15.1980557, 15.19793171, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19718126, 15.19718126, 15.19718126, 15.19718126, 15.19726403, 15.19708103, 15.19708103, 15.19708103, 15.19708103, 15.19708103, 15.19710843, 15.1969195, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.1965137, 15.1965137, 15.1965137, 15.1965137, 15.1965137, 15.1965137, 15.1965137, 15.1965137, 15.19627169, 15.19627169, 15.19627169, 15.19587365, 15.19587365, 15.19579406, 15.19559934, 15.19559934, 15.19559934, 15.19559934, 15.19559934, 15.19559934, 15.19559934, 15.19559934, 15.1953753, 15.19514813, 15.19502429, 15.19445881, 15.19445881, 15.19445881, 15.19445881, 15.19445881, 15.19548612, 15.19548612, 15.19548612, 15.19548612, 15.19548612, 15.19548612, 15.19530326, 15.19484923, 15.19484923, 15.19465164, 15.19465164, 15.19451433, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19376645, 15.19376645, 15.19376645, 15.19376645, 15.1935837, 15.1935837, 15.1935837, 15.1935837, 15.19336849, 15.19336849, 15.19336849, 15.19295583, 15.19273201, 15.1920512, 15.19184847, 15.19184847, 15.19164752, 15.19149379, 15.19149379, 15.19149379, 15.19149379, 15.19126691, 15.19045012, 15.18955001, 15.18865259, 15.18796166, 15.18728169, 15.18728169, 15.18728169, 15.18728169, 15.18728169, 15.18728169, 15.18691099, 15.18650791, 15.18650791, 15.18606549, 15.1858581, 15.1858581, 15.18599999, 15.18599999, 15.18599999, 15.18579999, 15.18579999, 15.1855941, 15.1855941, 15.18465334, 15.18426705, 15.18426705, 15.18405537, 15.18405537, 15.18384664, 15.18364794, 15.18364794, 15.18364794, 15.18364794, 15.18364794, 15.18364794, 15.18342155, 15.18342155, 15.1832217, 15.18301862, 15.18281584, 15.18258951, 15.18258951, 15.18258951, 15.18258951, 15.18258951, 15.18258951, 15.18237203, 15.18237203, 15.18218991, 15.18177313, 15.18177313, 15.18177313, 15.18177313, 15.18133534, 15.18133534, 15.18094766, 15.18094766, 15.18052352, 15.18052352, 15.18042985, 15.18042985, 15.18023312, 15.17959264, 15.17938712, 15.17938712, 15.1810013, 15.18077418, 15.18053567, 15.18033162, 15.18013436, 15.18013436, 15.18013436, 15.17934508, 15.17934508, 15.17934508, 15.17934508, 15.17913373, 15.17892651, 15.17892651, 15.17892651, 15.17892651, 15.17870831, 15.17850583, 15.17850583, 15.17850583, 15.17850583, 15.17830336, 15.17830336, 15.17830336, 15.17812739, 15.17812739, 15.17766258, 15.17766258, 15.17742425, 15.17718358, 15.17675427, 15.17656308, 15.17656308, 15.17963753, 15.17893085, 15.17869123, 15.17869123, 15.17869123, 15.17869123, 15.17869123, 15.17869123, 15.17869123, 15.17869123, 15.1781972, 15.1781972, 15.17716245, 15.17668398, 15.17668398, 15.17643291, 15.17643291, 15.17643291, 15.17617049, 15.17617049, 15.17617049, 15.17617049, 15.17617049, 15.17591537, 15.17591537, 15.17580729, 15.17504189, 15.17484643, 15.17470021, 15.17470021, 15.17445211, 15.17414797, 15.17414797, 15.1731252, 15.17289385, 15.17184114, 15.17103185, 15.1708062, 15.1699777, 15.1699777, 15.1699777, 15.1699777, 15.1699777, 15.16950365, 15.16950365, 15.16904962, 15.16854072, 15.16804628, 15.16750845, 15.16725052, 15.16698135, 15.16649237, 15.16649237, 15.16649237, 15.16649237, 15.16626729, 15.16575843, 15.16511592, 15.1648733, 15.16461412, 15.16437447, 15.16382951, 15.16285386, 15.16151806, 15.16151806, 15.16151806, 15.16151806, 15.16127859, 15.16717339, 15.16663306, 15.16618047, 15.16595859, 15.16595859, 15.16556766, 15.16491948, 15.16491948, 15.16491948, 15.16491948, 15.16465957, 15.16465957, 15.16465957, 15.16420575, 15.16393421, 15.16393421, 15.16341452, 15.16253652, 15.16228261, 15.16152471, 15.16152471, 15.16102876, 15.16102876, 15.16081011, 15.16056656, 15.16030544, 15.16030544, 15.16030544, 15.16030544, 15.16009474, 15.15884579, 15.15884579, 15.15884579, 15.15860676, 15.15833789, 15.15833789, 15.15833789, 15.15836254, 15.15836254, 15.1581174, 15.1581174, 15.15747607, 15.15747607, 15.15747607, 15.15747607, 15.1569583, 15.1569583, 15.1569583, 15.15674282, 15.15674282, 15.15653321, 15.15653321, 15.15630838, 15.15609879, 15.15609879, 15.15609879, 15.15609879, 15.15583357, 15.15583357, 15.15583357, 15.15559766, 15.15559766, 15.15534419, 15.15457751, 15.15457751, 15.15457751, 15.15457751, 15.15457751, 15.15457751, 15.15457751, 15.15433874, 15.15433874, 15.15433874, 15.15369405, 15.15369405, 15.15369405, 15.15369405, 15.15344914, 15.15309615, 15.1528541, 15.1528541, 15.1528541, 15.1528541, 15.15236946, 15.15236946, 15.15236946, 15.15236946, 15.15236946, 15.15212175, 15.15212175, 15.15185854, 15.15185854, 15.15185854, 15.15159417, 15.15105374, 15.15079586, 15.15079586, 15.15052804, 15.15026785, 15.15026785, 15.14999363, 15.14999363, 15.14999363, 15.1497522, 15.14949615, 15.14899881, 15.14899881, 15.14899881, 15.28498527, 15.28498527, 15.28453634, 15.28453634, 15.28427392, 15.28427392, 15.28427392, 15.28359939, 15.28277, 15.28277, 15.28168251, 15.28141559, 15.28114868, 15.28085855, 15.28011372, 15.27954854, 15.27954854, 15.27954854, 15.27954854, 15.27928349, 15.27928349, 15.27928349, 15.27901233, 15.2785582, 15.27829029, 15.27801947, 15.27801947, 15.27801947, 15.27778516, 15.27760486, 15.27861824, 15.27861824, 15.27836851, 15.27836851, 15.27792475, 15.27792475, 15.27792475, 15.27746587, 15.27746587, 15.27723163, 15.27723163, 15.27723163, 15.27674636, 15.27674636, 15.27654135, 15.27635823, 15.27533795, 15.27533795, 15.27533795, 15.27505789, 15.27420583, 15.27393241, 15.27337625, 15.2728444, 15.27258273, 15.2722919, 15.2722919, 15.2722919, 15.2722919, 15.2722919, 15.27200365, 15.27200365, 15.27176244, 15.27148562, 15.27148562, 15.27148562, 15.27121233, 15.27093908, 15.27093908, 15.27093908, 15.27133588, 15.27012922, 15.26987355, 15.26958582, 15.26921913, 15.26921913, 15.26867702, 15.26969452, 15.26969452, 15.26943458, 15.26851268, 15.26751879, 15.26656897, 15.26581012, 15.26445297, 15.26393981, 15.26346219, 15.26322154, 15.26167524, 15.26048641, 15.26024593, 15.25954116, 15.25929783, 15.25800736, 15.25779031, 15.25753948, 15.257305, 15.25724658, 15.25624573, 15.25624573, 15.25578481, 15.25538445, 15.25538445, 15.25493862, 15.25493862, 15.25469849, 15.25404421, 15.25404421, 15.25404421, 15.25404421, 15.25380297, 15.25356175, 15.25312966, 15.25232232, 15.25058256, 15.25157023, 15.25134128, 15.25122493, 15.25106329, 15.25106329, 15.2510807, 15.25012183, 15.25012183, 15.2499079, 15.24816327, 15.24551847, 15.24346299, 15.24101459, 15.23954337, 15.23923613, 15.23901919, 15.23849628, 15.23816339, 15.23781807, 15.23753747, 15.23697833, 15.23676589, 15.23660718, 15.23709323, 15.23687909, 15.23667578, 15.23667578, 15.23667578, 15.23667578, 15.23667578, 15.23660514, 15.23660514, 15.23570693, 15.23495332, 15.23473221, 15.23453891, 15.23453891, 15.23646561, 15.23635733, 15.23635733, 15.23612555, 15.23572179, 15.23530971, 15.23509282, 15.23450249, 15.23450249, 15.23420522, 15.23401881, 15.23401881, 15.23401881, 15.23401881, 15.23401881, 15.2340089, 15.23382254, 15.23382254, 15.23344926, 15.23261415, 15.23180918, 15.23101167, 15.23101167, 15.23101167, 15.23101167, 15.23080376, 15.23058, 15.23058, 15.23058, 15.23058, 15.23038514, 15.23038514, 15.23038514, 15.23038514, 15.23002741, 15.23002741, 15.23002741, 15.23002741, 15.22966816, 15.22966816, 15.22966816, 15.22953848, 15.22944673, 15.22879709, 15.22849448, 15.22815053, 15.22785429, 15.22764058, 15.22764058, 15.22764058, 15.22764058, 15.22748934, 15.22749722, 15.2272809, 15.2272809, 15.2272809, 15.2272809, 15.22707992, 15.22707992, 15.22707992, 15.22575417, 15.22554517, 15.22531464, 15.22515773, 15.2251223, 15.2251223, 15.22472194, 15.22472194, 15.22452154, 15.22561083, 15.22561083, 15.22561083, 15.22561083, 15.22561083, 15.22540189, 15.22540189, 15.22540189, 15.22540189, 15.22540189, 15.22540189, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22481793, 15.22462349, 15.22462349, 15.22401492, 15.22401492, 15.22401492, 15.22401492, 15.22401492, 15.22401492, 15.22384336, 15.22384336, 15.22384336, 15.22364897, 15.22364897, 15.22321687, 15.22300228, 15.22300228, 15.22300228, 15.22300228, 15.22300228, 15.22300228, 15.22329936, 15.22588129, 15.22588129, 15.22588129, 15.22565676, 15.2254474, 15.2254474, 15.22525163, 15.22502264, 15.2246482, 15.2246482, 15.2246482, 15.2246482, 15.2246482, 15.22446259, 15.22400251, 15.22400251, 15.22400251, 15.22400251, 15.22400251, 15.25306832, 15.25306832, 15.25306832, 15.25306832, 15.25306832, 15.2528398, 15.2528398, 15.25262862, 15.25244807, 15.25244807, 15.25214402, 15.25214402, 15.25214402, 15.25214402, 15.25193317, 15.25193317, 15.25154154, 15.25131773, 15.25131773, 15.25131773, 15.25131773, 15.25108932, 15.25122498, 15.25104448, 15.25104448, 15.25104448, 15.25104448, 15.25104448, 15.25104448, 15.25104448, 15.25084918, 15.25084918, 15.25084918, 15.25066298, 15.25002387, 15.25007438, 15.25003397, 15.24981321, 15.24981321, 15.24981321, 15.24912814, 15.24912814, 15.24912814, 15.24912814, 15.24912814, 15.24912814, 15.24912814, 15.24912814, 15.24897667, 15.24897667, 15.24897667, 15.24897667, 15.24897667, 15.24897667, 15.24876486, 15.24876486, 15.24831084, 15.24831084, 15.24813057, 15.24813057, 15.24789983, 15.24789983, 15.24789983, 15.24789983, 15.24789983, 15.24789983, 15.24789983, 15.24789983, 15.24795108, 15.24795108, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24753883, 15.2473298, 15.24710275, 15.24710275, 15.24710275, 15.24681478, 15.24681478, 15.24634817, 15.24634817, 15.24720507, 15.2471115, 15.2471115, 15.2471115, 15.24642067, 15.24430689, 15.24430689, 15.24407201, 15.24407201, 15.24339462, 15.24339462, 15.24315795, 15.24294187, 15.24270126, 15.35053051, 15.391152, 15.391152, 15.391152, 15.391152, 15.39090527, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.38969544, 15.74368183, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74247818, 15.74247818, 15.74247818, 15.74222048, 15.74199855, 15.7414739, 15.74122915, 15.74122915, 15.74122915, 15.74122915, 15.74122915, 15.74122915, 15.74122915, 15.74122915, 15.74096151, 15.74049086, 15.74021264, 15.74021264, 15.73994408, 15.73994408, 15.73994408, 15.73994408, 15.73994408, 15.73994408, 15.73994408, 15.73975102, 15.73950067, 15.73950067, 15.73950067, 15.73950067, 15.73950067, 15.73950067, 15.73924891, 15.73924891, 15.73924891, 15.73904156, 15.73904156, 15.73879126, 15.73879126, 15.73879126, 15.73879126, 15.73813646, 15.73788621, 15.73788621, 15.73763597, 15.73763597, 15.73763597, 15.7373716, 15.7373716, 15.7373716, 15.7373716, 15.7373716, 15.7373716, 15.7373716, 15.7373716, 15.73718439, 15.73691422, 15.73665717, 15.73665717, 15.73665717, 15.73665717, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73619976, 15.73619976, 15.73619976, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73541196, 15.73541196, 15.73517617, 15.73517617, 15.73517617, 15.73517617, 15.73495472, 15.73469778, 15.73469778, 15.7344649, 15.7344649, 15.7344649, 15.7344649, 15.7344649, 15.7344649, 15.7344649, 15.73426638, 15.73401331, 15.73324322, 15.73324322, 15.73324322, 15.7329902, 15.7329902, 15.73245491, 15.73245491, 15.73245491, 15.73218324, 15.73164176, 15.73164176, 15.73164176, 15.73115918, 15.73115918, 15.73115918, 15.73115918, 15.73088092, 15.73088092, 15.73088092, 15.73060929, 15.73047393, 15.73047393, 15.73047393, 15.729843, 15.72957891, 15.72957891, 15.72957891, 15.72957891, 15.72957891, 15.72957891, 15.72957891, 15.72947649, 15.72947649, 15.72922988, 15.72922988, 15.72922988, 15.72871203, 15.72871203, 15.72871203, 15.72845927, 15.72624371, 15.72574888, 15.72534961, 15.72486981, 15.72443001, 15.72372015, 15.72366447, 15.72366447, 15.72366447, 15.72366447, 15.72342364, 15.72342364, 15.72320284, 15.72320284, 15.72298205, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.7222847, 15.7222847, 15.7222847, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72155485, 15.72155485, 15.72136274, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72068757, 15.72046692, 15.72046692, 15.72046692, 15.71982246, 15.71961443, 15.71961443, 15.72021965, 15.72021965, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.71981423, 15.71776552, 15.71729606, 15.71706886, 15.71706886, 15.71706886, 15.71690528, 15.71690528, 15.71665846, 15.71646662, 15.71646662, 15.71646662, 15.71646662, 15.71646662, 15.71626623, 15.71626623, 15.71626623, 15.71604586, 15.71488649, 15.71394222, 15.71336111, 15.71271018, 15.7117878, 15.72329528, 15.7710968, 15.7691391, 15.76903151, 15.76855681, 15.76840115, 15.76700834, 15.76651575, 15.76632067, 15.76588827, 15.76588827, 15.7657285, 15.76547557, 15.76547557, 15.76547557, 15.76541653, 15.76496807, 15.76496807, 15.76479543, 15.76463147, 15.76455285, 15.76455285, 15.76443697, 15.76443697, 15.76427303, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76370166, 15.76305854, 15.76260364, 15.76246823, 15.76226844, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.762017, 15.76185603, 15.76130757, 15.76130757, 15.76130757, 15.76130757, 15.76130757, 15.76064119, 15.76046221, 15.76046221, 15.76046221, 15.75996795, 15.75946976, 15.75905234, 15.75877127, 15.75840393, 15.75801531, 15.75742135, 15.7599563, 15.75933884, 15.75918237, 15.75840154, 15.75811711, 15.7575365, 15.75692928, 15.75679424, 15.75638607, 15.83225147, 15.83136763, 15.83136763, 15.83083219, 15.83021149, 15.8301454, 15.8301454, 15.8301454, 15.82994659, 15.82967464, 15.82967464, 15.82967464, 15.82967464, 15.82967464, 15.82966529, 15.82966529, 15.82966529, 15.829534, 15.829534, 15.829534, 15.829534, 15.829534, 15.82940981, 15.82940981, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.85995344, 15.85982985, 15.85960162, 15.85954892, 15.85941402, 15.85941402, 15.85941402, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86167179, 15.86167179, 15.86167179, 15.86167179, 15.86167179, 15.86159919, 15.86159919, 15.90733727, 15.90695951, 15.90695951, 15.90695951, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90708459, 15.90686256, 15.90686256, 15.90669383, 15.90669383, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90629045, 15.90629045, 15.90568426, 15.90550002, 15.90538942, 15.9051948, 15.9051948, 15.90499927, 15.90499927, 15.90499927, 15.90461094, 15.90454285, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90412687, 15.90412687, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90251351, 15.90251351, 15.90251351, 15.90207663, 15.90084245, 15.90080281, 15.9002663, 15.90009933, 15.90009933, 15.89996067, 15.89808632, 15.89790306, 15.89790306, 15.89772205, 15.89772205, 15.89772205, 15.89756934, 15.89756934, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89596066, 15.89596066, 15.89596066, 15.89580096, 15.89580096, 15.89580096, 15.89490231, 15.89490231, 15.89461695, 15.89444175, 15.89444175, 15.89427505, 15.89412532, 15.89345261, 15.89345261, 15.8932902, 15.89284672, 15.89284672, 15.89284672, 15.89270837, 15.8925474, 15.89260699, 15.89260699, 15.88796243, 15.88796243, 15.88674176, 15.88553081, 15.88469024, 15.88436859, 15.88418119, 15.88418119, 15.88418119, 15.88418119, 15.88418119, 15.88140071, 15.88140071, 15.8811344, 15.88023739, 15.88023739, 15.88023739, 15.88008544, 15.87992928, 15.87998914, 15.87965367, 15.87965367, 15.87965367, 15.87965367, 15.87965367, 15.87958028, 15.87916638, 15.8784728, 15.87819392, 15.87819392, 15.87774566, 15.87772088, 15.87756568, 15.87724741, 15.87701442, 15.87701442, 15.87732602, 15.87732602, 15.8760553, 15.8760553, 15.87386439, 15.87386439, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87361985, 15.87302044, 15.87282402, 15.87178947, 15.87163515, 15.86720046, 15.86706325, 15.86706325, 15.86662469, 15.86662469, 15.8663545, 15.8663545, 15.86621732, 15.86621732, 15.86485694, 15.86483257, 15.86483257, 15.86465748, 15.86361793, 15.86349496, 15.86349496, 15.86332973, 15.8631645, 15.8631645, 15.86311586, 15.86311586, 15.86311586, 15.96918404, 15.96918404, 15.96918404, 15.96879193, 15.96776559, 15.96650488, 15.9654309, 15.96434236, 15.96417436, 15.96417436, 15.96311299, 15.96311299, 15.96266416, 15.96176713, 15.96167684, 15.96167684, 15.96167684, 15.96045898, 15.95920702, 15.95903559, 15.95903559, 15.95888778, 15.95888778, 15.95791579, 15.95746736, 15.95746736, 15.95506221, 15.95509157, 15.95498046, 15.95473999, 15.95383296, 15.95369663, 15.95323581, 15.95259812, 15.9525503, 15.95237044, 15.95237044, 15.95237044, 15.95237044, 15.95182706, 15.95182706, 15.95182706, 15.95182706, 15.95093181, 15.95093181, 15.95087703, 15.94953437, 15.95245558, 15.95161605, 15.95161605, 15.95161605, 15.95161605, 15.95161605, 15.95215079, 15.95185794, 15.94690961, 15.94690961, 15.94690961, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94592567, 15.94592567, 15.94592567, 15.94592567, 15.94680418, 15.9435523, 15.94322375, 15.94268487, 15.94268487, 15.94268487, 15.94268487, 15.94263201, 15.94218505, 15.94109483, 15.94033253, 15.94022208, 15.94022208, 15.94014804, 15.93998856, 15.93982348, 15.93966822, 15.93966822, 15.93950771, 15.93921675, 15.93921675, 15.93921675, 15.9386039, 15.93800479, 15.93761213, 15.93822528, 15.9379654, 15.9376355, 15.9376355, 15.9376355, 15.9376355, 15.9380872, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93976799, 15.93936525, 15.9392073, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94202971, 15.94151709, 15.94136192, 15.94125156, 15.94204827, 15.94204827, 15.94204827, 15.94076728, 15.94076728, 15.93809071, 15.93701079, 15.93686845, 15.93686845, 15.93658147, 15.93658147, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93516605, 15.93516605, 15.93516605, 15.93362158, 15.93342669, 15.93342669, 15.93092087, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93046246, 15.93030222, 15.93030222, 15.93030222]]
[2022-10-13 11:51:32,214][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:51:32,216][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:51:32,521][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:51:32,522][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:51:32,970][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:51:32,971][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:51:32,973][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:51:32,974][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:51:32,975][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 11:51:32,976][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 11:51:32,977][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 11:51:33,315][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[100115, 100116, 100117, 100118, 100119, 100120, 100121, 100122, 100123, 100124, 100125, 100126, 100127, 100128, 100129, 100130, 100131, 100132, 100133, 100134, 100135, 100136, 100137, 100138, 100139, 100140, 100141, 100142, 100143, 100144, 100145, 100146, 100147, 100148, 100149, 100150, 100151, 100152, 100153, 100154, 100156, 100157, 100158, 100159, 100160, 100161, 100162, 100163, 100164, 100165], start_index为：113
[2022-10-13 11:51:33,363][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:51:33,363][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:51:33,363][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 11:51:33,363][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_DAY'}
[2022-10-13 11:51:33,364][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 11:51:33,801][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 04:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 06:00', 'showTime': True}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 08:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 10:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 12:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 14:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 16:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93092087, 'date': '2022-10-12 18:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 20:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 22:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93046246, 'date': '2022-10-13 00:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 02:00', 'showTime': True}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 03:00', 'showTime': True}]}
[2022-10-13 11:51:33,802][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:51:34,008][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:51:34,215][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.93686845, 15.93686845, 15.93658147, 15.93658147, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93516605, 15.93516605, 15.93516605, 15.93362158, 15.93342669, 15.93342669, 15.93092087, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93046246, 15.93030222, 15.93030222, 15.93030222]
[2022-10-13 11:51:34,215][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.93686845, 15.93686845, 15.93658147, 15.93658147, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93516605, 15.93516605, 15.93516605, 15.93362158, 15.93342669, 15.93342669, 15.93092087, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93046246, 15.93030222, 15.93030222, 15.93030222]
[2022-10-13 11:51:34,239][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:51:34,240][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:51:34,241][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_WEEK"
}
[2022-10-13 11:51:34,241][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_WEEK'}
[2022-10-13 11:51:34,242][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_WEEK"
}
[2022-10-13 11:51:34,708][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.0, 'avgPrice': 15.86485694, 'date': '2022-10-06 05:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86483257, 'date': '2022-10-06 07:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86361793, 'date': '2022-10-06 09:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86349496, 'date': '2022-10-06 11:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.8631645, 'date': '2022-10-06 13:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86311586, 'date': '2022-10-06 15:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86311586, 'date': '2022-10-06 17:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96918404, 'date': '2022-10-06 19:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96879193, 'date': '2022-10-06 21:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96650488, 'date': '2022-10-06 23:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96434236, 'date': '2022-10-07 01:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96417436, 'date': '2022-10-07 03:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96311299, 'date': '2022-10-07 05:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96176713, 'date': '2022-10-07 07:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96167684, 'date': '2022-10-07 09:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96045898, 'date': '2022-10-07 11:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95903559, 'date': '2022-10-07 13:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95888778, 'date': '2022-10-07 15:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95791579, 'date': '2022-10-07 17:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95746736, 'date': '2022-10-07 19:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95509157, 'date': '2022-10-07 21:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07 23:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95369663, 'date': '2022-10-08 01:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95259812, 'date': '2022-10-08 03:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95237044, 'date': '2022-10-08 05:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95237044, 'date': '2022-10-08 07:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95182706, 'date': '2022-10-08 09:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95182706, 'date': '2022-10-08 11:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95093181, 'date': '2022-10-08 13:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95087703, 'date': '2022-10-08 15:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95245558, 'date': '2022-10-08 17:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95161605, 'date': '2022-10-08 19:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95161605, 'date': '2022-10-08 21:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95215079, 'date': '2022-10-08 23:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94690961, 'date': '2022-10-09 01:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94690961, 'date': '2022-10-09 03:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 05:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 07:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 09:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 11:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94592567, 'date': '2022-10-09 13:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94592567, 'date': '2022-10-09 15:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.9435523, 'date': '2022-10-09 17:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94268487, 'date': '2022-10-09 19:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94268487, 'date': '2022-10-09 21:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94263201, 'date': '2022-10-09 23:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.94109483, 'date': '2022-10-10 01:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.94022208, 'date': '2022-10-10 03:00', 'showTime': False}, {'floorPrice': 10.02, 'avgPrice': 15.94014804, 'date': '2022-10-10 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93982348, 'date': '2022-10-10 07:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93966822, 'date': '2022-10-10 09:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93921675, 'date': '2022-10-10 11:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93921675, 'date': '2022-10-10 13:00', 'showTime': False}, {'floorPrice': 10.19, 'avgPrice': 15.93800479, 'date': '2022-10-10 15:00', 'showTime': False}, {'floorPrice': 10.1, 'avgPrice': 15.93822528, 'date': '2022-10-10 17:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9376355, 'date': '2022-10-10 19:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9376355, 'date': '2022-10-10 21:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9380872, 'date': '2022-10-10 23:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 01:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 03:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 07:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93936525, 'date': '2022-10-11 09:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 11:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 13:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 15:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94202971, 'date': '2022-10-11 17:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94136192, 'date': '2022-10-11 19:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94204827, 'date': '2022-10-11 21:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94204827, 'date': '2022-10-11 23:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12 01:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93701079, 'date': '2022-10-12 03:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 05:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': False}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 03:00', 'showTime': False}]}
[2022-10-13 11:51:34,709][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:51:34,922][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:51:35,137][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.05, 10.05, 10.02, 10.3, 10.3, 10.3, 10.3, 10.19, 10.1, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.86485694, 15.86483257, 15.86361793, 15.86349496, 15.8631645, 15.86311586, 15.86311586, 15.96918404, 15.96879193, 15.96650488, 15.96434236, 15.96417436, 15.96311299, 15.96176713, 15.96167684, 15.96045898, 15.95903559, 15.95888778, 15.95791579, 15.95746736, 15.95509157, 15.95473999, 15.95369663, 15.95259812, 15.95237044, 15.95237044, 15.95182706, 15.95182706, 15.95093181, 15.95087703, 15.95245558, 15.95161605, 15.95161605, 15.95215079, 15.94690961, 15.94690961, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94592567, 15.94592567, 15.9435523, 15.94268487, 15.94268487, 15.94263201, 15.94109483, 15.94022208, 15.94014804, 15.93982348, 15.93966822, 15.93921675, 15.93921675, 15.93800479, 15.93822528, 15.9376355, 15.9376355, 15.9380872, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93936525, 15.94240175, 15.94240175, 15.94240175, 15.94202971, 15.94136192, 15.94204827, 15.94204827, 15.94076728, 15.93701079, 15.93686845, 15.93658147, 15.93525684, 15.93525684, 15.93516605, 15.93362158, 15.93342669, 15.93078298, 15.93078298, 15.93078298, 15.93030222, 15.93030222]
[2022-10-13 11:51:35,139][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：
[2022-10-13 11:51:35,327][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:51:35,327][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:51:35,327][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_MONTH"
}
[2022-10-13 11:51:35,327][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_MONTH'}
[2022-10-13 11:51:35,328][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_MONTH"
}
[2022-10-13 11:51:35,755][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 7.7, 'avgPrice': 15.72366447, 'date': '2022-09-13', 'showTime': False}, {'floorPrice': 7.5, 'avgPrice': 15.72203573, 'date': '2022-09-14', 'showTime': False}, {'floorPrice': 7.63, 'avgPrice': 15.72021965, 'date': '2022-09-15', 'showTime': False}, {'floorPrice': 9.49, 'avgPrice': 15.71604586, 'date': '2022-09-16', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.76479543, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 9.899, 'avgPrice': 15.76209893, 'date': '2022-09-18', 'showTime': False}, {'floorPrice': 10.4, 'avgPrice': 15.75933884, 'date': '2022-09-19', 'showTime': False}, {'floorPrice': 11.11, 'avgPrice': 15.82966529, 'date': '2022-09-20', 'showTime': False}, {'floorPrice': 11.8, 'avgPrice': 15.86195463, 'date': '2022-09-21', 'showTime': False}, {'floorPrice': 11.15, 'avgPrice': 15.90771119, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 10.2, 'avgPrice': 15.90760049, 'date': '2022-09-23', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.90719263, 'date': '2022-09-24', 'showTime': False}, {'floorPrice': 9.25, 'avgPrice': 15.90719263, 'date': '2022-09-25', 'showTime': False}, {'floorPrice': 8.88, 'avgPrice': 15.90719263, 'date': '2022-09-26', 'showTime': False}, {'floorPrice': 9.0, 'avgPrice': 15.90716694, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 9.2, 'avgPrice': 15.9051948, 'date': '2022-09-28', 'showTime': False}, {'floorPrice': 9.55, 'avgPrice': 15.90436152, 'date': '2022-09-29', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.90434781, 'date': '2022-09-30', 'showTime': False}, {'floorPrice': 10.2, 'avgPrice': 15.89996067, 'date': '2022-10-01', 'showTime': False}, {'floorPrice': 10.44, 'avgPrice': 15.89461695, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 10.23, 'avgPrice': 15.88418119, 'date': '2022-10-03', 'showTime': False}, {'floorPrice': 10.4, 'avgPrice': 15.87724741, 'date': '2022-10-04', 'showTime': False}, {'floorPrice': 10.369, 'avgPrice': 15.86662469, 'date': '2022-10-05', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96650488, 'date': '2022-10-06', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95215079, 'date': '2022-10-08', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94263201, 'date': '2022-10-09', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9380872, 'date': '2022-10-10', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 11:51:35,756][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:51:36,073][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:51:36,310][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[7.7, 7.5, 7.63, 9.49, 9.95, 9.899, 10.4, 11.11, 11.8, 11.15, 10.2, 9.95, 9.25, 8.88, 9.0, 9.2, 9.55, 9.97, 10.2, 10.44, 10.23, 10.4, 10.369, 10.0, 10.06, 10.0, 9.97, 10.3, 10.3, 10.3],[15.72366447, 15.72203573, 15.72021965, 15.71604586, 15.76479543, 15.76209893, 15.75933884, 15.82966529, 15.86195463, 15.90771119, 15.90760049, 15.90719263, 15.90719263, 15.90719263, 15.90716694, 15.9051948, 15.90436152, 15.90434781, 15.89996067, 15.89461695, 15.88418119, 15.87724741, 15.86662469, 15.96650488, 15.95473999, 15.95215079, 15.94263201, 15.9380872, 15.94240175, 15.94076728]
[2022-10-13 11:51:36,312][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 7.1, 7.49, 7.5, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.63, 7.63, 7.63, 7.6, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.63, 7.63, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.999, 7.999, 7.999, 8.5, 8.5, 9.49, 9.49, 9.49, 10.45, 10.45, 10.349, 10.349, 10.349, 10.2, 10.2, 10.0, 9.95, 10.2, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.1, 10.1, 10.1, 10.349, 10.349, 10.4, 10.4, 10.4, 10.4, 10.4, 10.5, 10.5, 10.5, 10.5, 11.49, 11.45, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.29, 11.29, 11.29, 11.2, 11.2, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.895, 11.895, 11.8, 11.8, 11.8, 11.8, 11.8, 11.75, 11.75, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.95, 11.95, 11.95, 11.7, 11.7, 11.69, 11.69, 11.69, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 10.975, 10.888, 10.888, 10.888, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.1, 10.1, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 9.95, 9.95, 9.95, 9.95, 9.949, 9.949, 9.949, 9.949, 9.949, 9.69, 9.69, 9.89, 9.89, 9.89, 9.89, 9.8, 9.69, 9.69, 9.69, 9.69, 9.54, 9.54, 9.54, 9.25, 9.25, 9.25, 9.25, 9.25, 9.1, 9.1, 9.0, 9.0, 9.0, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.69, 8.69, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.65, 9.65, 9.65, 9.65, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.95, 9.95, 9.95, 9.95, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 9.7, 9.7, 9.7, 9.7, 9.7, 10.44, 10.0, 10.0, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.35, 10.35, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.15, 10.23, 10.23, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.1, 9.99, 9.99, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.38, 10.38, 10.38, 10.369, 10.369, 10.369, 10.369, 10.369, 10.35, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.0, 10.05, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.05, 10.05, 10.05, 10.05, 10.02, 10.02, 10.3, 10.3, 10.3, 9.75, 10.3, 10.3, 10.3, 10.19, 10.19, 10.1, 10.1, 10.1, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.72957891, 15.72957891, 15.72957891, 15.72957891, 15.72947649, 15.72947649, 15.72922988, 15.72922988, 15.72922988, 15.72871203, 15.72871203, 15.72871203, 15.72845927, 15.72624371, 15.72574888, 15.72534961, 15.72486981, 15.72443001, 15.72372015, 15.72366447, 15.72366447, 15.72366447, 15.72366447, 15.72342364, 15.72342364, 15.72320284, 15.72320284, 15.72298205, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.7222847, 15.7222847, 15.7222847, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72155485, 15.72155485, 15.72136274, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72068757, 15.72046692, 15.72046692, 15.72046692, 15.71982246, 15.71961443, 15.71961443, 15.72021965, 15.72021965, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.71981423, 15.71776552, 15.71729606, 15.71706886, 15.71706886, 15.71706886, 15.71690528, 15.71690528, 15.71665846, 15.71646662, 15.71646662, 15.71646662, 15.71646662, 15.71646662, 15.71626623, 15.71626623, 15.71626623, 15.71604586, 15.71488649, 15.71394222, 15.71336111, 15.71271018, 15.7117878, 15.72329528, 15.7710968, 15.7691391, 15.76903151, 15.76855681, 15.76840115, 15.76700834, 15.76651575, 15.76632067, 15.76588827, 15.76588827, 15.7657285, 15.76547557, 15.76547557, 15.76547557, 15.76541653, 15.76496807, 15.76496807, 15.76479543, 15.76463147, 15.76455285, 15.76455285, 15.76443697, 15.76443697, 15.76427303, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76370166, 15.76305854, 15.76260364, 15.76246823, 15.76226844, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.762017, 15.76185603, 15.76130757, 15.76130757, 15.76130757, 15.76130757, 15.76130757, 15.76064119, 15.76046221, 15.76046221, 15.76046221, 15.75996795, 15.75946976, 15.75905234, 15.75877127, 15.75840393, 15.75801531, 15.75742135, 15.7599563, 15.75933884, 15.75918237, 15.75840154, 15.75811711, 15.7575365, 15.75692928, 15.75679424, 15.75638607, 15.83225147, 15.83136763, 15.83136763, 15.83083219, 15.83021149, 15.8301454, 15.8301454, 15.8301454, 15.82994659, 15.82967464, 15.82967464, 15.82967464, 15.82967464, 15.82967464, 15.82966529, 15.82966529, 15.82966529, 15.829534, 15.829534, 15.829534, 15.829534, 15.829534, 15.82940981, 15.82940981, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.85995344, 15.85982985, 15.85960162, 15.85954892, 15.85941402, 15.85941402, 15.85941402, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86167179, 15.86167179, 15.86167179, 15.86167179, 15.86167179, 15.86159919, 15.86159919, 15.90733727, 15.90695951, 15.90695951, 15.90695951, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90708459, 15.90686256, 15.90686256, 15.90669383, 15.90669383, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90629045, 15.90629045, 15.90568426, 15.90550002, 15.90538942, 15.9051948, 15.9051948, 15.90499927, 15.90499927, 15.90499927, 15.90461094, 15.90454285, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90412687, 15.90412687, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90251351, 15.90251351, 15.90251351, 15.90207663, 15.90084245, 15.90080281, 15.9002663, 15.90009933, 15.90009933, 15.89996067, 15.89808632, 15.89790306, 15.89790306, 15.89772205, 15.89772205, 15.89772205, 15.89756934, 15.89756934, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89596066, 15.89596066, 15.89596066, 15.89580096, 15.89580096, 15.89580096, 15.89490231, 15.89490231, 15.89461695, 15.89444175, 15.89444175, 15.89427505, 15.89412532, 15.89345261, 15.89345261, 15.8932902, 15.89284672, 15.89284672, 15.89284672, 15.89270837, 15.8925474, 15.89260699, 15.89260699, 15.88796243, 15.88796243, 15.88674176, 15.88553081, 15.88469024, 15.88436859, 15.88418119, 15.88418119, 15.88418119, 15.88418119, 15.88418119, 15.88140071, 15.88140071, 15.8811344, 15.88023739, 15.88023739, 15.88023739, 15.88008544, 15.87992928, 15.87998914, 15.87965367, 15.87965367, 15.87965367, 15.87965367, 15.87965367, 15.87958028, 15.87916638, 15.8784728, 15.87819392, 15.87819392, 15.87774566, 15.87772088, 15.87756568, 15.87724741, 15.87701442, 15.87701442, 15.87732602, 15.87732602, 15.8760553, 15.8760553, 15.87386439, 15.87386439, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87361985, 15.87302044, 15.87282402, 15.87178947, 15.87163515, 15.86720046, 15.86706325, 15.86706325, 15.86662469, 15.86662469, 15.8663545, 15.8663545, 15.86621732, 15.86621732, 15.86485694, 15.86483257, 15.86483257, 15.86465748, 15.86361793, 15.86349496, 15.86349496, 15.86332973, 15.8631645, 15.8631645, 15.86311586, 15.86311586, 15.86311586, 15.96918404, 15.96918404, 15.96918404, 15.96879193, 15.96776559, 15.96650488, 15.9654309, 15.96434236, 15.96417436, 15.96417436, 15.96311299, 15.96311299, 15.96266416, 15.96176713, 15.96167684, 15.96167684, 15.96167684, 15.96045898, 15.95920702, 15.95903559, 15.95903559, 15.95888778, 15.95888778, 15.95791579, 15.95746736, 15.95746736, 15.95506221, 15.95509157, 15.95498046, 15.95473999, 15.95383296, 15.95369663, 15.95323581, 15.95259812, 15.9525503, 15.95237044, 15.95237044, 15.95237044, 15.95237044, 15.95182706, 15.95182706, 15.95182706, 15.95182706, 15.95093181, 15.95093181, 15.95087703, 15.94953437, 15.95245558, 15.95161605, 15.95161605, 15.95161605, 15.95161605, 15.95161605, 15.95215079, 15.95185794, 15.94690961, 15.94690961, 15.94690961, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94592567, 15.94592567, 15.94592567, 15.94592567, 15.94680418, 15.9435523, 15.94322375, 15.94268487, 15.94268487, 15.94268487, 15.94268487, 15.94263201, 15.94218505, 15.94109483, 15.94033253, 15.94022208, 15.94022208, 15.94014804, 15.93998856, 15.93982348, 15.93966822, 15.93966822, 15.93950771, 15.93921675, 15.93921675, 15.93921675, 15.9386039, 15.93800479, 15.93761213, 15.93822528, 15.9379654, 15.9376355, 15.9376355, 15.9376355, 15.9376355, 15.9380872, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93976799, 15.93936525, 15.9392073, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94202971, 15.94151709, 15.94136192, 15.94125156, 15.94204827, 15.94204827, 15.94204827, 15.94076728, 15.94076728, 15.93809071, 15.93701079, 15.93686845, 15.93686845, 15.93658147, 15.93658147, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93516605, 15.93516605, 15.93516605, 15.93362158, 15.93342669, 15.93342669, 15.93092087, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93046246, 15.93030222, 15.93030222, 15.93030222]
[2022-10-13 11:51:36,369][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 11:51:36,370][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 11:51:36,370][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 11:51:36,370][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'THREE_MONTHS'}
[2022-10-13 11:51:36,370][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 11:51:36,822][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-19', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-24', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-29', 'showTime': False}, {'floorPrice': 8.899, 'avgPrice': 15.19756207, 'date': '2022-08-03', 'showTime': False}, {'floorPrice': 7.5, 'avgPrice': 15.19149379, 'date': '2022-08-08', 'showTime': False}, {'floorPrice': 7.0, 'avgPrice': 15.17617049, 'date': '2022-08-13', 'showTime': False}, {'floorPrice': 6.8, 'avgPrice': 15.15433874, 'date': '2022-08-18', 'showTime': False}, {'floorPrice': 6.78, 'avgPrice': 15.26656897, 'date': '2022-08-23', 'showTime': False}, {'floorPrice': 8.35, 'avgPrice': 15.22764058, 'date': '2022-08-28', 'showTime': False}, {'floorPrice': 8.0, 'avgPrice': 15.24912814, 'date': '2022-09-02', 'showTime': False}, {'floorPrice': 7.4, 'avgPrice': 15.74122915, 'date': '2022-09-07', 'showTime': False}, {'floorPrice': 6.87, 'avgPrice': 15.73047393, 'date': '2022-09-12', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.76479543, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 11.15, 'avgPrice': 15.90771119, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 9.0, 'avgPrice': 15.90716694, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 10.44, 'avgPrice': 15.89461695, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 11:51:36,823][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 11:51:37,174][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 11:51:37,425][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[0.0, 0.0, 0.0, 8.899, 7.5, 7.0, 6.8, 6.78, 8.35, 8.0, 7.4, 6.87, 9.95, 11.15, 9.0, 10.44, 10.06, 10.3],[0.0, 0.0, 0.0, 15.19756207, 15.19149379, 15.17617049, 15.15433874, 15.26656897, 15.22764058, 15.24912814, 15.74122915, 15.73047393, 15.76479543, 15.90771119, 15.90716694, 15.89461695, 15.95473999, 15.94076728]
[2022-10-13 11:51:37,427][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[9.399, 9.399, 9.398, 9.398, 9.398, 9.398, 9.398, 9.38, 9.269, 9.0, 9.0, 8.999, 8.9, 8.899, 8.899, 8.899, 8.899, 8.899, 8.9, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 8.99, 8.9, 8.9, 8.9, 8.9, 8.9, 8.9, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.899, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.799, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.39, 8.39, 8.39, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.45, 8.45, 8.45, 8.45, 8.45, 8.5, 8.5, 8.5, 8.49, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.38, 8.3795, 8.3795, 8.3795, 8.15, 8.3795, 8.3795, 8.3795, 8.3795, 8.3795, 8.3795, 8.45, 8.43, 8.43, 8.0, 8.0, 8.0, 7.5, 7.5, 7.5, 7.5, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.3, 8.3, 8.3, 8.29, 8.29, 8.29, 8.28, 8.28, 8.28, 8.28, 8.3, 8.3, 8.3, 8.3, 8.3, 8.3, 8.3, 8.1, 8.1, 8.1, 8.1, 8.1, 8.1, 8.1, 8.1, 8.1, 7.95, 7.95, 7.95, 7.69, 7.69, 7.69, 7.69, 7.69, 7.88, 7.88, 7.88, 7.88, 7.88, 7.88, 7.88, 7.88, 7.88, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.85, 7.83, 7.83, 7.83, 7.83, 7.83, 7.8, 7.8, 7.8, 7.8, 7.8, 7.8, 7.8, 7.8, 7.79, 7.7888, 7.74, 7.74, 7.74, 7.74, 7.74, 7.74, 7.74, 7.74, 7.7398, 7.7398, 7.7398, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.479, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.35, 6.35, 6.35, 6.35, 6.35, 6.35, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.5, 6.5, 6.5, 6.4, 6.4, 6.4, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.3, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.79, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.65, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.789, 6.789, 6.789, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.8, 6.78, 6.78, 6.78, 6.78, 6.78, 6.65, 6.65, 6.65, 6.65, 6.65, 6.7, 6.65, 6.65, 6.65, 6.65, 6.65, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.29, 6.29, 6.29, 6.29, 6.29, 6.29, 6.25, 6.25, 6.25, 6.25, 6.135, 6.1, 6.1, 6.1, 6.1, 6.1, 6.0, 6.0, 6.0, 6.0, 6.0, 5.99, 5.99, 5.99, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.97, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.9, 5.8, 5.8, 6.25, 6.25, 6.25, 6.25, 6.3, 6.3, 6.3, 6.3, 6.3, 6.38, 6.38, 6.38, 6.38, 6.78, 6.78, 6.78, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.875, 6.96, 6.96, 6.96, 6.96, 6.96, 6.96, 6.96, 6.96, 6.96, 6.96, 6.99, 6.99, 6.99, 7.36, 7.36, 7.36, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 8.0, 8.45, 8.8887, 8.8887, 8.88, 8.88, 8.88, 8.88, 8.88, 8.8888, 8.8, 8.8, 8.75, 8.5, 8.45, 8.45, 8.45, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.3, 8.4, 8.4, 8.35, 8.35, 8.35, 8.35, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.75, 8.75, 8.69, 8.65, 8.65, 8.65, 8.65, 8.55, 8.55, 8.5, 8.5, 8.49, 8.49, 8.49, 8.49, 8.49, 8.29, 8.29, 8.48, 8.49, 8.49, 8.49, 8.49, 8.25, 8.25, 8.25, 8.25, 8.25, 8.25, 8.54, 8.54, 8.54, 8.54, 8.54, 8.53, 8.53, 8.53, 8.515, 8.53, 8.53, 8.53, 8.5, 8.5, 8.3, 8.4, 8.4, 8.35, 8.35, 8.35, 8.3, 8.3, 8.3, 8.3, 8.295, 8.295, 8.295, 8.295, 8.295, 8.28, 8.199, 8.199, 8.199, 8.199, 8.199, 8.199, 8.199, 8.15, 8.15, 8.15, 8.1, 8.1, 8.09, 8.09, 8.09, 8.09, 8.09, 7.99, 7.98, 7.98, 7.98, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.99, 7.98, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.97, 7.96, 7.96, 7.96, 7.96, 7.96, 7.96, 7.45, 7.45, 7.96, 7.96, 7.96, 7.95, 7.95, 7.95, 7.95, 7.96, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.86, 8.0, 8.0, 8.0, 7.99, 7.99, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.95, 7.95, 7.95, 7.95, 7.95, 7.95, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.9, 7.85, 7.85, 7.85, 7.85, 7.8, 7.75, 7.75, 7.6, 7.6, 7.6, 7.55, 7.55, 7.5, 7.5, 7.6, 7.6, 7.6, 7.6, 7.6, 7.59, 7.59, 7.59, 7.59, 7.59, 7.59, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.39999, 7.39999, 7.2, 7.2, 7.2, 7.4, 7.4, 7.4, 7.0, 7.0, 7.4, 7.4, 7.4, 7.4, 7.4, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 6.95, 7.399999, 7.399999, 7.399999, 7.399999, 7.399999, 7.399999, 7.399999, 7.399999, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.48, 7.48, 7.48, 7.48, 7.48, 7.48, 7.48, 7.41, 7.41, 7.39, 7.38, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.35, 7.34, 7.3, 7.31, 7.31, 7.3, 7.3, 7.3, 7.3, 7.19, 7.11, 7.1, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.95, 6.95, 6.95, 6.93, 6.9, 6.9, 6.9, 6.9, 6.9, 6.88, 6.88, 6.86, 6.85, 6.8, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 7.1, 7.49, 7.5, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.7, 7.63, 7.63, 7.63, 7.6, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.63, 7.63, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.63, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.999, 7.999, 7.999, 8.5, 8.5, 9.49, 9.49, 9.49, 10.45, 10.45, 10.349, 10.349, 10.349, 10.2, 10.2, 10.0, 9.95, 10.2, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 9.95, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.1, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.899, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 9.888, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.1, 10.1, 10.1, 10.349, 10.349, 10.4, 10.4, 10.4, 10.4, 10.4, 10.5, 10.5, 10.5, 10.5, 11.49, 11.45, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.44, 11.29, 11.29, 11.29, 11.2, 11.2, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.11, 11.895, 11.895, 11.8, 11.8, 11.8, 11.8, 11.8, 11.75, 11.75, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.8, 11.95, 11.95, 11.95, 11.7, 11.7, 11.69, 11.69, 11.69, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 11.15, 10.975, 10.888, 10.888, 10.888, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.1, 10.1, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 9.95, 9.95, 9.95, 9.95, 9.949, 9.949, 9.949, 9.949, 9.949, 9.69, 9.69, 9.89, 9.89, 9.89, 9.89, 9.8, 9.69, 9.69, 9.69, 9.69, 9.54, 9.54, 9.54, 9.25, 9.25, 9.25, 9.25, 9.25, 9.1, 9.1, 9.0, 9.0, 9.0, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.69, 8.69, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 8.88, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 9.65, 9.65, 9.65, 9.65, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.55, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.95, 9.95, 9.95, 9.95, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 9.7, 9.7, 9.7, 9.7, 9.7, 10.44, 10.0, 10.0, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.35, 10.35, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.23, 10.15, 10.23, 10.23, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.21, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.4, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.1, 9.99, 9.99, 10.44, 10.44, 10.44, 10.44, 10.44, 10.44, 10.38, 10.38, 10.38, 10.369, 10.369, 10.369, 10.369, 10.369, 10.35, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.0, 10.05, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.05, 10.05, 10.05, 10.05, 10.02, 10.02, 10.3, 10.3, 10.3, 9.75, 10.3, 10.3, 10.3, 10.19, 10.19, 10.1, 10.1, 10.1, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25],[15.20181375, 15.20181375, 15.20181375, 15.20143089, 15.20143089, 15.20143089, 15.20143089, 15.20143089, 15.20143089, 15.20143089, 15.20143089, 15.20142494, 15.20127417, 15.20127417, 15.20127417, 15.20112637, 15.2008426, 15.20064754, 15.20044954, 15.20025125, 15.20025125, 15.20025125, 15.19992178, 15.19976519, 15.19976519, 15.1997844, 15.1997844, 15.1997844, 15.19951465, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19940535, 15.19925175, 15.19925175, 15.19925175, 15.19925175, 15.19925175, 15.19925175, 15.19906862, 15.19906862, 15.19906862, 15.19886482, 15.19886482, 15.19886482, 15.19886482, 15.19868171, 15.1983037, 15.1983037, 15.19819447, 15.19819447, 15.19819447, 15.19819447, 15.1980557, 15.1980557, 15.1980557, 15.19793171, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19756207, 15.19718126, 15.19718126, 15.19718126, 15.19718126, 15.19726403, 15.19708103, 15.19708103, 15.19708103, 15.19708103, 15.19708103, 15.19710843, 15.1969195, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.19671438, 15.1965137, 15.1965137, 15.1965137, 15.1965137, 15.1965137, 15.1965137, 15.1965137, 15.1965137, 15.19627169, 15.19627169, 15.19627169, 15.19587365, 15.19587365, 15.19579406, 15.19559934, 15.19559934, 15.19559934, 15.19559934, 15.19559934, 15.19559934, 15.19559934, 15.19559934, 15.1953753, 15.19514813, 15.19502429, 15.19445881, 15.19445881, 15.19445881, 15.19445881, 15.19445881, 15.19548612, 15.19548612, 15.19548612, 15.19548612, 15.19548612, 15.19548612, 15.19530326, 15.19484923, 15.19484923, 15.19465164, 15.19465164, 15.19451433, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19412149, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19392248, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19385774, 15.19376645, 15.19376645, 15.19376645, 15.19376645, 15.1935837, 15.1935837, 15.1935837, 15.1935837, 15.19336849, 15.19336849, 15.19336849, 15.19295583, 15.19273201, 15.1920512, 15.19184847, 15.19184847, 15.19164752, 15.19149379, 15.19149379, 15.19149379, 15.19149379, 15.19126691, 15.19045012, 15.18955001, 15.18865259, 15.18796166, 15.18728169, 15.18728169, 15.18728169, 15.18728169, 15.18728169, 15.18728169, 15.18691099, 15.18650791, 15.18650791, 15.18606549, 15.1858581, 15.1858581, 15.18599999, 15.18599999, 15.18599999, 15.18579999, 15.18579999, 15.1855941, 15.1855941, 15.18465334, 15.18426705, 15.18426705, 15.18405537, 15.18405537, 15.18384664, 15.18364794, 15.18364794, 15.18364794, 15.18364794, 15.18364794, 15.18364794, 15.18342155, 15.18342155, 15.1832217, 15.18301862, 15.18281584, 15.18258951, 15.18258951, 15.18258951, 15.18258951, 15.18258951, 15.18258951, 15.18237203, 15.18237203, 15.18218991, 15.18177313, 15.18177313, 15.18177313, 15.18177313, 15.18133534, 15.18133534, 15.18094766, 15.18094766, 15.18052352, 15.18052352, 15.18042985, 15.18042985, 15.18023312, 15.17959264, 15.17938712, 15.17938712, 15.1810013, 15.18077418, 15.18053567, 15.18033162, 15.18013436, 15.18013436, 15.18013436, 15.17934508, 15.17934508, 15.17934508, 15.17934508, 15.17913373, 15.17892651, 15.17892651, 15.17892651, 15.17892651, 15.17870831, 15.17850583, 15.17850583, 15.17850583, 15.17850583, 15.17830336, 15.17830336, 15.17830336, 15.17812739, 15.17812739, 15.17766258, 15.17766258, 15.17742425, 15.17718358, 15.17675427, 15.17656308, 15.17656308, 15.17963753, 15.17893085, 15.17869123, 15.17869123, 15.17869123, 15.17869123, 15.17869123, 15.17869123, 15.17869123, 15.17869123, 15.1781972, 15.1781972, 15.17716245, 15.17668398, 15.17668398, 15.17643291, 15.17643291, 15.17643291, 15.17617049, 15.17617049, 15.17617049, 15.17617049, 15.17617049, 15.17591537, 15.17591537, 15.17580729, 15.17504189, 15.17484643, 15.17470021, 15.17470021, 15.17445211, 15.17414797, 15.17414797, 15.1731252, 15.17289385, 15.17184114, 15.17103185, 15.1708062, 15.1699777, 15.1699777, 15.1699777, 15.1699777, 15.1699777, 15.16950365, 15.16950365, 15.16904962, 15.16854072, 15.16804628, 15.16750845, 15.16725052, 15.16698135, 15.16649237, 15.16649237, 15.16649237, 15.16649237, 15.16626729, 15.16575843, 15.16511592, 15.1648733, 15.16461412, 15.16437447, 15.16382951, 15.16285386, 15.16151806, 15.16151806, 15.16151806, 15.16151806, 15.16127859, 15.16717339, 15.16663306, 15.16618047, 15.16595859, 15.16595859, 15.16556766, 15.16491948, 15.16491948, 15.16491948, 15.16491948, 15.16465957, 15.16465957, 15.16465957, 15.16420575, 15.16393421, 15.16393421, 15.16341452, 15.16253652, 15.16228261, 15.16152471, 15.16152471, 15.16102876, 15.16102876, 15.16081011, 15.16056656, 15.16030544, 15.16030544, 15.16030544, 15.16030544, 15.16009474, 15.15884579, 15.15884579, 15.15884579, 15.15860676, 15.15833789, 15.15833789, 15.15833789, 15.15836254, 15.15836254, 15.1581174, 15.1581174, 15.15747607, 15.15747607, 15.15747607, 15.15747607, 15.1569583, 15.1569583, 15.1569583, 15.15674282, 15.15674282, 15.15653321, 15.15653321, 15.15630838, 15.15609879, 15.15609879, 15.15609879, 15.15609879, 15.15583357, 15.15583357, 15.15583357, 15.15559766, 15.15559766, 15.15534419, 15.15457751, 15.15457751, 15.15457751, 15.15457751, 15.15457751, 15.15457751, 15.15457751, 15.15433874, 15.15433874, 15.15433874, 15.15369405, 15.15369405, 15.15369405, 15.15369405, 15.15344914, 15.15309615, 15.1528541, 15.1528541, 15.1528541, 15.1528541, 15.15236946, 15.15236946, 15.15236946, 15.15236946, 15.15236946, 15.15212175, 15.15212175, 15.15185854, 15.15185854, 15.15185854, 15.15159417, 15.15105374, 15.15079586, 15.15079586, 15.15052804, 15.15026785, 15.15026785, 15.14999363, 15.14999363, 15.14999363, 15.1497522, 15.14949615, 15.14899881, 15.14899881, 15.14899881, 15.28498527, 15.28498527, 15.28453634, 15.28453634, 15.28427392, 15.28427392, 15.28427392, 15.28359939, 15.28277, 15.28277, 15.28168251, 15.28141559, 15.28114868, 15.28085855, 15.28011372, 15.27954854, 15.27954854, 15.27954854, 15.27954854, 15.27928349, 15.27928349, 15.27928349, 15.27901233, 15.2785582, 15.27829029, 15.27801947, 15.27801947, 15.27801947, 15.27778516, 15.27760486, 15.27861824, 15.27861824, 15.27836851, 15.27836851, 15.27792475, 15.27792475, 15.27792475, 15.27746587, 15.27746587, 15.27723163, 15.27723163, 15.27723163, 15.27674636, 15.27674636, 15.27654135, 15.27635823, 15.27533795, 15.27533795, 15.27533795, 15.27505789, 15.27420583, 15.27393241, 15.27337625, 15.2728444, 15.27258273, 15.2722919, 15.2722919, 15.2722919, 15.2722919, 15.2722919, 15.27200365, 15.27200365, 15.27176244, 15.27148562, 15.27148562, 15.27148562, 15.27121233, 15.27093908, 15.27093908, 15.27093908, 15.27133588, 15.27012922, 15.26987355, 15.26958582, 15.26921913, 15.26921913, 15.26867702, 15.26969452, 15.26969452, 15.26943458, 15.26851268, 15.26751879, 15.26656897, 15.26581012, 15.26445297, 15.26393981, 15.26346219, 15.26322154, 15.26167524, 15.26048641, 15.26024593, 15.25954116, 15.25929783, 15.25800736, 15.25779031, 15.25753948, 15.257305, 15.25724658, 15.25624573, 15.25624573, 15.25578481, 15.25538445, 15.25538445, 15.25493862, 15.25493862, 15.25469849, 15.25404421, 15.25404421, 15.25404421, 15.25404421, 15.25380297, 15.25356175, 15.25312966, 15.25232232, 15.25058256, 15.25157023, 15.25134128, 15.25122493, 15.25106329, 15.25106329, 15.2510807, 15.25012183, 15.25012183, 15.2499079, 15.24816327, 15.24551847, 15.24346299, 15.24101459, 15.23954337, 15.23923613, 15.23901919, 15.23849628, 15.23816339, 15.23781807, 15.23753747, 15.23697833, 15.23676589, 15.23660718, 15.23709323, 15.23687909, 15.23667578, 15.23667578, 15.23667578, 15.23667578, 15.23667578, 15.23660514, 15.23660514, 15.23570693, 15.23495332, 15.23473221, 15.23453891, 15.23453891, 15.23646561, 15.23635733, 15.23635733, 15.23612555, 15.23572179, 15.23530971, 15.23509282, 15.23450249, 15.23450249, 15.23420522, 15.23401881, 15.23401881, 15.23401881, 15.23401881, 15.23401881, 15.2340089, 15.23382254, 15.23382254, 15.23344926, 15.23261415, 15.23180918, 15.23101167, 15.23101167, 15.23101167, 15.23101167, 15.23080376, 15.23058, 15.23058, 15.23058, 15.23058, 15.23038514, 15.23038514, 15.23038514, 15.23038514, 15.23002741, 15.23002741, 15.23002741, 15.23002741, 15.22966816, 15.22966816, 15.22966816, 15.22953848, 15.22944673, 15.22879709, 15.22849448, 15.22815053, 15.22785429, 15.22764058, 15.22764058, 15.22764058, 15.22764058, 15.22748934, 15.22749722, 15.2272809, 15.2272809, 15.2272809, 15.2272809, 15.22707992, 15.22707992, 15.22707992, 15.22575417, 15.22554517, 15.22531464, 15.22515773, 15.2251223, 15.2251223, 15.22472194, 15.22472194, 15.22452154, 15.22561083, 15.22561083, 15.22561083, 15.22561083, 15.22561083, 15.22540189, 15.22540189, 15.22540189, 15.22540189, 15.22540189, 15.22540189, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22502741, 15.22481793, 15.22462349, 15.22462349, 15.22401492, 15.22401492, 15.22401492, 15.22401492, 15.22401492, 15.22401492, 15.22384336, 15.22384336, 15.22384336, 15.22364897, 15.22364897, 15.22321687, 15.22300228, 15.22300228, 15.22300228, 15.22300228, 15.22300228, 15.22300228, 15.22329936, 15.22588129, 15.22588129, 15.22588129, 15.22565676, 15.2254474, 15.2254474, 15.22525163, 15.22502264, 15.2246482, 15.2246482, 15.2246482, 15.2246482, 15.2246482, 15.22446259, 15.22400251, 15.22400251, 15.22400251, 15.22400251, 15.22400251, 15.25306832, 15.25306832, 15.25306832, 15.25306832, 15.25306832, 15.2528398, 15.2528398, 15.25262862, 15.25244807, 15.25244807, 15.25214402, 15.25214402, 15.25214402, 15.25214402, 15.25193317, 15.25193317, 15.25154154, 15.25131773, 15.25131773, 15.25131773, 15.25131773, 15.25108932, 15.25122498, 15.25104448, 15.25104448, 15.25104448, 15.25104448, 15.25104448, 15.25104448, 15.25104448, 15.25084918, 15.25084918, 15.25084918, 15.25066298, 15.25002387, 15.25007438, 15.25003397, 15.24981321, 15.24981321, 15.24981321, 15.24912814, 15.24912814, 15.24912814, 15.24912814, 15.24912814, 15.24912814, 15.24912814, 15.24912814, 15.24897667, 15.24897667, 15.24897667, 15.24897667, 15.24897667, 15.24897667, 15.24876486, 15.24876486, 15.24831084, 15.24831084, 15.24813057, 15.24813057, 15.24789983, 15.24789983, 15.24789983, 15.24789983, 15.24789983, 15.24789983, 15.24789983, 15.24789983, 15.24795108, 15.24795108, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24775072, 15.24753883, 15.2473298, 15.24710275, 15.24710275, 15.24710275, 15.24681478, 15.24681478, 15.24634817, 15.24634817, 15.24720507, 15.2471115, 15.2471115, 15.2471115, 15.24642067, 15.24430689, 15.24430689, 15.24407201, 15.24407201, 15.24339462, 15.24339462, 15.24315795, 15.24294187, 15.24270126, 15.35053051, 15.391152, 15.391152, 15.391152, 15.391152, 15.39090527, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.39043768, 15.38969544, 15.74368183, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74280858, 15.74247818, 15.74247818, 15.74247818, 15.74222048, 15.74199855, 15.7414739, 15.74122915, 15.74122915, 15.74122915, 15.74122915, 15.74122915, 15.74122915, 15.74122915, 15.74122915, 15.74096151, 15.74049086, 15.74021264, 15.74021264, 15.73994408, 15.73994408, 15.73994408, 15.73994408, 15.73994408, 15.73994408, 15.73994408, 15.73975102, 15.73950067, 15.73950067, 15.73950067, 15.73950067, 15.73950067, 15.73950067, 15.73924891, 15.73924891, 15.73924891, 15.73904156, 15.73904156, 15.73879126, 15.73879126, 15.73879126, 15.73879126, 15.73813646, 15.73788621, 15.73788621, 15.73763597, 15.73763597, 15.73763597, 15.7373716, 15.7373716, 15.7373716, 15.7373716, 15.7373716, 15.7373716, 15.7373716, 15.7373716, 15.73718439, 15.73691422, 15.73665717, 15.73665717, 15.73665717, 15.73665717, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73643563, 15.73619976, 15.73619976, 15.73619976, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73595506, 15.73541196, 15.73541196, 15.73517617, 15.73517617, 15.73517617, 15.73517617, 15.73495472, 15.73469778, 15.73469778, 15.7344649, 15.7344649, 15.7344649, 15.7344649, 15.7344649, 15.7344649, 15.7344649, 15.73426638, 15.73401331, 15.73324322, 15.73324322, 15.73324322, 15.7329902, 15.7329902, 15.73245491, 15.73245491, 15.73245491, 15.73218324, 15.73164176, 15.73164176, 15.73164176, 15.73115918, 15.73115918, 15.73115918, 15.73115918, 15.73088092, 15.73088092, 15.73088092, 15.73060929, 15.73047393, 15.73047393, 15.73047393, 15.729843, 15.72957891, 15.72957891, 15.72957891, 15.72957891, 15.72957891, 15.72957891, 15.72957891, 15.72947649, 15.72947649, 15.72922988, 15.72922988, 15.72922988, 15.72871203, 15.72871203, 15.72871203, 15.72845927, 15.72624371, 15.72574888, 15.72534961, 15.72486981, 15.72443001, 15.72372015, 15.72366447, 15.72366447, 15.72366447, 15.72366447, 15.72342364, 15.72342364, 15.72320284, 15.72320284, 15.72298205, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.72250545, 15.7222847, 15.7222847, 15.7222847, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72203573, 15.72155485, 15.72155485, 15.72136274, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72091109, 15.72068757, 15.72046692, 15.72046692, 15.72046692, 15.71982246, 15.71961443, 15.71961443, 15.72021965, 15.72021965, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.71999765, 15.71981423, 15.71776552, 15.71729606, 15.71706886, 15.71706886, 15.71706886, 15.71690528, 15.71690528, 15.71665846, 15.71646662, 15.71646662, 15.71646662, 15.71646662, 15.71646662, 15.71626623, 15.71626623, 15.71626623, 15.71604586, 15.71488649, 15.71394222, 15.71336111, 15.71271018, 15.7117878, 15.72329528, 15.7710968, 15.7691391, 15.76903151, 15.76855681, 15.76840115, 15.76700834, 15.76651575, 15.76632067, 15.76588827, 15.76588827, 15.7657285, 15.76547557, 15.76547557, 15.76547557, 15.76541653, 15.76496807, 15.76496807, 15.76479543, 15.76463147, 15.76455285, 15.76455285, 15.76443697, 15.76443697, 15.76427303, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76389116, 15.76370166, 15.76305854, 15.76260364, 15.76246823, 15.76226844, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.76209893, 15.762017, 15.76185603, 15.76130757, 15.76130757, 15.76130757, 15.76130757, 15.76130757, 15.76064119, 15.76046221, 15.76046221, 15.76046221, 15.75996795, 15.75946976, 15.75905234, 15.75877127, 15.75840393, 15.75801531, 15.75742135, 15.7599563, 15.75933884, 15.75918237, 15.75840154, 15.75811711, 15.7575365, 15.75692928, 15.75679424, 15.75638607, 15.83225147, 15.83136763, 15.83136763, 15.83083219, 15.83021149, 15.8301454, 15.8301454, 15.8301454, 15.82994659, 15.82967464, 15.82967464, 15.82967464, 15.82967464, 15.82967464, 15.82966529, 15.82966529, 15.82966529, 15.829534, 15.829534, 15.829534, 15.829534, 15.829534, 15.82940981, 15.82940981, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.82929556, 15.85995344, 15.85982985, 15.85960162, 15.85954892, 15.85941402, 15.85941402, 15.85941402, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86195463, 15.86167179, 15.86167179, 15.86167179, 15.86167179, 15.86167179, 15.86159919, 15.86159919, 15.90733727, 15.90695951, 15.90695951, 15.90695951, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90771119, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90760049, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90719263, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90716694, 15.90708459, 15.90686256, 15.90686256, 15.90669383, 15.90669383, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90648606, 15.90629045, 15.90629045, 15.90568426, 15.90550002, 15.90538942, 15.9051948, 15.9051948, 15.90499927, 15.90499927, 15.90499927, 15.90461094, 15.90454285, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90436152, 15.90412687, 15.90412687, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90434781, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90335666, 15.90251351, 15.90251351, 15.90251351, 15.90207663, 15.90084245, 15.90080281, 15.9002663, 15.90009933, 15.90009933, 15.89996067, 15.89808632, 15.89790306, 15.89790306, 15.89772205, 15.89772205, 15.89772205, 15.89756934, 15.89756934, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89747322, 15.89596066, 15.89596066, 15.89596066, 15.89580096, 15.89580096, 15.89580096, 15.89490231, 15.89490231, 15.89461695, 15.89444175, 15.89444175, 15.89427505, 15.89412532, 15.89345261, 15.89345261, 15.8932902, 15.89284672, 15.89284672, 15.89284672, 15.89270837, 15.8925474, 15.89260699, 15.89260699, 15.88796243, 15.88796243, 15.88674176, 15.88553081, 15.88469024, 15.88436859, 15.88418119, 15.88418119, 15.88418119, 15.88418119, 15.88418119, 15.88140071, 15.88140071, 15.8811344, 15.88023739, 15.88023739, 15.88023739, 15.88008544, 15.87992928, 15.87998914, 15.87965367, 15.87965367, 15.87965367, 15.87965367, 15.87965367, 15.87958028, 15.87916638, 15.8784728, 15.87819392, 15.87819392, 15.87774566, 15.87772088, 15.87756568, 15.87724741, 15.87701442, 15.87701442, 15.87732602, 15.87732602, 15.8760553, 15.8760553, 15.87386439, 15.87386439, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87378331, 15.87361985, 15.87302044, 15.87282402, 15.87178947, 15.87163515, 15.86720046, 15.86706325, 15.86706325, 15.86662469, 15.86662469, 15.8663545, 15.8663545, 15.86621732, 15.86621732, 15.86485694, 15.86483257, 15.86483257, 15.86465748, 15.86361793, 15.86349496, 15.86349496, 15.86332973, 15.8631645, 15.8631645, 15.86311586, 15.86311586, 15.86311586, 15.96918404, 15.96918404, 15.96918404, 15.96879193, 15.96776559, 15.96650488, 15.9654309, 15.96434236, 15.96417436, 15.96417436, 15.96311299, 15.96311299, 15.96266416, 15.96176713, 15.96167684, 15.96167684, 15.96167684, 15.96045898, 15.95920702, 15.95903559, 15.95903559, 15.95888778, 15.95888778, 15.95791579, 15.95746736, 15.95746736, 15.95506221, 15.95509157, 15.95498046, 15.95473999, 15.95383296, 15.95369663, 15.95323581, 15.95259812, 15.9525503, 15.95237044, 15.95237044, 15.95237044, 15.95237044, 15.95182706, 15.95182706, 15.95182706, 15.95182706, 15.95093181, 15.95093181, 15.95087703, 15.94953437, 15.95245558, 15.95161605, 15.95161605, 15.95161605, 15.95161605, 15.95161605, 15.95215079, 15.95185794, 15.94690961, 15.94690961, 15.94690961, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94592567, 15.94592567, 15.94592567, 15.94592567, 15.94680418, 15.9435523, 15.94322375, 15.94268487, 15.94268487, 15.94268487, 15.94268487, 15.94263201, 15.94218505, 15.94109483, 15.94033253, 15.94022208, 15.94022208, 15.94014804, 15.93998856, 15.93982348, 15.93966822, 15.93966822, 15.93950771, 15.93921675, 15.93921675, 15.93921675, 15.9386039, 15.93800479, 15.93761213, 15.93822528, 15.9379654, 15.9376355, 15.9376355, 15.9376355, 15.9376355, 15.9380872, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93976799, 15.93936525, 15.9392073, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94240175, 15.94202971, 15.94151709, 15.94136192, 15.94125156, 15.94204827, 15.94204827, 15.94204827, 15.94076728, 15.94076728, 15.93809071, 15.93701079, 15.93686845, 15.93686845, 15.93658147, 15.93658147, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93516605, 15.93516605, 15.93516605, 15.93362158, 15.93342669, 15.93342669, 15.93092087, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93046246, 15.93030222, 15.93030222, 15.93030222]
[2022-10-13 14:00:47,106][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:00:47,107][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:00:47,478][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:00:47,479][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:00:47,931][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:00:47,933][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:00:47,937][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:00:47,937][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:00:47,939][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:00:47,940][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:00:47,941][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 14:00:48,359][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[102757, 102758, 102759, 102761, 102762, 102764, 102765, 102766, 102767, 102768, 102769, 102770, 102771, 102772, 102773, 102774, 102775, 102776, 102777, 102778, 102779, 102781, 102783, 102784, 102786, 102787, 102788, 102789, 102790, 102791, 102792, 102793, 102794, 102795, 102796, 102797, 102798, 102799, 102800, 102801, 102802, 102803, 102804, 102805, 102806, 102807, 102808, 102809, 102810, 102811], start_index为：2593
[2022-10-13 14:00:48,412][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 14:00:48,412][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:00:48,412][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 14:00:48,412][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_DAY'}
[2022-10-13 14:00:48,412][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_DAY"
}
[2022-10-13 14:00:48,874][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 07:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 08:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 09:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 10:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 11:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 12:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 13:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 14:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93362158, 'date': '2022-10-12 15:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 16:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 17:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93092087, 'date': '2022-10-12 18:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 19:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 20:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 21:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 22:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 23:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93046246, 'date': '2022-10-13 00:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 01:00', 'showTime': True}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 02:00', 'showTime': True}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 03:00', 'showTime': True}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 04:00', 'showTime': True}, {'floorPrice': 10.25, 'avgPrice': 15.93913916, 'date': '2022-10-13 05:00', 'showTime': True}, {'floorPrice': 10.25, 'avgPrice': 15.94559891, 'date': '2022-10-13 06:00', 'showTime': True}]}
[2022-10-13 14:00:48,875][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 14:00:49,124][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 14:00:49,372][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25, 10.25, 10.25, 10.25],[15.93658147, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93516605, 15.93516605, 15.93516605, 15.93362158, 15.93342669, 15.93342669, 15.93092087, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93046246, 15.93030222, 15.93030222, 15.93030222, 15.93030222, 15.93913916, 15.94559891]
[2022-10-13 14:00:49,372][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25, 10.25, 10.25, 10.25],[15.93658147, 15.93525684, 15.93525684, 15.93525684, 15.93525684, 15.93516605, 15.93516605, 15.93516605, 15.93362158, 15.93342669, 15.93342669, 15.93092087, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93078298, 15.93046246, 15.93030222, 15.93030222, 15.93030222, 15.93030222, 15.93913916, 15.94559891]
[2022-10-13 14:00:49,379][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 14:00:49,380][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:00:49,380][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_WEEK"
}
[2022-10-13 14:00:49,380][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_WEEK'}
[2022-10-13 14:00:49,380][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_WEEK"
}
[2022-10-13 14:00:49,812][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 10.0, 'avgPrice': 15.86465748, 'date': '2022-10-06 08:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86349496, 'date': '2022-10-06 10:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86332973, 'date': '2022-10-06 12:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.8631645, 'date': '2022-10-06 14:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.86311586, 'date': '2022-10-06 16:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96918404, 'date': '2022-10-06 18:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96918404, 'date': '2022-10-06 20:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96776559, 'date': '2022-10-06 22:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.9654309, 'date': '2022-10-07 00:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96417436, 'date': '2022-10-07 02:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96311299, 'date': '2022-10-07 04:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96266416, 'date': '2022-10-07 06:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96167684, 'date': '2022-10-07 08:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.96167684, 'date': '2022-10-07 10:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95920702, 'date': '2022-10-07 12:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95903559, 'date': '2022-10-07 14:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95888778, 'date': '2022-10-07 16:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95746736, 'date': '2022-10-07 18:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95506221, 'date': '2022-10-07 20:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95498046, 'date': '2022-10-07 22:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95383296, 'date': '2022-10-08 00:00', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95323581, 'date': '2022-10-08 02:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.9525503, 'date': '2022-10-08 04:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95237044, 'date': '2022-10-08 06:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95237044, 'date': '2022-10-08 08:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.95182706, 'date': '2022-10-08 10:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95182706, 'date': '2022-10-08 12:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95093181, 'date': '2022-10-08 14:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94953437, 'date': '2022-10-08 16:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95161605, 'date': '2022-10-08 18:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95161605, 'date': '2022-10-08 20:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95161605, 'date': '2022-10-08 22:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95185794, 'date': '2022-10-09 00:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94690961, 'date': '2022-10-09 02:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 04:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 06:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 08:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94608828, 'date': '2022-10-09 10:00', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.94592567, 'date': '2022-10-09 12:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94592567, 'date': '2022-10-09 14:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94680418, 'date': '2022-10-09 16:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94322375, 'date': '2022-10-09 18:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94268487, 'date': '2022-10-09 20:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94268487, 'date': '2022-10-09 22:00', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94218505, 'date': '2022-10-10 00:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.94033253, 'date': '2022-10-10 02:00', 'showTime': False}, {'floorPrice': 10.05, 'avgPrice': 15.94022208, 'date': '2022-10-10 04:00', 'showTime': False}, {'floorPrice': 10.02, 'avgPrice': 15.93998856, 'date': '2022-10-10 06:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93966822, 'date': '2022-10-10 08:00', 'showTime': False}, {'floorPrice': 9.75, 'avgPrice': 15.93950771, 'date': '2022-10-10 10:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93921675, 'date': '2022-10-10 12:00', 'showTime': False}, {'floorPrice': 10.19, 'avgPrice': 15.9386039, 'date': '2022-10-10 14:00', 'showTime': False}, {'floorPrice': 10.1, 'avgPrice': 15.93761213, 'date': '2022-10-10 16:00', 'showTime': False}, {'floorPrice': 10.1, 'avgPrice': 15.9379654, 'date': '2022-10-10 18:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9376355, 'date': '2022-10-10 20:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9376355, 'date': '2022-10-10 22:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 00:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 02:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 04:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93960775, 'date': '2022-10-11 06:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93976799, 'date': '2022-10-11 08:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9392073, 'date': '2022-10-11 10:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 12:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 14:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11 16:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94151709, 'date': '2022-10-11 18:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94125156, 'date': '2022-10-11 20:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94204827, 'date': '2022-10-11 22:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12 00:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93809071, 'date': '2022-10-12 02:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93686845, 'date': '2022-10-12 04:00', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.93658147, 'date': '2022-10-12 06:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 08:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93525684, 'date': '2022-10-12 10:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 12:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93516605, 'date': '2022-10-12 14:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93342669, 'date': '2022-10-12 16:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93092087, 'date': '2022-10-12 18:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 20:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93078298, 'date': '2022-10-12 22:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93046246, 'date': '2022-10-13 00:00', 'showTime': False}, {'floorPrice': 10.29, 'avgPrice': 15.93030222, 'date': '2022-10-13 02:00', 'showTime': False}, {'floorPrice': 10.25, 'avgPrice': 15.93030222, 'date': '2022-10-13 04:00', 'showTime': False}, {'floorPrice': 10.25, 'avgPrice': 15.94559891, 'date': '2022-10-13 06:00', 'showTime': False}]}
[2022-10-13 14:00:49,813][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 14:00:50,065][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 14:00:50,319][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.05, 10.05, 10.05, 10.05, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.05, 10.05, 10.02, 10.3, 9.75, 10.3, 10.19, 10.1, 10.1, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25, 10.25],[15.86465748, 15.86349496, 15.86332973, 15.8631645, 15.86311586, 15.96918404, 15.96918404, 15.96776559, 15.9654309, 15.96417436, 15.96311299, 15.96266416, 15.96167684, 15.96167684, 15.95920702, 15.95903559, 15.95888778, 15.95746736, 15.95506221, 15.95498046, 15.95383296, 15.95323581, 15.9525503, 15.95237044, 15.95237044, 15.95182706, 15.95182706, 15.95093181, 15.94953437, 15.95161605, 15.95161605, 15.95161605, 15.95185794, 15.94690961, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94592567, 15.94592567, 15.94680418, 15.94322375, 15.94268487, 15.94268487, 15.94218505, 15.94033253, 15.94022208, 15.93998856, 15.93966822, 15.93950771, 15.93921675, 15.9386039, 15.93761213, 15.9379654, 15.9376355, 15.9376355, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93976799, 15.9392073, 15.94240175, 15.94240175, 15.94240175, 15.94151709, 15.94125156, 15.94204827, 15.94076728, 15.93809071, 15.93686845, 15.93658147, 15.93525684, 15.93525684, 15.93516605, 15.93516605, 15.93342669, 15.93092087, 15.93078298, 15.93078298, 15.93046246, 15.93030222, 15.93030222, 15.94559891]
[2022-10-13 14:00:50,319][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.06, 10.05, 10.05, 10.05, 10.05, 10.05, 10.05, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.97, 9.97, 9.97, 9.97, 9.97, 9.97, 10.05, 10.05, 10.02, 10.3, 10.3, 10.3, 10.3, 10.19, 10.1, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.3, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.29, 10.25, 10.25],[15.86483257, 15.86361793, 15.86349496, 15.8631645, 15.86311586, 15.86311586, 15.96918404, 15.96879193, 15.96650488, 15.96434236, 15.96417436, 15.96311299, 15.96176713, 15.96167684, 15.96045898, 15.95903559, 15.95888778, 15.95791579, 15.95746736, 15.95509157, 15.95473999, 15.95369663, 15.95259812, 15.95237044, 15.95237044, 15.95182706, 15.95182706, 15.95093181, 15.95087703, 15.95245558, 15.95161605, 15.95161605, 15.95215079, 15.94690961, 15.94690961, 15.94608828, 15.94608828, 15.94608828, 15.94608828, 15.94592567, 15.94592567, 15.9435523, 15.94268487, 15.94268487, 15.94263201, 15.94109483, 15.94022208, 15.94014804, 15.93982348, 15.93966822, 15.93921675, 15.93921675, 15.93800479, 15.93822528, 15.9376355, 15.9376355, 15.9380872, 15.93960775, 15.93960775, 15.93960775, 15.93960775, 15.93936525, 15.94240175, 15.94240175, 15.94240175, 15.94202971, 15.94136192, 15.94204827, 15.94204827, 15.94076728, 15.93701079, 15.93686845, 15.93658147, 15.93525684, 15.93525684, 15.93516605, 15.93362158, 15.93342669, 15.93078298, 15.93078298, 15.93078298, 15.93030222, 15.93030222, 15.93913916]
[2022-10-13 14:00:50,585][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 14:00:50,585][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:00:50,585][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_MONTH"
}
[2022-10-13 14:00:50,586][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'ONE_MONTH'}
[2022-10-13 14:00:50,586][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "ONE_MONTH"
}
[2022-10-13 14:00:51,010][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 7.7, 'avgPrice': 15.72366447, 'date': '2022-09-13', 'showTime': False}, {'floorPrice': 7.5, 'avgPrice': 15.72203573, 'date': '2022-09-14', 'showTime': False}, {'floorPrice': 7.63, 'avgPrice': 15.72021965, 'date': '2022-09-15', 'showTime': False}, {'floorPrice': 9.49, 'avgPrice': 15.71604586, 'date': '2022-09-16', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.76479543, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 9.899, 'avgPrice': 15.76209893, 'date': '2022-09-18', 'showTime': False}, {'floorPrice': 10.4, 'avgPrice': 15.75933884, 'date': '2022-09-19', 'showTime': False}, {'floorPrice': 11.11, 'avgPrice': 15.82966529, 'date': '2022-09-20', 'showTime': False}, {'floorPrice': 11.8, 'avgPrice': 15.86195463, 'date': '2022-09-21', 'showTime': False}, {'floorPrice': 11.15, 'avgPrice': 15.90771119, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 10.2, 'avgPrice': 15.90760049, 'date': '2022-09-23', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.90719263, 'date': '2022-09-24', 'showTime': False}, {'floorPrice': 9.25, 'avgPrice': 15.90719263, 'date': '2022-09-25', 'showTime': False}, {'floorPrice': 8.88, 'avgPrice': 15.90719263, 'date': '2022-09-26', 'showTime': False}, {'floorPrice': 9.0, 'avgPrice': 15.90716694, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 9.2, 'avgPrice': 15.9051948, 'date': '2022-09-28', 'showTime': False}, {'floorPrice': 9.55, 'avgPrice': 15.90436152, 'date': '2022-09-29', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.90434781, 'date': '2022-09-30', 'showTime': False}, {'floorPrice': 10.2, 'avgPrice': 15.89996067, 'date': '2022-10-01', 'showTime': False}, {'floorPrice': 10.44, 'avgPrice': 15.89461695, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 10.23, 'avgPrice': 15.88418119, 'date': '2022-10-03', 'showTime': False}, {'floorPrice': 10.4, 'avgPrice': 15.87724741, 'date': '2022-10-04', 'showTime': False}, {'floorPrice': 10.369, 'avgPrice': 15.86662469, 'date': '2022-10-05', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.96650488, 'date': '2022-10-06', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 10.0, 'avgPrice': 15.95215079, 'date': '2022-10-08', 'showTime': False}, {'floorPrice': 9.97, 'avgPrice': 15.94263201, 'date': '2022-10-09', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.9380872, 'date': '2022-10-10', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94240175, 'date': '2022-10-11', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 14:00:51,011][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 14:00:51,388][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 14:00:51,651][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[7.7, 7.5, 7.63, 9.49, 9.95, 9.899, 10.4, 11.11, 11.8, 11.15, 10.2, 9.95, 9.25, 8.88, 9.0, 9.2, 9.55, 9.97, 10.2, 10.44, 10.23, 10.4, 10.369, 10.0, 10.06, 10.0, 9.97, 10.3, 10.3, 10.3],[15.72366447, 15.72203573, 15.72021965, 15.71604586, 15.76479543, 15.76209893, 15.75933884, 15.82966529, 15.86195463, 15.90771119, 15.90760049, 15.90719263, 15.90719263, 15.90719263, 15.90716694, 15.9051948, 15.90436152, 15.90434781, 15.89996067, 15.89461695, 15.88418119, 15.87724741, 15.86662469, 15.96650488, 15.95473999, 15.95215079, 15.94263201, 15.9380872, 15.94240175, 15.94076728]
[2022-10-13 14:00:51,652][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[6.87, 7.7, 7.5, 7.6, 10.2, 10.1, 9.888, 11.45, 11.11, 11.95, 10.5, 10.2, 9.949, 9.0, 8.88, 9.0, 9.2, 9.97, 9.97, 10.2, 10.35, 10.15, 10.29, 10.0, 10.06, 10.05, 10.0, 10.3, 10.3, 10.3],[15.72957891, 15.72298205, 15.72136274, 15.71776552, 15.7691391, 15.76389116, 15.76130757, 15.83225147, 15.82929556, 15.86167179, 15.90760049, 15.90719263, 15.90719263, 15.90719263, 15.90716694, 15.90686256, 15.90436152, 15.90436152, 15.90335666, 15.89756934, 15.89284672, 15.88008544, 15.87386439, 15.86483257, 15.96176713, 15.95237044, 15.94608828, 15.93982348, 15.93960775, 15.93658147]
[2022-10-13 14:00:51,673][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 14:00:51,674][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:00:51,674][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 14:00:51,675][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008, 'timeType': 'THREE_MONTHS'}
[2022-10-13 14:00:51,675][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 14:00:52,112][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-19', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-24', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-29', 'showTime': False}, {'floorPrice': 8.899, 'avgPrice': 15.19756207, 'date': '2022-08-03', 'showTime': False}, {'floorPrice': 7.5, 'avgPrice': 15.19149379, 'date': '2022-08-08', 'showTime': False}, {'floorPrice': 7.0, 'avgPrice': 15.17617049, 'date': '2022-08-13', 'showTime': False}, {'floorPrice': 6.8, 'avgPrice': 15.15433874, 'date': '2022-08-18', 'showTime': False}, {'floorPrice': 6.78, 'avgPrice': 15.26656897, 'date': '2022-08-23', 'showTime': False}, {'floorPrice': 8.35, 'avgPrice': 15.22764058, 'date': '2022-08-28', 'showTime': False}, {'floorPrice': 8.0, 'avgPrice': 15.24912814, 'date': '2022-09-02', 'showTime': False}, {'floorPrice': 7.4, 'avgPrice': 15.74122915, 'date': '2022-09-07', 'showTime': False}, {'floorPrice': 6.87, 'avgPrice': 15.73047393, 'date': '2022-09-12', 'showTime': False}, {'floorPrice': 9.95, 'avgPrice': 15.76479543, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 11.15, 'avgPrice': 15.90771119, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 9.0, 'avgPrice': 15.90716694, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 10.44, 'avgPrice': 15.89461695, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 10.06, 'avgPrice': 15.95473999, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 10.3, 'avgPrice': 15.94076728, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 14:00:52,112][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 101008
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 14:00:52,506][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 14:00:52,796][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[0.0, 0.0, 0.0, 8.899, 7.5, 7.0, 6.8, 6.78, 8.35, 8.0, 7.4, 6.87, 9.95, 11.15, 9.0, 10.44, 10.06, 10.3],[0.0, 0.0, 0.0, 15.19756207, 15.19149379, 15.17617049, 15.15433874, 15.26656897, 15.22764058, 15.24912814, 15.74122915, 15.73047393, 15.76479543, 15.90771119, 15.90716694, 15.89461695, 15.95473999, 15.94076728]
[2022-10-13 14:00:52,796][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[9.399, 8.4, 8.1, 6.3, 6.0, 8.5, 7.99, 7.9, 7.35, 7.63, 10.4, 9.95, 9.55, 10.4, 9.97],[15.20181375, 15.19559934, 15.18258951, 15.16127859, 15.28141559, 15.23849628, 15.22384336, 15.24775072, 15.73665717, 15.72203573, 15.75918237, 15.90719263, 15.90436152, 15.87701442, 15.94218505]
[2022-10-13 14:41:41,997][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:41:41,998][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:41:42,336][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:41:42,338][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:41:42,817][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:41:42,819][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:41:42,827][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:41:42,828][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:41:42,829][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:41:42,830][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:41:42,832][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 14:41:43,202][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[100386, 100387, 100388, 100389, 100390, 100391, 100392, 100393, 100394, 100395, 100396, 100397, 100398, 100399, 100400, 100401, 100402, 100403, 100404, 100405, 100407, 100409, 100410, 100411, 100413, 100415, 100416, 100417, 100418, 100419, 100420, 100421, 100422, 100423, 100424, 100425, 100426, 100427, 100428, 100429, 100430, 100431, 100432, 100433, 100435, 100437, 100439, 100441, 100442, 100443], start_index为：371
[2022-10-13 14:41:43,248][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart
[2022-10-13 14:41:43,248][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:41:43,248][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_DAY"
}
[2022-10-13 14:41:43,249][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'ONE_DAY'}
[2022-10-13 14:41:43,249][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_DAY"
}
[2022-10-13 14:42:22,943][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart
[2022-10-13 14:42:22,944][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:42:22,944][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 14:42:22,944][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'ONE_WEEK'}
[2022-10-13 14:42:22,944][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 14:42:28,197][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart
[2022-10-13 14:42:28,198][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:42:28,198][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_MONTH"
}
[2022-10-13 14:42:28,198][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'ONE_MONTH'}
[2022-10-13 14:42:28,198][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_MONTH"
}
[2022-10-13 14:42:33,430][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart
[2022-10-13 14:42:33,430][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:42:33,430][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 14:42:33,430][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'THREE_MONTHS'}
[2022-10-13 14:42:33,431][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 14:42:33,906][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-19', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-24', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-29', 'showTime': False}, {'floorPrice': 0.0135, 'avgPrice': 0.08342698, 'date': '2022-08-03', 'showTime': False}, {'floorPrice': 0.0149, 'avgPrice': 0.08193185, 'date': '2022-08-08', 'showTime': False}, {'floorPrice': 0.01, 'avgPrice': 0.08128609, 'date': '2022-08-13', 'showTime': False}, {'floorPrice': 0.00954444, 'avgPrice': 0.08086551, 'date': '2022-08-18', 'showTime': False}, {'floorPrice': 0.008, 'avgPrice': 0.08019813, 'date': '2022-08-23', 'showTime': False}, {'floorPrice': 0.01, 'avgPrice': 0.07956061, 'date': '2022-08-28', 'showTime': False}, {'floorPrice': 0.01, 'avgPrice': 0.07956916, 'date': '2022-09-02', 'showTime': False}, {'floorPrice': 0.00859, 'avgPrice': 0.07931792, 'date': '2022-09-07', 'showTime': False}, {'floorPrice': 0.00704444, 'avgPrice': 0.07903416, 'date': '2022-09-12', 'showTime': False}, {'floorPrice': 0.00709, 'avgPrice': 0.07856225, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 0.0072, 'avgPrice': 0.07781408, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 0.00599, 'avgPrice': 0.07750762, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 0.0059, 'avgPrice': 0.07716061, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 14:42:33,908][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 100893
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 14:42:34,280][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 100893
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 14:42:34,545][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[0.0, 0.0, 0.0, 0.0135, 0.0149, 0.01, 0.00954444, 0.008, 0.01, 0.01, 0.00859, 0.00704444, 0.00709, 0.0072, 0.00599, 0.0059, 0.0035, 0.0035],[0.0, 0.0, 0.0, 0.08342698, 0.08193185, 0.08128609, 0.08086551, 0.08019813, 0.07956061, 0.07956916, 0.07931792, 0.07903416, 0.07856225, 0.07781408, 0.07750762, 0.07716061, 0.07676047, 0.07675951]
[2022-10-13 14:42:34,545][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[0.014, 0.01, 0.0098, 0.008, 0.0089, 0.0078, 0.01, 0.01, 0.008, 0.00709, 0.00849, 0.00699, 0.006299, 0.0031, 0.003],[0.08370566, 0.08292429, 0.08158749, 0.08119371, 0.08029486, 0.07999391, 0.07949801, 0.07942901, 0.07926979, 0.07881112, 0.07826186, 0.07766709, 0.07733453, 0.07760279, 0.07679754]
[2022-10-13 14:42:48,691][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:42:48,692][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:42:49,007][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:42:49,010][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:42:49,432][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:42:49,432][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:42:49,435][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:42:49,436][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:42:49,437][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:42:49,438][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:42:49,439][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 14:42:49,782][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[101560, 101561, 101562, 101563, 101564, 101566, 101567, 101568, 101569, 101570, 101571, 101572, 101573, 101575, 101576, 101577, 101578, 101579, 101580, 101582, 101583, 101585, 101586, 101587, 101588, 101589, 101590, 101591, 101593, 101594, 101596, 101597, 101599, 101600, 101601, 101602, 101603, 101604, 101605, 101606, 101607, 101608, 101609, 101611, 101612, 101613, 101614, 101615, 101616, 101617], start_index为：1486
[2022-10-13 14:42:49,833][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart
[2022-10-13 14:42:49,834][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:42:49,834][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_DAY"
}
[2022-10-13 14:42:49,834][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'ONE_DAY'}
[2022-10-13 14:42:49,834][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_DAY"
}
[2022-10-13 14:42:50,342][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 07:00', 'showTime': True}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 08:00', 'showTime': True}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 09:00', 'showTime': True}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 10:00', 'showTime': True}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 11:00', 'showTime': True}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 12:00', 'showTime': True}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 13:00', 'showTime': True}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 14:00', 'showTime': True}, {'floorPrice': 0.0036, 'avgPrice': 0.07670809, 'date': '2022-10-12 15:00', 'showTime': True}, {'floorPrice': 0.00959, 'avgPrice': 0.07833423, 'date': '2022-10-12 16:00', 'showTime': True}, {'floorPrice': 0.00959, 'avgPrice': 0.0783208, 'date': '2022-10-12 17:00', 'showTime': True}, {'floorPrice': 0.0096, 'avgPrice': 0.07927167, 'date': '2022-10-12 18:00', 'showTime': True}, {'floorPrice': 0.0096, 'avgPrice': 0.07966879, 'date': '2022-10-12 19:00', 'showTime': True}, {'floorPrice': 0.0096, 'avgPrice': 0.0796536, 'date': '2022-10-12 20:00', 'showTime': True}, {'floorPrice': 0.014, 'avgPrice': 0.07964749, 'date': '2022-10-12 21:00', 'showTime': True}, {'floorPrice': 0.013, 'avgPrice': 0.07964749, 'date': '2022-10-12 22:00', 'showTime': True}, {'floorPrice': 0.013, 'avgPrice': 0.07964749, 'date': '2022-10-12 23:00', 'showTime': True}, {'floorPrice': 0.013, 'avgPrice': 0.07964749, 'date': '2022-10-13 00:00', 'showTime': True}, {'floorPrice': 0.01249, 'avgPrice': 0.07964066, 'date': '2022-10-13 01:00', 'showTime': True}, {'floorPrice': 0.01249, 'avgPrice': 0.07964066, 'date': '2022-10-13 02:00', 'showTime': True}, {'floorPrice': 0.01, 'avgPrice': 0.07961305, 'date': '2022-10-13 03:00', 'showTime': True}, {'floorPrice': 0.01, 'avgPrice': 0.07961305, 'date': '2022-10-13 04:00', 'showTime': True}, {'floorPrice': 0.011, 'avgPrice': 0.07959813, 'date': '2022-10-13 05:00', 'showTime': True}, {'floorPrice': 0.011, 'avgPrice': 0.07959813, 'date': '2022-10-13 06:00', 'showTime': True}]}
[2022-10-13 14:42:50,342][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 100893
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 14:42:50,545][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 100893
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 14:42:50,751][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[0.001, 0.001, 0.001, 0.001, 0.0035, 0.0035, 0.0035, 0.0035, 0.0036, 0.00959, 0.00959, 0.0096, 0.0096, 0.0096, 0.014, 0.013, 0.013, 0.013, 0.01249, 0.01249, 0.01, 0.01, 0.011, 0.011],[0.07673112, 0.07673112, 0.07673112, 0.07673112, 0.07671573, 0.07671573, 0.07671573, 0.07671573, 0.07670809, 0.07833423, 0.0783208, 0.07927167, 0.07966879, 0.0796536, 0.07964749, 0.07964749, 0.07964749, 0.07964749, 0.07964066, 0.07964066, 0.07961305, 0.07961305, 0.07959813, 0.07959813]
[2022-10-13 14:42:50,752][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[0.001, 0.001, 0.001, 0.001, 0.0035, 0.0035, 0.0035, 0.0035, 0.0036, 0.00959, 0.00959, 0.0096, 0.0096, 0.0096, 0.014, 0.013, 0.013, 0.013, 0.01249, 0.01249, 0.01, 0.01, 0.011, 0.011],[0.07673112, 0.07673112, 0.07673112, 0.07673112, 0.07671573, 0.07671573, 0.07671573, 0.07671573, 0.07670809, 0.07833423, 0.0783208, 0.07927167, 0.07966879, 0.0796536, 0.07964749, 0.07964749, 0.07964749, 0.07964749, 0.07964066, 0.07964066, 0.07961305, 0.07961305, 0.07959813, 0.07959813]
[2022-10-13 14:42:50,761][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart
[2022-10-13 14:42:50,761][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:42:50,762][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 14:42:50,762][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'ONE_WEEK'}
[2022-10-13 14:42:50,762][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 14:42:51,599][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0.0036, 'avgPrice': 0.0769336, 'date': '2022-10-06 08:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 10:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 12:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 14:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681823, 'date': '2022-10-06 16:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681052, 'date': '2022-10-06 18:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681052, 'date': '2022-10-06 20:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-06 22:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-07 00:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-07 02:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07679667, 'date': '2022-10-07 04:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 06:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 08:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 10:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 12:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 14:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 16:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 18:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 20:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 22:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 00:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 02:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 04:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 06:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767452, 'date': '2022-10-08 08:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767452, 'date': '2022-10-08 10:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767452, 'date': '2022-10-08 12:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 14:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 16:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767305, 'date': '2022-10-08 18:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-08 20:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-08 22:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 00:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 02:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 04:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 06:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 08:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 10:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07682619, 'date': '2022-10-09 12:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07682619, 'date': '2022-10-09 14:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 16:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 18:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 20:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 22:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 00:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 02:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 04:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 06:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 08:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 10:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 12:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 14:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 16:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 18:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678222, 'date': '2022-10-10 20:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678222, 'date': '2022-10-10 22:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 00:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 02:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 04:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 06:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 08:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 10:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 12:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 14:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 16:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 18:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 20:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 22:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-12 00:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673112, 'date': '2022-10-12 02:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673112, 'date': '2022-10-12 04:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 06:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 08:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 10:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 12:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 14:00', 'showTime': False}, {'floorPrice': 0.00959, 'avgPrice': 0.07833423, 'date': '2022-10-12 16:00', 'showTime': False}, {'floorPrice': 0.0096, 'avgPrice': 0.07927167, 'date': '2022-10-12 18:00', 'showTime': False}, {'floorPrice': 0.0096, 'avgPrice': 0.0796536, 'date': '2022-10-12 20:00', 'showTime': False}, {'floorPrice': 0.013, 'avgPrice': 0.07964749, 'date': '2022-10-12 22:00', 'showTime': False}, {'floorPrice': 0.013, 'avgPrice': 0.07964749, 'date': '2022-10-13 00:00', 'showTime': False}, {'floorPrice': 0.01249, 'avgPrice': 0.07964066, 'date': '2022-10-13 02:00', 'showTime': False}, {'floorPrice': 0.01, 'avgPrice': 0.07961305, 'date': '2022-10-13 04:00', 'showTime': False}, {'floorPrice': 0.011, 'avgPrice': 0.07959813, 'date': '2022-10-13 06:00', 'showTime': False}]}
[2022-10-13 14:42:51,600][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 100893
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 14:42:51,812][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 100893
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 14:42:52,030][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：
[2022-10-13 14:42:52,031][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：
[2022-10-13 14:42:52,232][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart
[2022-10-13 14:42:52,232][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:42:52,233][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_MONTH"
}
[2022-10-13 14:42:52,233][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'ONE_MONTH'}
[2022-10-13 14:42:52,233][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_MONTH"
}
[2022-10-13 14:42:53,481][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0.00709, 'avgPrice': 0.07895373, 'date': '2022-09-13', 'showTime': False}, {'floorPrice': 0.007, 'avgPrice': 0.07881112, 'date': '2022-09-14', 'showTime': False}, {'floorPrice': 0.00709, 'avgPrice': 0.07867357, 'date': '2022-09-15', 'showTime': False}, {'floorPrice': 0.00709, 'avgPrice': 0.07864214, 'date': '2022-09-16', 'showTime': False}, {'floorPrice': 0.00709, 'avgPrice': 0.07856225, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 0.009555, 'avgPrice': 0.07833603, 'date': '2022-09-18', 'showTime': False}, {'floorPrice': 0.0085, 'avgPrice': 0.07826186, 'date': '2022-09-19', 'showTime': False}, {'floorPrice': 0.0074, 'avgPrice': 0.07802243, 'date': '2022-09-20', 'showTime': False}, {'floorPrice': 0.0074, 'avgPrice': 0.07786779, 'date': '2022-09-21', 'showTime': False}, {'floorPrice': 0.0072, 'avgPrice': 0.07781408, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 0.00699, 'avgPrice': 0.07771264, 'date': '2022-09-23', 'showTime': False}, {'floorPrice': 0.00699, 'avgPrice': 0.07766709, 'date': '2022-09-24', 'showTime': False}, {'floorPrice': 0.00699, 'avgPrice': 0.07764416, 'date': '2022-09-25', 'showTime': False}, {'floorPrice': 0.00699, 'avgPrice': 0.077585, 'date': '2022-09-26', 'showTime': False}, {'floorPrice': 0.00599, 'avgPrice': 0.07750762, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 0.0065, 'avgPrice': 0.07738622, 'date': '2022-09-28', 'showTime': False}, {'floorPrice': 0.006299, 'avgPrice': 0.07733453, 'date': '2022-09-29', 'showTime': False}, {'floorPrice': 0.006, 'avgPrice': 0.0772892, 'date': '2022-09-30', 'showTime': False}, {'floorPrice': 0.006, 'avgPrice': 0.0771917, 'date': '2022-10-01', 'showTime': False}, {'floorPrice': 0.0059, 'avgPrice': 0.07716061, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 0.0067, 'avgPrice': 0.07806689, 'date': '2022-10-03', 'showTime': False}, {'floorPrice': 0.0031, 'avgPrice': 0.0776107, 'date': '2022-10-04', 'showTime': False}, {'floorPrice': 0.0031, 'avgPrice': 0.07694803, 'date': '2022-10-05', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-06', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-08', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 14:42:53,482][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 100893
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 14:42:53,805][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 100893
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 14:42:54,035][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[0.00709, 0.007, 0.00709, 0.00709, 0.00709, 0.009555, 0.0085, 0.0074, 0.0074, 0.0072, 0.00699, 0.00699, 0.00699, 0.00699, 0.00599, 0.0065, 0.006299, 0.006, 0.006, 0.0059, 0.0067, 0.0031, 0.0031, 0.0035, 0.0035, 0.0035, 0.003, 0.003, 0.0035, 0.0035],[0.07895373, 0.07881112, 0.07867357, 0.07864214, 0.07856225, 0.07833603, 0.07826186, 0.07802243, 0.07786779, 0.07781408, 0.07771264, 0.07766709, 0.07764416, 0.077585, 0.07750762, 0.07738622, 0.07733453, 0.0772892, 0.0771917, 0.07716061, 0.07806689, 0.0776107, 0.07694803, 0.07681185, 0.07676047, 0.07682658, 0.07679754, 0.07679754, 0.07675951, 0.07675951]
[2022-10-13 14:42:54,036][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[0.00684444, 0.00709, 0.0069, 0.007, 0.00709, 0.00709, 0.0085, 0.00849, 0.0073, 0.0072, 0.0074, 0.00699, 0.00699, 0.0069, 0.006, 0.006, 0.0063, 0.006299, 0.006, 0.006, 0.0059, 0.0067, 0.0028, 0.0036, 0.0035, 0.0035, 0.0035, 0.003, 0.0035, 0.001, 0.011],[0.07901777, 0.07893787, 0.07871296, 0.07866568, 0.07864214, 0.07851581, 0.07832844, 0.07824015, 0.07795343, 0.07785233, 0.07775997, 0.07770486, 0.07766709, 0.07763695, 0.07757736, 0.07745306, 0.0773419, 0.07732683, 0.0772892, 0.0771917, 0.07716061, 0.07804411, 0.07743959, 0.0769336, 0.07678945, 0.07676047, 0.07682658, 0.07678993, 0.07675951, 0.07673112, 0.07959813]
[2022-10-13 14:42:54,064][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart
[2022-10-13 14:42:54,065][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:42:54,065][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 14:42:54,065][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'THREE_MONTHS'}
[2022-10-13 14:42:54,065][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 14:42:54,823][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-19', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-24', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-29', 'showTime': False}, {'floorPrice': 0.0135, 'avgPrice': 0.08342698, 'date': '2022-08-03', 'showTime': False}, {'floorPrice': 0.0149, 'avgPrice': 0.08193185, 'date': '2022-08-08', 'showTime': False}, {'floorPrice': 0.01, 'avgPrice': 0.08128609, 'date': '2022-08-13', 'showTime': False}, {'floorPrice': 0.00954444, 'avgPrice': 0.08086551, 'date': '2022-08-18', 'showTime': False}, {'floorPrice': 0.008, 'avgPrice': 0.08019813, 'date': '2022-08-23', 'showTime': False}, {'floorPrice': 0.01, 'avgPrice': 0.07956061, 'date': '2022-08-28', 'showTime': False}, {'floorPrice': 0.01, 'avgPrice': 0.07956916, 'date': '2022-09-02', 'showTime': False}, {'floorPrice': 0.00859, 'avgPrice': 0.07931792, 'date': '2022-09-07', 'showTime': False}, {'floorPrice': 0.00704444, 'avgPrice': 0.07903416, 'date': '2022-09-12', 'showTime': False}, {'floorPrice': 0.00709, 'avgPrice': 0.07856225, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 0.0072, 'avgPrice': 0.07781408, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 0.00599, 'avgPrice': 0.07750762, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 0.0059, 'avgPrice': 0.07716061, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 14:42:54,823][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 100893
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 14:42:55,150][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 100893
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 14:42:55,383][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[0.0, 0.0, 0.0, 0.0135, 0.0149, 0.01, 0.00954444, 0.008, 0.01, 0.01, 0.00859, 0.00704444, 0.00709, 0.0072, 0.00599, 0.0059, 0.0035, 0.0035],[0.0, 0.0, 0.0, 0.08342698, 0.08193185, 0.08128609, 0.08086551, 0.08019813, 0.07956061, 0.07956916, 0.07931792, 0.07903416, 0.07856225, 0.07781408, 0.07750762, 0.07716061, 0.07676047, 0.07675951]
[2022-10-13 14:42:55,383][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[0.014, 0.01, 0.0098, 0.008, 0.0089, 0.0078, 0.01, 0.01, 0.008, 0.00709, 0.00849, 0.00699, 0.006299, 0.0031, 0.003],[0.08370566, 0.08292429, 0.08158749, 0.08119371, 0.08029486, 0.07999391, 0.07949801, 0.07942901, 0.07926979, 0.07881112, 0.07826186, 0.07766709, 0.07733453, 0.07760279, 0.07679754]
[2022-10-13 14:47:48,506][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:47:48,508][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:47:48,821][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:47:48,824][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:47:49,416][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:47:49,417][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:47:49,423][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:47:49,424][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:47:49,427][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:47:49,428][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:47:49,430][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 14:47:49,803][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[102832, 102833, 102834, 102835, 102836, 102837, 102838, 102839, 102840, 102841, 102842, 102843, 102844, 102845, 102846, 102847, 102848, 102849, 102850, 102851, 102852, 102853, 102854, 102855, 102856, 102857, 102858, 102859, 102860, 102861, 102862, 102863, 102864, 102865, 102866, 102867, 102868, 102869, 102870, 102871, 102872, 102873, 102874, 102875, 102876, 102877, 102878, 102879, 102880, 102881], start_index为：2665
[2022-10-13 14:47:49,947][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 14:47:49,947][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:47:49,949][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_DAY"
}
[2022-10-13 14:47:49,949][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'ONE_DAY'}
[2022-10-13 14:47:49,950][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_DAY"
}
[2022-10-13 14:47:50,499][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 07:00', 'showTime': True}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 08:00', 'showTime': True}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 09:00', 'showTime': True}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 10:00', 'showTime': True}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 11:00', 'showTime': True}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 12:00', 'showTime': True}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 13:00', 'showTime': True}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 14:00', 'showTime': True}, {'floorPrice': 0.0036, 'avgPrice': 0.07670809, 'date': '2022-10-12 15:00', 'showTime': True}, {'floorPrice': 0.00959, 'avgPrice': 0.07833423, 'date': '2022-10-12 16:00', 'showTime': True}, {'floorPrice': 0.00959, 'avgPrice': 0.0783208, 'date': '2022-10-12 17:00', 'showTime': True}, {'floorPrice': 0.0096, 'avgPrice': 0.07927167, 'date': '2022-10-12 18:00', 'showTime': True}, {'floorPrice': 0.0096, 'avgPrice': 0.07966879, 'date': '2022-10-12 19:00', 'showTime': True}, {'floorPrice': 0.0096, 'avgPrice': 0.0796536, 'date': '2022-10-12 20:00', 'showTime': True}, {'floorPrice': 0.014, 'avgPrice': 0.07964749, 'date': '2022-10-12 21:00', 'showTime': True}, {'floorPrice': 0.013, 'avgPrice': 0.07964749, 'date': '2022-10-12 22:00', 'showTime': True}, {'floorPrice': 0.013, 'avgPrice': 0.07964749, 'date': '2022-10-12 23:00', 'showTime': True}, {'floorPrice': 0.013, 'avgPrice': 0.07964749, 'date': '2022-10-13 00:00', 'showTime': True}, {'floorPrice': 0.01249, 'avgPrice': 0.07964066, 'date': '2022-10-13 01:00', 'showTime': True}, {'floorPrice': 0.01249, 'avgPrice': 0.07964066, 'date': '2022-10-13 02:00', 'showTime': True}, {'floorPrice': 0.01, 'avgPrice': 0.07961305, 'date': '2022-10-13 03:00', 'showTime': True}, {'floorPrice': 0.01, 'avgPrice': 0.07961305, 'date': '2022-10-13 04:00', 'showTime': True}, {'floorPrice': 0.011, 'avgPrice': 0.07959813, 'date': '2022-10-13 05:00', 'showTime': True}, {'floorPrice': 0.011, 'avgPrice': 0.07959813, 'date': '2022-10-13 06:00', 'showTime': True}]}
[2022-10-13 14:47:50,500][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 100893
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 14:47:50,705][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 100893
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 23 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 14:47:50,913][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[0.001, 0.001, 0.001, 0.001, 0.0035, 0.0035, 0.0035, 0.0035, 0.0036, 0.00959, 0.00959, 0.0096, 0.0096, 0.0096, 0.014, 0.013, 0.013, 0.013, 0.01249, 0.01249, 0.01, 0.01, 0.011, 0.011],[0.07673112, 0.07673112, 0.07673112, 0.07673112, 0.07671573, 0.07671573, 0.07671573, 0.07671573, 0.07670809, 0.07833423, 0.0783208, 0.07927167, 0.07966879, 0.0796536, 0.07964749, 0.07964749, 0.07964749, 0.07964749, 0.07964066, 0.07964066, 0.07961305, 0.07961305, 0.07959813, 0.07959813]
[2022-10-13 14:47:50,914][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[0.001, 0.001, 0.001, 0.001, 0.0035, 0.0035, 0.0035, 0.0035, 0.0036, 0.00959, 0.00959, 0.0096, 0.0096, 0.0096, 0.014, 0.013, 0.013, 0.013, 0.01249, 0.01249, 0.01, 0.01, 0.011, 0.011],[0.07673112, 0.07673112, 0.07673112, 0.07673112, 0.07671573, 0.07671573, 0.07671573, 0.07671573, 0.07670809, 0.07833423, 0.0783208, 0.07927167, 0.07966879, 0.0796536, 0.07964749, 0.07964749, 0.07964749, 0.07964749, 0.07964066, 0.07964066, 0.07961305, 0.07961305, 0.07959813, 0.07959813]
[2022-10-13 14:47:50,942][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 14:47:50,942][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:47:50,943][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 14:47:50,943][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'ONE_WEEK'}
[2022-10-13 14:47:50,943][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 14:48:10,431][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 14:48:10,432][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:48:10,432][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_MONTH"
}
[2022-10-13 14:48:10,432][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'ONE_MONTH'}
[2022-10-13 14:48:10,432][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_MONTH"
}
[2022-10-13 14:48:16,639][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0.00709, 'avgPrice': 0.07895373, 'date': '2022-09-13', 'showTime': False}, {'floorPrice': 0.007, 'avgPrice': 0.07881112, 'date': '2022-09-14', 'showTime': False}, {'floorPrice': 0.00709, 'avgPrice': 0.07867357, 'date': '2022-09-15', 'showTime': False}, {'floorPrice': 0.00709, 'avgPrice': 0.07864214, 'date': '2022-09-16', 'showTime': False}, {'floorPrice': 0.00709, 'avgPrice': 0.07856225, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 0.009555, 'avgPrice': 0.07833603, 'date': '2022-09-18', 'showTime': False}, {'floorPrice': 0.0085, 'avgPrice': 0.07826186, 'date': '2022-09-19', 'showTime': False}, {'floorPrice': 0.0074, 'avgPrice': 0.07802243, 'date': '2022-09-20', 'showTime': False}, {'floorPrice': 0.0074, 'avgPrice': 0.07786779, 'date': '2022-09-21', 'showTime': False}, {'floorPrice': 0.0072, 'avgPrice': 0.07781408, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 0.00699, 'avgPrice': 0.07771264, 'date': '2022-09-23', 'showTime': False}, {'floorPrice': 0.00699, 'avgPrice': 0.07766709, 'date': '2022-09-24', 'showTime': False}, {'floorPrice': 0.00699, 'avgPrice': 0.07764416, 'date': '2022-09-25', 'showTime': False}, {'floorPrice': 0.00699, 'avgPrice': 0.077585, 'date': '2022-09-26', 'showTime': False}, {'floorPrice': 0.00599, 'avgPrice': 0.07750762, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 0.0065, 'avgPrice': 0.07738622, 'date': '2022-09-28', 'showTime': False}, {'floorPrice': 0.006299, 'avgPrice': 0.07733453, 'date': '2022-09-29', 'showTime': False}, {'floorPrice': 0.006, 'avgPrice': 0.0772892, 'date': '2022-09-30', 'showTime': False}, {'floorPrice': 0.006, 'avgPrice': 0.0771917, 'date': '2022-10-01', 'showTime': False}, {'floorPrice': 0.0059, 'avgPrice': 0.07716061, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 0.0067, 'avgPrice': 0.07806689, 'date': '2022-10-03', 'showTime': False}, {'floorPrice': 0.0031, 'avgPrice': 0.0776107, 'date': '2022-10-04', 'showTime': False}, {'floorPrice': 0.0031, 'avgPrice': 0.07694803, 'date': '2022-10-05', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-06', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-08', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 14:48:16,640][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 100893
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 14:48:16,951][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 100893
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 719 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 14:48:17,185][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[0.00709, 0.007, 0.00709, 0.00709, 0.00709, 0.009555, 0.0085, 0.0074, 0.0074, 0.0072, 0.00699, 0.00699, 0.00699, 0.00699, 0.00599, 0.0065, 0.006299, 0.006, 0.006, 0.0059, 0.0067, 0.0031, 0.0031, 0.0035, 0.0035, 0.0035, 0.003, 0.003, 0.0035, 0.0035],[0.07895373, 0.07881112, 0.07867357, 0.07864214, 0.07856225, 0.07833603, 0.07826186, 0.07802243, 0.07786779, 0.07781408, 0.07771264, 0.07766709, 0.07764416, 0.077585, 0.07750762, 0.07738622, 0.07733453, 0.0772892, 0.0771917, 0.07716061, 0.07806689, 0.0776107, 0.07694803, 0.07681185, 0.07676047, 0.07682658, 0.07679754, 0.07679754, 0.07675951, 0.07675951]
[2022-10-13 14:48:17,185][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[0.00684444, 0.00709, 0.0069, 0.007, 0.00709, 0.00709, 0.0085, 0.00849, 0.0073, 0.0072, 0.0074, 0.00699, 0.00699, 0.0069, 0.006, 0.006, 0.0063, 0.006299, 0.006, 0.006, 0.0059, 0.0067, 0.0028, 0.0036, 0.0035, 0.0035, 0.0035, 0.003, 0.0035, 0.001, 0.011],[0.07901777, 0.07893787, 0.07871296, 0.07866568, 0.07864214, 0.07851581, 0.07832844, 0.07824015, 0.07795343, 0.07785233, 0.07775997, 0.07770486, 0.07766709, 0.07763695, 0.07757736, 0.07745306, 0.0773419, 0.07732683, 0.0772892, 0.0771917, 0.07716061, 0.07804411, 0.07743959, 0.0769336, 0.07678945, 0.07676047, 0.07682658, 0.07678993, 0.07675951, 0.07673112, 0.07959813]
[2022-10-13 14:48:17,242][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 14:48:17,243][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:48:17,244][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 14:48:17,244][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'THREE_MONTHS'}
[2022-10-13 14:48:17,244][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "THREE_MONTHS"
}
[2022-10-13 14:48:18,080][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-19', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-24', 'showTime': False}, {'floorPrice': 0, 'avgPrice': 0, 'date': '2022-07-29', 'showTime': False}, {'floorPrice': 0.0135, 'avgPrice': 0.08342698, 'date': '2022-08-03', 'showTime': False}, {'floorPrice': 0.0149, 'avgPrice': 0.08193185, 'date': '2022-08-08', 'showTime': False}, {'floorPrice': 0.01, 'avgPrice': 0.08128609, 'date': '2022-08-13', 'showTime': False}, {'floorPrice': 0.00954444, 'avgPrice': 0.08086551, 'date': '2022-08-18', 'showTime': False}, {'floorPrice': 0.008, 'avgPrice': 0.08019813, 'date': '2022-08-23', 'showTime': False}, {'floorPrice': 0.01, 'avgPrice': 0.07956061, 'date': '2022-08-28', 'showTime': False}, {'floorPrice': 0.01, 'avgPrice': 0.07956916, 'date': '2022-09-02', 'showTime': False}, {'floorPrice': 0.00859, 'avgPrice': 0.07931792, 'date': '2022-09-07', 'showTime': False}, {'floorPrice': 0.00704444, 'avgPrice': 0.07903416, 'date': '2022-09-12', 'showTime': False}, {'floorPrice': 0.00709, 'avgPrice': 0.07856225, 'date': '2022-09-17', 'showTime': False}, {'floorPrice': 0.0072, 'avgPrice': 0.07781408, 'date': '2022-09-22', 'showTime': False}, {'floorPrice': 0.00599, 'avgPrice': 0.07750762, 'date': '2022-09-27', 'showTime': False}, {'floorPrice': 0.0059, 'avgPrice': 0.07716061, 'date': '2022-10-02', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-07', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-12', 'showTime': False}]}
[2022-10-13 14:48:18,081][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 100893
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 14:48:18,433][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 100893
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 2159 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 14:48:18,765][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：[0.0, 0.0, 0.0, 0.0135, 0.0149, 0.01, 0.00954444, 0.008, 0.01, 0.01, 0.00859, 0.00704444, 0.00709, 0.0072, 0.00599, 0.0059, 0.0035, 0.0035],[0.0, 0.0, 0.0, 0.08342698, 0.08193185, 0.08128609, 0.08086551, 0.08019813, 0.07956061, 0.07956916, 0.07931792, 0.07903416, 0.07856225, 0.07781408, 0.07750762, 0.07716061, 0.07676047, 0.07675951]
[2022-10-13 14:48:18,765][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：[0.014, 0.01, 0.0098, 0.008, 0.0089, 0.0078, 0.01, 0.01, 0.008, 0.00709, 0.00849, 0.00699, 0.006299, 0.0031, 0.003],[0.08370566, 0.08292429, 0.08158749, 0.08119371, 0.08029486, 0.07999391, 0.07949801, 0.07942901, 0.07926979, 0.07881112, 0.07826186, 0.07766709, 0.07733453, 0.07760279, 0.07679754]
[2022-10-13 14:48:45,190][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:48:45,191][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:48:45,522][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:48:45,525][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:48:46,100][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:48:46,101][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:48:46,105][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:48:46,106][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:48:46,109][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:48:46,110][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:48:46,115][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 14:48:46,524][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[100037, 100038, 100039, 100040, 100041, 100042, 100043, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100053, 100054, 100055, 100056, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100071, 100072, 100073, 100074, 100075, 100076, 100077, 100078, 100079, 100080, 100081, 100082, 100083, 100084, 100085, 100086], start_index为：35
[2022-10-13 14:48:46,675][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 14:48:46,675][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:48:46,676][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 14:48:46,676][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'ONE_WEEK'}
[2022-10-13 14:48:46,677][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 14:48:47,885][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0.0036, 'avgPrice': 0.0769336, 'date': '2022-10-06 08:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 10:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 12:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 14:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681823, 'date': '2022-10-06 16:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681052, 'date': '2022-10-06 18:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681052, 'date': '2022-10-06 20:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-06 22:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-07 00:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-07 02:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07679667, 'date': '2022-10-07 04:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 06:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 08:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 10:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 12:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 14:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 16:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 18:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 20:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 22:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 00:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 02:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 04:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 06:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767452, 'date': '2022-10-08 08:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767452, 'date': '2022-10-08 10:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767452, 'date': '2022-10-08 12:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 14:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 16:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767305, 'date': '2022-10-08 18:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-08 20:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-08 22:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 00:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 02:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 04:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 06:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 08:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 10:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07682619, 'date': '2022-10-09 12:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07682619, 'date': '2022-10-09 14:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 16:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 18:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 20:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 22:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 00:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 02:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 04:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 06:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 08:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 10:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 12:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 14:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 16:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 18:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678222, 'date': '2022-10-10 20:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678222, 'date': '2022-10-10 22:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 00:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 02:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 04:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 06:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 08:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 10:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 12:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 14:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 16:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 18:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 20:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 22:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-12 00:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673112, 'date': '2022-10-12 02:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673112, 'date': '2022-10-12 04:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 06:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 08:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 10:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 12:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 14:00', 'showTime': False}, {'floorPrice': 0.00959, 'avgPrice': 0.07833423, 'date': '2022-10-12 16:00', 'showTime': False}, {'floorPrice': 0.0096, 'avgPrice': 0.07927167, 'date': '2022-10-12 18:00', 'showTime': False}, {'floorPrice': 0.0096, 'avgPrice': 0.0796536, 'date': '2022-10-12 20:00', 'showTime': False}, {'floorPrice': 0.013, 'avgPrice': 0.07964749, 'date': '2022-10-12 22:00', 'showTime': False}, {'floorPrice': 0.013, 'avgPrice': 0.07964749, 'date': '2022-10-13 00:00', 'showTime': False}, {'floorPrice': 0.01249, 'avgPrice': 0.07964066, 'date': '2022-10-13 02:00', 'showTime': False}, {'floorPrice': 0.01, 'avgPrice': 0.07961305, 'date': '2022-10-13 04:00', 'showTime': False}, {'floorPrice': 0.011, 'avgPrice': 0.07959813, 'date': '2022-10-13 06:00', 'showTime': False}]}
[2022-10-13 14:48:47,886][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 100893
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 14:48:48,126][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 100893
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 14:56:01,275][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:56:01,277][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:56:01,597][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:56:01,598][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:56:02,100][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:56:02,101][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:56:02,103][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:56:02,103][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:56:02,105][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 14:56:02,107][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 14:56:02,109][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 14:56:02,458][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[100119, 100120, 100121, 100122, 100123, 100124, 100125, 100126, 100127, 100128, 100129, 100130, 100131, 100132, 100133, 100134, 100135, 100136, 100137, 100138, 100139, 100140, 100141, 100142, 100143, 100144, 100145, 100146, 100147, 100148, 100149, 100150, 100151, 100152, 100153, 100154, 100156, 100157, 100158, 100159, 100160, 100161, 100162, 100163, 100164, 100165, 100166, 100167, 100168, 100169], start_index为：117
[2022-10-13 14:56:02,507][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 14:56:02,508][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 14:56:02,508][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 14:56:02,508][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'ONE_WEEK'}
[2022-10-13 14:56:02,508][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 14:56:03,468][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0.0036, 'avgPrice': 0.0769336, 'date': '2022-10-06 08:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 10:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 12:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 14:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681823, 'date': '2022-10-06 16:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681052, 'date': '2022-10-06 18:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681052, 'date': '2022-10-06 20:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-06 22:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-07 00:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-07 02:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07679667, 'date': '2022-10-07 04:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 06:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 08:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 10:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 12:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 14:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 16:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 18:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 20:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 22:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 00:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 02:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 04:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 06:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767452, 'date': '2022-10-08 08:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767452, 'date': '2022-10-08 10:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767452, 'date': '2022-10-08 12:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 14:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 16:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767305, 'date': '2022-10-08 18:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-08 20:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-08 22:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 00:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 02:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 04:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 06:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 08:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 10:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07682619, 'date': '2022-10-09 12:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07682619, 'date': '2022-10-09 14:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 16:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 18:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 20:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 22:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 00:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 02:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 04:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 06:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 08:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 10:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 12:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 14:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 16:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 18:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678222, 'date': '2022-10-10 20:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678222, 'date': '2022-10-10 22:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 00:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 02:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 04:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 06:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 08:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 10:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 12:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 14:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 16:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 18:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 20:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 22:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-12 00:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673112, 'date': '2022-10-12 02:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673112, 'date': '2022-10-12 04:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 06:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 08:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 10:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 12:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 14:00', 'showTime': False}, {'floorPrice': 0.00959, 'avgPrice': 0.07833423, 'date': '2022-10-12 16:00', 'showTime': False}, {'floorPrice': 0.0096, 'avgPrice': 0.07927167, 'date': '2022-10-12 18:00', 'showTime': False}, {'floorPrice': 0.0096, 'avgPrice': 0.0796536, 'date': '2022-10-12 20:00', 'showTime': False}, {'floorPrice': 0.013, 'avgPrice': 0.07964749, 'date': '2022-10-12 22:00', 'showTime': False}, {'floorPrice': 0.013, 'avgPrice': 0.07964749, 'date': '2022-10-13 00:00', 'showTime': False}, {'floorPrice': 0.01249, 'avgPrice': 0.07964066, 'date': '2022-10-13 02:00', 'showTime': False}, {'floorPrice': 0.01, 'avgPrice': 0.07961305, 'date': '2022-10-13 04:00', 'showTime': False}, {'floorPrice': 0.011, 'avgPrice': 0.07959813, 'date': '2022-10-13 06:00', 'showTime': False}]}
[2022-10-13 14:56:03,470][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 100893
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 14:56:03,695][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 100893
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 14:56:03,917][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：
[2022-10-13 14:56:03,917][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：
[2022-10-13 15:09:42,544][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:09:42,545][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:09:42,870][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:09:42,870][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:09:43,318][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:09:43,319][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:09:43,321][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:09:43,322][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:09:43,323][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:09:43,324][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:09:43,325][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 15:09:43,869][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[100240, 100241, 100242, 100243, 100245, 100246, 100247, 100248, 100249, 100250, 100251, 100252, 100253, 100254, 100255, 100256, 100258, 100259, 100260, 100261, 100262, 100263, 100264, 100266, 100267, 100268, 100269, 100270, 100271, 100272, 100273, 100274, 100275, 100276, 100277, 100278, 100279, 100280, 100281, 100282, 100283, 100284, 100285, 100286, 100287, 100288, 100289, 100290, 100291, 100292], start_index为：235
[2022-10-13 15:09:43,922][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 15:09:43,923][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 15:09:43,923][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 15:09:43,923][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'ONE_WEEK'}
[2022-10-13 15:09:43,924][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 15:09:44,399][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 09:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 11:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 13:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681823, 'date': '2022-10-06 15:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681052, 'date': '2022-10-06 17:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681052, 'date': '2022-10-06 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07683327, 'date': '2022-10-06 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-06 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-07 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07679667, 'date': '2022-10-07 03:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 05:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 07:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 09:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07677512, 'date': '2022-10-07 11:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 13:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 15:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 17:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-07 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 03:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 05:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 07:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767452, 'date': '2022-10-08 09:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767452, 'date': '2022-10-08 11:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 13:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 15:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 17:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767305, 'date': '2022-10-08 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-08 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-08 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 03:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 05:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 07:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 09:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07682619, 'date': '2022-10-09 11:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07682619, 'date': '2022-10-09 13:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 15:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 17:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 19:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 21:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 23:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 01:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 03:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 05:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 07:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 09:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 11:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 13:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 15:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 17:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678222, 'date': '2022-10-10 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678222, 'date': '2022-10-10 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678222, 'date': '2022-10-10 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 03:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 05:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 07:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 09:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 11:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 13:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 15:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 17:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673112, 'date': '2022-10-12 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673112, 'date': '2022-10-12 03:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 05:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 07:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 09:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 11:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 13:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07670809, 'date': '2022-10-12 15:00', 'showTime': False}, {'floorPrice': 0.00959, 'avgPrice': 0.0783208, 'date': '2022-10-12 17:00', 'showTime': False}, {'floorPrice': 0.0096, 'avgPrice': 0.07966879, 'date': '2022-10-12 19:00', 'showTime': False}, {'floorPrice': 0.014, 'avgPrice': 0.07964749, 'date': '2022-10-12 21:00', 'showTime': False}, {'floorPrice': 0.013, 'avgPrice': 0.07964749, 'date': '2022-10-12 23:00', 'showTime': False}, {'floorPrice': 0.01249, 'avgPrice': 0.07964066, 'date': '2022-10-13 01:00', 'showTime': False}, {'floorPrice': 0.01, 'avgPrice': 0.07961305, 'date': '2022-10-13 03:00', 'showTime': False}, {'floorPrice': 0.011, 'avgPrice': 0.07959813, 'date': '2022-10-13 05:00', 'showTime': False}, {'floorPrice': 0.011, 'avgPrice': 0.07958886, 'date': '2022-10-13 07:00', 'showTime': False}]}
[2022-10-13 15:09:44,401][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 100893
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 15:09:44,635][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 100893
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 15:09:44,864][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：
[2022-10-13 15:09:44,865][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：
[2022-10-13 15:17:03,112][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:17:03,114][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:17:03,446][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:17:03,448][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:17:03,868][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:17:03,869][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:17:03,875][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:17:03,875][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:17:03,877][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:17:03,877][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:17:03,879][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 15:17:04,235][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[100942, 100943, 100944, 100945, 100946, 100947, 100948, 100949, 100950, 100951, 100952, 100953, 100954, 100955, 100956, 100957, 100958, 100959, 100960, 100961, 100962, 100963, 100964, 100965, 100966, 100967, 100968, 100969, 100970, 100971, 100972, 100973, 100974, 100975, 100976, 100977, 100978, 100979, 100980, 100981, 100982, 100983, 100984, 100985, 100986, 100987, 100988, 100989, 100990, 100991], start_index为：908
[2022-10-13 15:17:04,282][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 15:17:04,282][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 15:17:04,282][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 15:17:04,283][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'ONE_WEEK'}
[2022-10-13 15:17:04,283][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 15:17:04,774][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 09:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 11:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 13:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681823, 'date': '2022-10-06 15:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681052, 'date': '2022-10-06 17:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681052, 'date': '2022-10-06 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07683327, 'date': '2022-10-06 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-06 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-07 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07679667, 'date': '2022-10-07 03:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 05:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 07:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 09:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07677512, 'date': '2022-10-07 11:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 13:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 15:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 17:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-07 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 03:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 05:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 07:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767452, 'date': '2022-10-08 09:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767452, 'date': '2022-10-08 11:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 13:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 15:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 17:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767305, 'date': '2022-10-08 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-08 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-08 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 03:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 05:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 07:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 09:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07682619, 'date': '2022-10-09 11:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07682619, 'date': '2022-10-09 13:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 15:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 17:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 19:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 21:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 23:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 01:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 03:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 05:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 07:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 09:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 11:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 13:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 15:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 17:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678222, 'date': '2022-10-10 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678222, 'date': '2022-10-10 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678222, 'date': '2022-10-10 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 03:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 05:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 07:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 09:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 11:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 13:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 15:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 17:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673112, 'date': '2022-10-12 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673112, 'date': '2022-10-12 03:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 05:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 07:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 09:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 11:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 13:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07670809, 'date': '2022-10-12 15:00', 'showTime': False}, {'floorPrice': 0.00959, 'avgPrice': 0.0783208, 'date': '2022-10-12 17:00', 'showTime': False}, {'floorPrice': 0.0096, 'avgPrice': 0.07966879, 'date': '2022-10-12 19:00', 'showTime': False}, {'floorPrice': 0.014, 'avgPrice': 0.07964749, 'date': '2022-10-12 21:00', 'showTime': False}, {'floorPrice': 0.013, 'avgPrice': 0.07964749, 'date': '2022-10-12 23:00', 'showTime': False}, {'floorPrice': 0.01249, 'avgPrice': 0.07964066, 'date': '2022-10-13 01:00', 'showTime': False}, {'floorPrice': 0.01, 'avgPrice': 0.07961305, 'date': '2022-10-13 03:00', 'showTime': False}, {'floorPrice': 0.011, 'avgPrice': 0.07959813, 'date': '2022-10-13 05:00', 'showTime': False}, {'floorPrice': 0.011, 'avgPrice': 0.07958886, 'date': '2022-10-13 07:00', 'showTime': False}]}
[2022-10-13 15:17:04,775][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 100893
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 15:17:04,997][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 100893
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 15:17:05,224][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：
[2022-10-13 15:17:05,225][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：
[2022-10-13 15:25:11,657][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:25:11,658][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:25:11,972][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:25:11,973][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:25:12,507][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:25:12,508][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:25:12,513][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:25:12,513][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:25:12,515][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:25:12,515][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:25:12,517][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 15:25:12,852][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[102812, 102813, 102814, 102815, 102816, 102817, 102818, 102819, 102820, 102821, 102822, 102823, 102824, 102826, 102827, 102828, 102829, 102830, 102831, 102832, 102833, 102834, 102835, 102836, 102837, 102838, 102839, 102840, 102841, 102842, 102843, 102844, 102845, 102846, 102847, 102848, 102849, 102850, 102851, 102852, 102853, 102854, 102855, 102856, 102857, 102858, 102859, 102860, 102861, 102862], start_index为：2652
[2022-10-13 15:25:12,897][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 15:25:12,898][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 15:25:12,898][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 15:25:12,898][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'ONE_WEEK'}
[2022-10-13 15:25:12,898][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 15:25:13,396][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 09:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 11:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 13:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681823, 'date': '2022-10-06 15:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681052, 'date': '2022-10-06 17:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681052, 'date': '2022-10-06 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07683327, 'date': '2022-10-06 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-06 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-07 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07679667, 'date': '2022-10-07 03:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 05:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 07:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 09:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07677512, 'date': '2022-10-07 11:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 13:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 15:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 17:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-07 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 03:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 05:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 07:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767452, 'date': '2022-10-08 09:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767452, 'date': '2022-10-08 11:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 13:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 15:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 17:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767305, 'date': '2022-10-08 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-08 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-08 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 03:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 05:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 07:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 09:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07682619, 'date': '2022-10-09 11:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07682619, 'date': '2022-10-09 13:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 15:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 17:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 19:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 21:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 23:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 01:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 03:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 05:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 07:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 09:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 11:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 13:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 15:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 17:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678222, 'date': '2022-10-10 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678222, 'date': '2022-10-10 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678222, 'date': '2022-10-10 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 03:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 05:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 07:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 09:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 11:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 13:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 15:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 17:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673112, 'date': '2022-10-12 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673112, 'date': '2022-10-12 03:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 05:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 07:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 09:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 11:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 13:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07670809, 'date': '2022-10-12 15:00', 'showTime': False}, {'floorPrice': 0.00959, 'avgPrice': 0.0783208, 'date': '2022-10-12 17:00', 'showTime': False}, {'floorPrice': 0.0096, 'avgPrice': 0.07966879, 'date': '2022-10-12 19:00', 'showTime': False}, {'floorPrice': 0.014, 'avgPrice': 0.07964749, 'date': '2022-10-12 21:00', 'showTime': False}, {'floorPrice': 0.013, 'avgPrice': 0.07964749, 'date': '2022-10-12 23:00', 'showTime': False}, {'floorPrice': 0.01249, 'avgPrice': 0.07964066, 'date': '2022-10-13 01:00', 'showTime': False}, {'floorPrice': 0.01, 'avgPrice': 0.07961305, 'date': '2022-10-13 03:00', 'showTime': False}, {'floorPrice': 0.011, 'avgPrice': 0.07959813, 'date': '2022-10-13 05:00', 'showTime': False}, {'floorPrice': 0.011, 'avgPrice': 0.07958886, 'date': '2022-10-13 07:00', 'showTime': False}]}
[2022-10-13 15:25:13,397][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 100893
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 15:25:13,623][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 100893
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 167 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 15:25:13,841][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：
[2022-10-13 15:25:13,841][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：
[2022-10-13 15:30:28,558][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:30:28,559][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:30:28,917][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:30:28,918][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:30:29,340][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:30:29,341][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:30:29,346][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:30:29,347][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:30:29,348][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 15:30:29,349][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 15:30:29,351][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 15:30:29,741][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[102571, 102572, 102573, 102574, 102575, 102576, 102577, 102578, 102579, 102580, 102581, 102582, 102583, 102584, 102585, 102586, 102587, 102588, 102589, 102590, 102591, 102592, 102593, 102594, 102595, 102596, 102597, 102598, 102599, 102600, 102601, 102602, 102603, 102604, 102605, 102606, 102607, 102608, 102609, 102610, 102611, 102612, 102613, 102614, 102615, 102616, 102617, 102618, 102619, 102620], start_index为：2428
[2022-10-13 15:30:29,803][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/collection/floorPriceChart/app
[2022-10-13 15:30:29,803][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 15:30:29,803][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 15:30:29,804][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 100893, 'timeType': 'ONE_WEEK'}
[2022-10-13 15:30:29,804][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 100893,
    "timeType": "ONE_WEEK"
}
[2022-10-13 15:30:30,309][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': [{'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 09:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 11:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07686023, 'date': '2022-10-06 13:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681823, 'date': '2022-10-06 15:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681052, 'date': '2022-10-06 17:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681052, 'date': '2022-10-06 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07683327, 'date': '2022-10-06 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-06 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07681185, 'date': '2022-10-07 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07679667, 'date': '2022-10-07 03:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 05:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 07:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678945, 'date': '2022-10-07 09:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07677512, 'date': '2022-10-07 11:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 13:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 15:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 17:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676811, 'date': '2022-10-07 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-07 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 03:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 05:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07676047, 'date': '2022-10-08 07:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767452, 'date': '2022-10-08 09:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767452, 'date': '2022-10-08 11:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 13:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 15:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673752, 'date': '2022-10-08 17:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.0767305, 'date': '2022-10-08 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-08 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-08 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 03:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 05:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 07:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07682658, 'date': '2022-10-09 09:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07682619, 'date': '2022-10-09 11:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07682619, 'date': '2022-10-09 13:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 15:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 17:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 19:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 21:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-09 23:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 01:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 03:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 05:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 07:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 09:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 11:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07679754, 'date': '2022-10-10 13:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 15:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678993, 'date': '2022-10-10 17:00', 'showTime': False}, {'floorPrice': 0.003, 'avgPrice': 0.07678222, 'date': '2022-10-10 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678222, 'date': '2022-10-10 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07678222, 'date': '2022-10-10 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 03:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 05:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 07:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 09:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 11:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 13:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 15:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 17:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 19:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 21:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07675951, 'date': '2022-10-11 23:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673112, 'date': '2022-10-12 01:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07673112, 'date': '2022-10-12 03:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 05:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 07:00', 'showTime': False}, {'floorPrice': 0.001, 'avgPrice': 0.07673112, 'date': '2022-10-12 09:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 11:00', 'showTime': False}, {'floorPrice': 0.0035, 'avgPrice': 0.07671573, 'date': '2022-10-12 13:00', 'showTime': False}, {'floorPrice': 0.0036, 'avgPrice': 0.07670809, 'date': '2022-10-12 15:00', 'showTime': False}, {'floorPrice': 0.00959, 'avgPrice': 0.0783208, 'date': '2022-10-12 17:00', 'showTime': False}, {'floorPrice': 0.0096, 'avgPrice': 0.07966879, 'date': '2022-10-12 19:00', 'showTime': False}, {'floorPrice': 0.014, 'avgPrice': 0.07964749, 'date': '2022-10-12 21:00', 'showTime': False}, {'floorPrice': 0.013, 'avgPrice': 0.07964749, 'date': '2022-10-12 23:00', 'showTime': False}, {'floorPrice': 0.01249, 'avgPrice': 0.07964066, 'date': '2022-10-13 01:00', 'showTime': False}, {'floorPrice': 0.01, 'avgPrice': 0.07961305, 'date': '2022-10-13 03:00', 'showTime': False}, {'floorPrice': 0.011, 'avgPrice': 0.07959813, 'date': '2022-10-13 05:00', 'showTime': False}, {'floorPrice': 0.011, 'avgPrice': 0.07958886, 'date': '2022-10-13 07:00', 'showTime': False}]}
[2022-10-13 15:30:30,310][db.py 39][INFO]: 查询的sql为：
            select
                floor_price
            from
                `hk-manhattan`.chain_collection_quotation
            where
                collection_uuid = 100893
                and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 166 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
                '%Y-%m-%d %H%i%m') 
                order by create_time desc
        
[2022-10-13 15:30:30,550][db.py 39][INFO]: 查询的sql为：
        select
            avg_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 100893
            and create_time between str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 166 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') and str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m')
            order by create_time desc
        
[2022-10-13 15:30:30,794][test_data_calculate.py 137][INFO]: 集合详情地板价图表测试数据接口返回：
[2022-10-13 15:30:30,794][test_data_calculate.py 138][INFO]: 集合详情地板价图表测试数据sql查询：
[2022-10-13 16:47:06,998][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:47:06,999][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:47:07,325][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:47:07,327][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:47:07,792][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:47:07,792][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:47:07,798][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:47:07,799][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:47:07,801][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:47:07,802][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:47:07,803][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 16:47:08,163][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[102936, 102937, 102938, 102939, 102940, 102941, 102942, 102943, 102944, 102945, 102946, 102947, 102948, 102949, 102950, 102951, 102952, 102953, 102954, 102955, 102956, 102957, 102958, 102959, 102960, 102961, 102962, 102963, 102964, 102965, 102966, 102967, 102968, 102969, 102970, 102971, 102972, 102973, 102974, 102975, 102976, 102977, 102979, 102980, 102981, 102982, 102983, 102984, 102985, 102987], start_index为：2773
[2022-10-13 16:47:33,727][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:47:33,727][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:47:34,095][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:47:34,096][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:47:34,612][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:47:34,612][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:47:34,614][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:47:34,615][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:47:34,616][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:47:34,617][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:47:34,618][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 16:47:35,021][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[100489, 100491, 100492, 100493, 100494, 100495, 100496, 100497, 100498, 100499, 100500, 100501, 100502, 100503, 100504, 100505, 100506, 100507, 100508, 100509, 100510, 100511, 100512, 100513, 100514, 100515, 100516, 100517, 100518, 100519, 100520, 100521, 100522, 100523, 100524, 100525, 100527, 100528, 100529, 100530, 100531, 100532, 100533, 100534, 100535, 100536, 100537, 100538, 100539, 100540], start_index为：464
[2022-10-13 16:47:35,083][db.py 39][INFO]: 查询的sql为：SELECT floor_price FROM `hk-manhattan`.chain_collection WHERE collection_uuid = 101008
[2022-10-13 16:47:35,329][db.py 39][INFO]: 查询的sql为：
    select count(*) count from chain_collection_nft_activity where collection_uuid = 101008 and event = 'SALE' and transaction_price<10.25*1000000000000000000
    
[2022-10-13 16:48:43,106][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:48:43,107][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:48:43,794][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:48:43,796][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:48:44,572][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:48:44,572][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:48:44,576][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:48:44,577][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:48:44,578][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:48:44,579][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:48:44,580][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 16:48:44,998][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[101591, 101593, 101594, 101595, 101596, 101597, 101599, 101600, 101601, 101602, 101603, 101604, 101605, 101606, 101607, 101608, 101609, 101611, 101612, 101613, 101614, 101615, 101616, 101617, 101618, 101619, 101620, 101621, 101623, 101624, 101625, 101626, 101627, 101628, 101629, 101630, 101631, 101632, 101633, 101634, 101635, 101636, 101637, 101638, 101639, 101640, 101641, 101642, 101643, 101644], start_index为：1517
[2022-10-13 16:48:45,056][db.py 39][INFO]: 查询的sql为：SELECT floor_price FROM `hk-manhattan`.chain_collection WHERE collection_uuid = 101008
[2022-10-13 16:48:45,298][db.py 39][INFO]: 查询的sql为：
    select count(*) count from `hk-chaindata-new`.chain_collection_nft_activity where collection_uuid = 101008 and event = 'SALE' and transaction_price<10.25*1000000000000000000
    
[2022-10-13 16:48:45,625][db.py 39][INFO]: 查询的sql为：
    select count(*) count from `hk-chaindata-new`.chain_collection_nft_activity where collection_uuid = 101008 and event = 'SALE' and transaction_price>=10.25*1000000000000000000
    
[2022-10-13 16:51:41,627][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:51:41,628][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:51:41,981][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:51:41,983][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:51:42,426][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:51:42,427][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:51:42,434][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:51:42,435][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:51:42,437][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:51:42,437][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:51:42,439][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 16:51:42,824][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[101859, 101860, 101861, 101862, 101863, 101864, 101865, 101866, 101867, 101868, 101869, 101870, 101871, 101872, 101873, 101874, 101875, 101876, 101877, 101878, 101879, 101880, 101881, 101882, 101883, 101884, 101885, 101886, 101887, 101888, 101889, 101890, 101891, 101892, 101893, 101894, 101895, 101896, 101897, 101899, 101900, 101901, 101903, 101904, 101905, 101906, 101907, 101908, 101909, 101910], start_index为：1769
[2022-10-13 16:51:42,886][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 16:51:43,121][db.py 39][INFO]: 查询的sql为：
    select count(*) count from `hk-chaindata-new`.chain_collection_nft_activity where collection_uuid = 101008 and event = 'SALE' and transaction_price<10.25*1000000000000000000
    
[2022-10-13 16:51:43,414][db.py 39][INFO]: 查询的sql为：
    select count(*) count from `hk-chaindata-new`.chain_collection_nft_activity where collection_uuid = 101008 and event = 'SALE' and transaction_price>=10.25*1000000000000000000
    
[2022-10-13 16:57:33,643][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:57:33,643][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:57:33,954][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:57:33,955][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:57:34,472][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:57:34,472][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:57:34,477][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:57:34,478][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:57:34,480][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 16:57:34,480][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 16:57:34,482][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 16:57:34,829][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[102963, 102964, 102965, 102966, 102967, 102968, 102969, 102970, 102971, 102972, 102973, 102974, 102975, 102976, 102977, 102979, 102980, 102981, 102982, 102983, 102984, 102985, 102987, 102989, 102990, 102991, 102992, 102995, 102996, 102997, 102998, 102999, 103000, 103001, 103003, 103004, 103005, 103006, 103007, 103008, 103009, 103010, 103011, 103012, 103013], start_index为：2800
[2022-10-13 16:57:34,885][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/getThermodynamicDiagram/app
[2022-10-13 16:57:34,886][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 16:57:34,886][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008
}
[2022-10-13 16:57:34,886][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008}
[2022-10-13 16:57:34,886][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008
}
[2022-10-13 16:57:35,529][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': {'blueChipVo': None, 'tradeVO': {'holdersQuantity': 8111, 'holdersPercentage': 0.8372, 'noHoldersQuantity': 1577, 'noHoldersPercentage': 0.1628, 'all': None, 'floorPrice': None}, 'belowFloorPriceVo': {'holdersQuantity': 14828, 'holdersPercentage': 0.8137, 'noHoldersQuantity': 3395, 'noHoldersPercentage': 0.1863, 'all': None, 'floorPrice': 10.25}, 'listingVo': {'holdersQuantity': 682, 'holdersPercentage': 0.0682, 'noHoldersQuantity': 9318, 'noHoldersPercentage': 0.9318, 'all': None, 'floorPrice': None}}}
[2022-10-13 16:57:35,530][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 16:57:35,745][db.py 39][INFO]: 查询的sql为：
    select count(*) count from `hk-chaindata-new`.chain_collection_nft_activity where collection_uuid = 101008 and event = 'SALE' and transaction_price<10.25*1000000000000000000
    
[2022-10-13 16:57:36,101][db.py 39][INFO]: 查询的sql为：
    select count(*) count from `hk-chaindata-new`.chain_collection_nft_activity where collection_uuid = 101008 and event = 'SALE' and transaction_price>=10.25*1000000000000000000
    
[2022-10-13 17:02:13,384][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 17:02:13,385][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 17:02:13,715][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 17:02:13,717][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 17:02:14,256][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 17:02:14,257][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 17:02:14,259][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 17:02:14,260][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 17:02:14,262][data_load.py 44][INFO]: 加载 D:\code\new_river\config\config.ini 文件......
[2022-10-13 17:02:14,262][data_load.py 48][INFO]: 读到数据 ==>>  {'host': {'api_root_url': 'https://newrivertest.agentgo.me/dc/pc'}, 'mysql': {'MYSQL_HOST': '18.162.133.143', 'MYSQL_PORT': '13306', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}, 'shardingsphere-proxy': {'MYSQL_HOST': '18.163.3.196', 'MYSQL_PORT': '3307', 'MYSQL_USER': 'root', 'MYSQL_PASSWD': 'root@123'}} 
[2022-10-13 17:02:14,264][db.py 39][INFO]: 查询的sql为：SELECT distinct collection_uuid  FROM `hk-manhattan`.chain_collection_quotation
[2022-10-13 17:02:14,650][test_data_calculate.py 26][INFO]: 选取到的集合的uuid为：[101654, 101655, 101656, 101657, 101658, 101659, 101662, 101663, 101664, 101665, 101666, 101667, 101668, 101669, 101670, 101671, 101672, 101673, 101674, 101675, 101676, 101677, 101678, 101679, 101680, 101681, 101682, 101683, 101684, 101685, 101686, 101689, 101691, 101692, 101693, 101694, 101695, 101696, 101697, 101698, 101699, 101700, 101701, 101702, 101703, 101704, 101705, 101706, 101707, 101708], start_index为：1575
[2022-10-13 17:02:14,712][base_api.py 73][INFO]: 接口请求地址 ==>> https://newrivertest.agentgo.me/dc/pc/getThermodynamicDiagram/app
[2022-10-13 17:02:14,712][base_api.py 75][INFO]: 接口请求方式 ==>> GET
[2022-10-13 17:02:14,712][base_api.py 80][INFO]: 接口请求 params 参数 ==>> {
    "collectionUuid": 101008
}
[2022-10-13 17:02:14,712][base_api.py 86][INFO]: 接口上传附件 files 参数 ==>> {'collectionUuid': 101008}
[2022-10-13 17:02:14,713][base_api.py 88][INFO]: 接口 cookies 参数 ==>> {
    "collectionUuid": 101008
}
[2022-10-13 17:02:17,067][base_api.py 21][INFO]: 接口返回数据 ==>> {'code': 200, 'message': '操作成功', 'data': {'blueChipVo': None, 'tradeVO': {'holdersQuantity': 8111, 'holdersPercentage': 0.8372, 'noHoldersQuantity': 1577, 'noHoldersPercentage': 0.1628, 'all': None, 'floorPrice': None}, 'belowFloorPriceVo': {'holdersQuantity': 14828, 'holdersPercentage': 0.8137, 'noHoldersQuantity': 3395, 'noHoldersPercentage': 0.1863, 'all': None, 'floorPrice': 10.25}, 'listingVo': {'holdersQuantity': 682, 'holdersPercentage': 0.0682, 'noHoldersQuantity': 9318, 'noHoldersPercentage': 0.9318, 'all': None, 'floorPrice': None}}}
[2022-10-13 17:02:17,068][db.py 39][INFO]: 查询的sql为：
        select
            floor_price
        from
            `hk-manhattan`.chain_collection_quotation
        where
            collection_uuid = 101008
            and create_time = str_to_date( date_format( DATE_sub(CURRENT_TIMESTAMP(), interval 0 hour), '%Y-%m-%d %H'),
            '%Y-%m-%d %H%i%m') 
    
[2022-10-13 17:02:17,288][db.py 39][INFO]: 查询的sql为：
    select count(*) count from `hk-chaindata-new`.chain_collection_nft_activity where collection_uuid = 101008 and event = 'SALE' and transaction_price<10.25*1000000000000000000
    
[2022-10-13 17:02:17,634][db.py 39][INFO]: 查询的sql为：
    select count(*) count from `hk-chaindata-new`.chain_collection_nft_activity where collection_uuid = 101008 and event = 'SALE' and transaction_price>=10.25*1000000000000000000
    
